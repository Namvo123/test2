import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { Component, EventEmitter, HostListener, Input, Output, ViewChild, ViewChildren, } from '@angular/core';
import { MdbMentionItemComponent } from './mention-item.component';
import { dropdownAnimation, dropdownContainerAnimation } from './mention.animations';
import * as i0 from "@angular/core";
import * as i1 from "./mention-item.component";
import * as i2 from "@angular/common";
export class MdbMentionComponent {
    constructor() {
        this.optionHeight = 35;
        this.noResultText = 'No result found';
        this.visibleItems = 5;
        this.items = [];
        this.queryBy = 'username';
        this.showNoResultText = true;
        this.asyncError = false;
        this.showImg = false;
        this.mentionValue = '';
        this.optionClick = new EventEmitter();
        this.tabout = new EventEmitter();
    }
    ngAfterViewInit() {
        this.keyManager = new ActiveDescendantKeyManager(this.options);
        setTimeout(() => {
            this.keyManager.setFirstItemActive();
        }, 0);
        this.options.changes.subscribe(() => {
            setTimeout(() => {
                this.keyManager.setFirstItemActive();
            }, 0);
        });
        this.keyManager.tabOut.subscribe(() => {
            this.tabout.emit();
        });
    }
    handleKeyDown(event) {
        if (!this.items) {
            return;
        }
        const key = event.code;
        this.keyManager.onKeydown(event);
        switch (key) {
            case 'Home':
                this.keyManager.setFirstItemActive();
                break;
            case 'End':
                this.keyManager.setLastItemActive();
                break;
            case 'Enter':
                const activeItem = this.keyManager.activeItem.item;
                this.handleOptionClick(activeItem);
                break;
        }
        this._moveHighlightedIntoView();
    }
    handleOptionClick(item) {
        this.optionClick.emit(item);
    }
    _setScrollTop(scrollPosition) {
        if (this._dropdownList) {
            this._dropdownList.nativeElement.scrollTop = scrollPosition;
        }
    }
    _moveHighlightedIntoView() {
        const index = this.keyManager.activeItemIndex;
        if (index === 0) {
            this._setScrollTop(0);
        }
        else if (index && index > -1) {
            let newScrollPosition;
            const optionHeight = this.optionHeight;
            const listHeight = this._dropdownList.nativeElement.clientHeight;
            const itemTop = index * optionHeight;
            const itemBottom = itemTop + optionHeight;
            const viewTop = this._dropdownList.nativeElement.scrollTop;
            const viewBottom = viewTop + listHeight;
            if (itemBottom > viewBottom) {
                newScrollPosition = itemBottom - listHeight;
                this._setScrollTop(newScrollPosition);
            }
            else if (itemTop < viewTop) {
                newScrollPosition = itemTop;
                this._setScrollTop(newScrollPosition);
            }
        }
    }
}
MdbMentionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbMentionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MdbMentionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbMentionComponent, selector: "mdb-mention", inputs: { optionHeight: "optionHeight" }, outputs: { optionClick: "optionClick", tabout: "tabout" }, host: { listeners: { "window:keydown": "handleKeyDown($event)" } }, viewQueries: [{ propertyName: "_dropdownList", first: true, predicate: ["dropdownList"], descendants: true }, { propertyName: "options", predicate: MdbMentionItemComponent, descendants: true }], ngImport: i0, template: "<div [@dropdownContainerAnimation] class=\"mention-dropdown-container\" >\n    <div [@dropdownAnimation] role=\"listbox\" class=\"mention-dropdown\">\n      <ul class=\"mention-items-list\" #dropdownList\n        [ngStyle]=\"{'max-height': optionHeight * visibleItems + 'px'}\">\n        <mention-item\n        *ngFor=\"let item of items\"\n        [mentionValue]=\"mentionValue\"\n        [showImg]=\"showImg\"\n        [queryBy]=\"queryBy\"\n        [optionHeight]=\"optionHeight\"\n        [item]=\"item\"\n        (click)=\"handleOptionClick(item)\"></mention-item>\n        <li\n        *ngIf=\"(items.length === 0 && showNoResultText) || asyncError\"\n        [ngStyle]=\"{'min-height': optionHeight + 'px'}\"\n        class=\"mention-result\">\n        {{ noResultText }}\n      </li>\n      </ul>\n    </div>\n  </div>", components: [{ type: i1.MdbMentionItemComponent, selector: "mention-item", inputs: ["item", "queryBy", "optionHeight", "showImg", "mentionValue"] }], directives: [{ type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [dropdownAnimation, dropdownContainerAnimation] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbMentionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-mention', styles: [], animations: [dropdownAnimation, dropdownContainerAnimation], template: "<div [@dropdownContainerAnimation] class=\"mention-dropdown-container\" >\n    <div [@dropdownAnimation] role=\"listbox\" class=\"mention-dropdown\">\n      <ul class=\"mention-items-list\" #dropdownList\n        [ngStyle]=\"{'max-height': optionHeight * visibleItems + 'px'}\">\n        <mention-item\n        *ngFor=\"let item of items\"\n        [mentionValue]=\"mentionValue\"\n        [showImg]=\"showImg\"\n        [queryBy]=\"queryBy\"\n        [optionHeight]=\"optionHeight\"\n        [item]=\"item\"\n        (click)=\"handleOptionClick(item)\"></mention-item>\n        <li\n        *ngIf=\"(items.length === 0 && showNoResultText) || asyncError\"\n        [ngStyle]=\"{'min-height': optionHeight + 'px'}\"\n        class=\"mention-result\">\n        {{ noResultText }}\n      </li>\n      </ul>\n    </div>\n  </div>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: ViewChildren,
                args: [MdbMentionItemComponent]
            }], _dropdownList: [{
                type: ViewChild,
                args: ['dropdownList']
            }], optionHeight: [{
                type: Input
            }], optionClick: [{
                type: Output
            }], tabout: [{
                type: Output
            }], handleKeyDown: [{
                type: HostListener,
                args: ['window:keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,