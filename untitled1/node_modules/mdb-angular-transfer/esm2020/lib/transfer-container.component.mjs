import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "mdb-angular-ui-kit/forms";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
export class MdbTransferContainerComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this._data = [];
        this._pagination = false;
        this._elementsPerPage = 5;
        this.onSearchOutput = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.selectAllChecked = false;
        this.paginationPage = 1;
        this.formatedData = [];
        this.filteredData = [];
        this.searchId = this.generateUID();
        this.selectAllCheckboxId = this.generateUID();
    }
    get dataType() {
        return this._dataType;
    }
    set dataType(type) {
        this._dataType = type;
    }
    get data() {
        return this._data;
    }
    set data(data) {
        this._data = data;
        this.filteredData = data;
        this.updateData();
    }
    get pagination() {
        return this._pagination;
    }
    set pagination(isTrue) {
        this._pagination = coerceBooleanProperty(isTrue);
        this.updateData();
    }
    get elementsPerPage() {
        return this._elementsPerPage;
    }
    set elementsPerPage(value) {
        this._elementsPerPage = value;
    }
    get search() {
        return this._search;
    }
    set search(isTrue) {
        this._search = coerceBooleanProperty(isTrue);
    }
    get selectedItemsNumebr() {
        return [
            ...this.data.filter((item) => {
                return item.checked;
            }),
        ].length;
    }
    get isSeletedAll() {
        return this.data.every((el) => {
            return el.checked || el.disabled;
        });
    }
    ngAfterViewInit() {
        this.data.forEach((el) => {
            el.id = this.generateUID();
        });
        this.updateData();
    }
    toggleSelectAll() {
        if (this.isSeletedAll) {
            this.data.forEach((el) => {
                if (!el.disabled) {
                    el.checked = false;
                }
            });
        }
        else {
            this.data.forEach((el) => {
                if (!el.disabled) {
                    el.checked = true;
                }
            });
        }
        if (!this.isSeletedAll) {
            this.selectAllChecked = false;
        }
        this.onSelect.emit();
    }
    toggleSelect(item) {
        const element = this.data.find((el) => el === item);
        element.checked = !element.checked;
        if (!this.isSeletedAll) {
            this.selectAllChecked = false;
        }
        else {
            this.selectAllChecked = true;
        }
        this._cdRef.detectChanges();
        this.onSelect.emit();
    }
    changePaginationPage(direction) {
        const lastPage = Math.ceil(this.filteredData.length / this.elementsPerPage);
        if (direction === 'next' && this.paginationPage < lastPage) {
            this.paginationPage += 1;
        }
        else if (direction === 'previous' && this.paginationPage > 1) {
            this.paginationPage -= 1;
        }
        this.updateData();
    }
    _paginateData(data) {
        const startIndex = (this.paginationPage - 1) * this.elementsPerPage;
        const endIndex = startIndex + this.elementsPerPage;
        return data.slice(startIndex, endIndex);
    }
    updateData() {
        let updatedData = this.data;
        if (this.pagination) {
            updatedData = this._paginateData(this.filteredData);
        }
        else {
            updatedData = this.filteredData;
        }
        this.formatedData = updatedData;
        this._cdRef.markForCheck();
    }
    onSearch(searchKey) {
        const filteredData = this.data.filter((item) => {
            const lowerText = item.data.toLowerCase();
            const lowerKey = searchKey.toLowerCase();
            return lowerText.includes(lowerKey) ? item : false;
        });
        this.filteredData = filteredData;
        this.updateData();
        this.onSearchOutput.emit();
    }
    generateUID() {
        const uid = Math.random().toString(36).substr(2, 9);
        return `mdb-transfer-${uid}`;
    }
}
MdbTransferContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTransferContainerComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MdbTransferContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbTransferContainerComponent, selector: "mdb-transfer-container", inputs: { dataType: "dataType", data: "data", pagination: "pagination", elementsPerPage: "elementsPerPage", search: "search" }, outputs: { onSearchOutput: "onSearchOutput", onSelect: "onSelect" }, ngImport: i0, template: "<div class=\"transfer-container-header\">\n  <div class=\"transfer-header-select-all-container\">\n    <input\n      #selectAllChekcbox\n      mdbCheckbox\n      class=\"form-check-input\"\n      type=\"checkbox\"\n      value=\"\"\n      id=\"{{selectAllCheckboxId}}\"\n      [(ngModel)]=\"selectAllChecked\"\n      (click)=\"toggleSelectAll()\"\n    />\n    <label \n      style=\"text-transform: capitalize\"\n      class=\"form-check-label\"\n      for=\"{{selectAllChekcbox.id}}\"\n    >\n      {{dataType}}\n    </label>\n  </div>\n  <span class=\"transfer-header-quantity\">\n    <span class=\"current-checked\">{{selectedItemsNumebr}}</span>\n    <span>/</span>\n    <span class=\"transfer-header-full-quantity\">{{data.length}}</span>\n  </span>\n</div>\n<mdb-form-control *ngIf=\"search\" class=\"transfer-search-outline\">\n  <input \n    #searchInput\n    mdbInput\n    type=\"text\"\n    id=\"mdb-transfer-search-{{searchId}}\"\n    class=\"form-control\"\n    (input)=\"onSearch($event.target.value)\"\n  />\n  <label \n    mdbLabel\n    class=\"form-label\"\n    for=\"{{searchInput.id}}\"\n  >\n    Search\n  </label>\n</mdb-form-control>\n<ul class=\"transfer-body\" [ngClass]=\"{'transfer-body-no-data': formatedData.length === 0}\">\n  <div *ngIf=\"data.length === 0\" class=\"transfer-body-no-data\">\n    <i class=\"far fa-folder-open transfer-no-data-mdb-icon\"></i>\n    <span>No Data</span>\n  </div>\n  <ng-container *ngIf=\"formatedData.length > 0\">\n    <li *ngFor=\"let item of formatedData\" class=\"transfer-body-item\">\n      <div class=\"form-check\">\n        <input\n          #itemCheckbox\n          mdbCheckbox\n          class=\"form-check-input transfer-body-item-text form-check-label transfer-body-item-checkbox\"\n          type=\"checkbox\"\n          value=\"\"\n          id=\"{{item.id}}\"\n          [ngClass]=\"{'transfer-body-item-checkbox-disabled': item.disabled}\"\n          [disabled]=\"item.disabled\"\n          [checked]=\"item.checked\"\n          (click)=\"toggleSelect(item)\"\n        />\n        <label \n          class=\"form-check-label transfer-body-item-text\"\n          for=\"{{item.id}}\"\n          [ngClass]=\"{'transfer-body-item-text-disabled': item.disabled}\"\n        >\n          {{ item.data }}\n        </label>\n      </div>\n    </li>\n  </ng-container>\n</ul>\n<div *ngIf=\"pagination\" class=\"transfer-footer\">\n  <button \n    class=\"btn btn-outline-primary btn-floating btn-sm transfer-footer-arrow\"\n    (click)=\"changePaginationPage('previous')\"  \n  >\n    <i class=\"fas fa-angle-left\"></i>\n  </button>\n  <span class=\"transfer-footer-current-page\">{{paginationPage}}</span>\n  <button \n    class=\"btn btn-outline-primary btn-floating btn-sm transfer-footer-arrow\"\n    (click)=\"changePaginationPage('next')\"  \n  >\n    <i class=\"fas fa-angle-right\"></i>\n  </button>\n</div>", components: [{ type: i1.MdbFormControlComponent, selector: "mdb-form-control" }], directives: [{ type: i2.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MdbInputDirective, selector: "[mdbInput]", inputs: ["disabled", "readonly", "value"], exportAs: ["mdbInput"] }, { type: i1.MdbLabelDirective, selector: "[mdbLabel]", exportAs: ["mdbLabel"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTransferContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-transfer-container', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"transfer-container-header\">\n  <div class=\"transfer-header-select-all-container\">\n    <input\n      #selectAllChekcbox\n      mdbCheckbox\n      class=\"form-check-input\"\n      type=\"checkbox\"\n      value=\"\"\n      id=\"{{selectAllCheckboxId}}\"\n      [(ngModel)]=\"selectAllChecked\"\n      (click)=\"toggleSelectAll()\"\n    />\n    <label \n      style=\"text-transform: capitalize\"\n      class=\"form-check-label\"\n      for=\"{{selectAllChekcbox.id}}\"\n    >\n      {{dataType}}\n    </label>\n  </div>\n  <span class=\"transfer-header-quantity\">\n    <span class=\"current-checked\">{{selectedItemsNumebr}}</span>\n    <span>/</span>\n    <span class=\"transfer-header-full-quantity\">{{data.length}}</span>\n  </span>\n</div>\n<mdb-form-control *ngIf=\"search\" class=\"transfer-search-outline\">\n  <input \n    #searchInput\n    mdbInput\n    type=\"text\"\n    id=\"mdb-transfer-search-{{searchId}}\"\n    class=\"form-control\"\n    (input)=\"onSearch($event.target.value)\"\n  />\n  <label \n    mdbLabel\n    class=\"form-label\"\n    for=\"{{searchInput.id}}\"\n  >\n    Search\n  </label>\n</mdb-form-control>\n<ul class=\"transfer-body\" [ngClass]=\"{'transfer-body-no-data': formatedData.length === 0}\">\n  <div *ngIf=\"data.length === 0\" class=\"transfer-body-no-data\">\n    <i class=\"far fa-folder-open transfer-no-data-mdb-icon\"></i>\n    <span>No Data</span>\n  </div>\n  <ng-container *ngIf=\"formatedData.length > 0\">\n    <li *ngFor=\"let item of formatedData\" class=\"transfer-body-item\">\n      <div class=\"form-check\">\n        <input\n          #itemCheckbox\n          mdbCheckbox\n          class=\"form-check-input transfer-body-item-text form-check-label transfer-body-item-checkbox\"\n          type=\"checkbox\"\n          value=\"\"\n          id=\"{{item.id}}\"\n          [ngClass]=\"{'transfer-body-item-checkbox-disabled': item.disabled}\"\n          [disabled]=\"item.disabled\"\n          [checked]=\"item.checked\"\n          (click)=\"toggleSelect(item)\"\n        />\n        <label \n          class=\"form-check-label transfer-body-item-text\"\n          for=\"{{item.id}}\"\n          [ngClass]=\"{'transfer-body-item-text-disabled': item.disabled}\"\n        >\n          {{ item.data }}\n        </label>\n      </div>\n    </li>\n  </ng-container>\n</ul>\n<div *ngIf=\"pagination\" class=\"transfer-footer\">\n  <button \n    class=\"btn btn-outline-primary btn-floating btn-sm transfer-footer-arrow\"\n    (click)=\"changePaginationPage('previous')\"  \n  >\n    <i class=\"fas fa-angle-left\"></i>\n  </button>\n  <span class=\"transfer-footer-current-page\">{{paginationPage}}</span>\n  <button \n    class=\"btn btn-outline-primary btn-floating btn-sm transfer-footer-arrow\"\n    (click)=\"changePaginationPage('next')\"  \n  >\n    <i class=\"fas fa-angle-right\"></i>\n  </button>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { dataType: [{
                type: Input
            }], data: [{
                type: Input
            }], pagination: [{
                type: Input
            }], elementsPerPage: [{
                type: Input
            }], search: [{
                type: Input
            }], onSearchOutput: [{
                type: Output
            }], onSelect: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,