import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./transfer-container.component";
export class MdbTransferComponent {
    constructor() {
        this.class = 'transfer';
        this._dataSource = [];
        this._dataTarget = [];
        this._oneWay = false;
        this._pagination = false;
        this._elementsPerPage = 5;
        this._search = false;
        this.onChange = new EventEmitter();
        this.onSearch = new EventEmitter();
        this.onSelect = new EventEmitter();
    }
    get dataSource() {
        return this._dataSource;
    }
    set dataSource(data) {
        this._dataSource = data;
    }
    get dataTarget() {
        return this._dataTarget;
    }
    set dataTarget(data) {
        this._dataTarget = data;
    }
    get oneWay() {
        return this._oneWay;
    }
    set oneWay(isTrue) {
        this._oneWay = coerceBooleanProperty(isTrue);
    }
    get pagination() {
        return this._pagination;
    }
    set pagination(isTrue) {
        this._pagination = coerceBooleanProperty(isTrue);
    }
    get elementsPerPage() {
        return this._elementsPerPage;
    }
    set elementsPerPage(value) {
        this._elementsPerPage = value;
    }
    get search() {
        return this._search;
    }
    set search(isTrue) {
        this._search = coerceBooleanProperty(isTrue);
    }
    transferData(transferTo) {
        switch (transferTo) {
            case 'source':
                this.sendToSource();
                break;
            case 'target':
                this.sentToTarget();
                break;
            default:
                break;
        }
        this._updateTransferContainers();
    }
    sendToSource() {
        const dataToTransfer = [
            ...this.dataTarget.filter((data) => {
                return data.checked;
            }),
        ];
        this.dataSource = [...this.dataSource, ...dataToTransfer];
        this.dataTarget = [
            ...this.dataTarget.filter((data) => {
                return !data.checked;
            }),
        ];
        dataToTransfer.forEach((data) => {
            data.checked = false;
        });
    }
    sentToTarget() {
        const dataToTransfer = [
            ...this.dataSource.filter((data) => {
                return data.checked;
            }),
        ];
        this.dataTarget = [...this.dataTarget, ...dataToTransfer];
        this.dataSource = [
            ...this.dataSource.filter((data) => {
                return !data.checked;
            }),
        ];
        dataToTransfer.forEach((data) => {
            data.checked = false;
        });
    }
    _updateTransferContainers() {
        this.transferSourceContainer.updateData();
        this.transferTargetContainer.updateData();
        this.onChange.emit();
    }
}
MdbTransferComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTransferComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MdbTransferComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbTransferComponent, selector: "mdb-transfer", inputs: { dataSource: "dataSource", dataTarget: "dataTarget", oneWay: "oneWay", pagination: "pagination", elementsPerPage: "elementsPerPage", search: "search" }, outputs: { onChange: "onChange", onSearch: "onSearch", onSelect: "onSelect" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "transferSourceContainer", first: true, predicate: ["transferSourceContainer"], descendants: true }, { propertyName: "transferTargetContainer", first: true, predicate: ["transferTargetContainer"], descendants: true }], ngImport: i0, template: "  <mdb-transfer-container \n    #transferSourceContainer\n    [dataType]=\"'source'\"\n    class=\"transfer-source-container transfer-container\"\n    [data]=\"dataSource\"\n    [pagination]=\"pagination\"\n    [elementsPerPage]=\"elementsPerPage\"\n    [search]=\"search\"\n    (onSearchOutput)=\"onSearch.emit()\"\n    (onSelect)=\"onSelect.emit()\"\n  ></mdb-transfer-container>\n  <div class=\"transfer-arrows-container transfer-container\">\n    <button \n      class=\"btn btn-primary transfer-arrows-arrow\"\n      (click)=\"transferData('source')\"\n      [attr.disabled]=\"oneWay ? 'true' : null\"\n    >\n      &lt;\n    </button>\n    <button\n      class=\"btn btn-primary transfer-arrows-arrow\"\n      (click)=\"transferData('target')\"\n    >\n      &gt;\n    </button>\n  </div>\n  <mdb-transfer-container\n    #transferTargetContainer\n    [dataType]=\"'target'\"\n    class=\"transfer-target-container transfer-container\"\n    [data]=\"dataTarget\"\n    [pagination]=\"pagination\"\n    [elementsPerPage]=\"elementsPerPage\"\n    [search]=\"search\"\n  ></mdb-transfer-container>", components: [{ type: i1.MdbTransferContainerComponent, selector: "mdb-transfer-container", inputs: ["dataType", "data", "pagination", "elementsPerPage", "search"], outputs: ["onSearchOutput", "onSelect"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbTransferComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-transfer', changeDetection: ChangeDetectionStrategy.OnPush, template: "  <mdb-transfer-container \n    #transferSourceContainer\n    [dataType]=\"'source'\"\n    class=\"transfer-source-container transfer-container\"\n    [data]=\"dataSource\"\n    [pagination]=\"pagination\"\n    [elementsPerPage]=\"elementsPerPage\"\n    [search]=\"search\"\n    (onSearchOutput)=\"onSearch.emit()\"\n    (onSelect)=\"onSelect.emit()\"\n  ></mdb-transfer-container>\n  <div class=\"transfer-arrows-container transfer-container\">\n    <button \n      class=\"btn btn-primary transfer-arrows-arrow\"\n      (click)=\"transferData('source')\"\n      [attr.disabled]=\"oneWay ? 'true' : null\"\n    >\n      &lt;\n    </button>\n    <button\n      class=\"btn btn-primary transfer-arrows-arrow\"\n      (click)=\"transferData('target')\"\n    >\n      &gt;\n    </button>\n  </div>\n  <mdb-transfer-container\n    #transferTargetContainer\n    [dataType]=\"'target'\"\n    class=\"transfer-target-container transfer-container\"\n    [data]=\"dataTarget\"\n    [pagination]=\"pagination\"\n    [elementsPerPage]=\"elementsPerPage\"\n    [search]=\"search\"\n  ></mdb-transfer-container>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { transferSourceContainer: [{
                type: ViewChild,
                args: ['transferSourceContainer']
            }], transferTargetContainer: [{
                type: ViewChild,
                args: ['transferTargetContainer']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], dataSource: [{
                type: Input
            }], dataTarget: [{
                type: Input
            }], oneWay: [{
                type: Input
            }], pagination: [{
                type: Input
            }], elementsPerPage: [{
                type: Input
            }], search: [{
                type: Input
            }], onChange: [{
                type: Output
            }], onSearch: [{
                type: Output
            }], onSelect: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,