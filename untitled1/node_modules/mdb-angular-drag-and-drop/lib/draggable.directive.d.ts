import { EventEmitter, NgZone, ElementRef, OnInit, InjectionToken, OnDestroy } from '@angular/core';
import { MdbSortableContainerDirective } from './sortable-container.directive';
import * as i0 from "@angular/core";
export declare const MDB_DRAGGABLE_PARENT: InjectionToken<{}>;
export declare class MdbDraggableDirective implements OnInit, OnDestroy {
    private _elementRef;
    private _ngZone;
    private _draggableParent?;
    copy: boolean;
    data: any;
    disabled: boolean;
    get boundaryElement(): any;
    set boundaryElement(value: any);
    private _boundaryElement;
    get handle(): any;
    set handle(value: any);
    private _handle;
    lockAxis: 'x' | 'y' | null;
    autoScroll: boolean;
    scrollSpeed: number;
    scrollSensitivity: number;
    delay: number;
    threshold: number;
    dragStart: EventEmitter<HTMLElement>;
    dragEnd: EventEmitter<HTMLElement>;
    get isMoving(): boolean;
    private _placeholder;
    private _helper;
    private _tempElement;
    private _hostPosition;
    private _startPosition;
    private _startTransform;
    private _pickUpPosition;
    private _draggingStartTime;
    private _isDragging;
    private _isMoving;
    private _pointerDown$;
    private _pointerMove$;
    private _pointerUp$;
    private _boundaries;
    private _destroy$;
    _sortableContainer: MdbSortableContainerDirective | null;
    _originalContainer: MdbSortableContainerDirective | null;
    private _originalContainerRect;
    private _startIndex;
    constructor(_elementRef: ElementRef, _ngZone: NgZone, _draggableParent?: MdbDraggableDirective);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private _setupEvents;
    _getHost(): HTMLElement;
    _getPlaceholder(): HTMLElement;
    private _subscribeToEvents;
    private _handleDragStart;
    private _getHtmlElement;
    private _measureBoundaries;
    private _handleDragMove;
    private _initSortableElements;
    private _createTempElement;
    private _getPosition;
    private _isTouchEvent;
    private _getDocumentScrollPosition;
    private _applyBoundaries;
    private _updateScrollPosition;
    private _updatePosition;
    private _getTransform;
    private _handleDragEnd;
    private _destroyHelper;
    private _destroyPlaceholder;
    private _createPlaceholder;
    private _createHelper;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbDraggableDirective, [null, null, { optional: true; skipSelf: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MdbDraggableDirective, "[mdbDraggable]", never, { "copy": "copy"; "data": "data"; "disabled": "disabled"; "boundaryElement": "boundaryElement"; "handle": "handle"; "lockAxis": "lockAxis"; "autoScroll": "autoScroll"; "scrollSpeed": "scrollSpeed"; "scrollSensitivity": "scrollSensitivity"; "delay": "delay"; "threshold": "threshold"; }, { "dragStart": "dragStart"; "dragEnd": "dragEnd"; }, never>;
}
