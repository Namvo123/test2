import { ElementRef, AfterContentInit, EventEmitter, InjectionToken } from '@angular/core';
import { MdbDraggableDirective } from './draggable.directive';
import { CachedDraggable } from './types';
import * as i0 from "@angular/core";
export declare const MDB_SORTABLE_CONTAINER: InjectionToken<MdbSortableContainerDirective>;
export declare class MdbSortableContainerDirective implements AfterContentInit {
    private _elementRef;
    private draggables;
    autoScroll: boolean;
    get containers(): any;
    set containers(containersArray: any);
    private _containers;
    data: any[];
    enterPredicate: (item: MdbDraggableDirective) => boolean;
    id: string;
    sortingDisabled: boolean;
    itemDrop: EventEmitter<any>;
    private static _sortableContainers;
    private _draggables;
    private _inactiveItems;
    private _cachedDraggables;
    _activeItem: CachedDraggable;
    private _eventsInitialized;
    private _mouseEnterHandler;
    currentIndex: number;
    newIndex: number;
    get element(): HTMLElement;
    constructor(_elementRef: ElementRef);
    ngAfterContentInit(): void;
    _onDragStart(): void;
    _onDragEnd(): void;
    _emitDropEvent(item: MdbDraggableDirective, previousContainer: MdbSortableContainerDirective, newContainer: MdbSortableContainerDirective, previousIndex: number, newIndex: number): void;
    private _cacheDraggables;
    _isPointerOverItem(rect: any, x: number, y: number): boolean;
    _initSortingEvents(item: MdbDraggableDirective): void;
    _removeSortingEvents(): void;
    _handleItemEnter(item: MdbDraggableDirective, x: number, y: number): void;
    _handleItemLeave(item: MdbDraggableDirective): void;
    private _getItemIndexFromCoordinates;
    _getContainerFromCoordinates(item: MdbDraggableDirective, x: number, y: number): any;
    _canAcceptEnteringItem(item: MdbDraggableDirective): boolean;
    _setEvents(activeDraggable: MdbDraggableDirective): void;
    private _handleMouseEnter;
    private _getTarget;
    _slideItems(itemBelow: boolean, itemsToMove: CachedDraggable[]): void;
    _slideActiveItem(item: CachedDraggable): void;
    _getItemsToMove(itemBelow: boolean, enteredItem: CachedDraggable): CachedDraggable[];
    _setTranslate(element: HTMLElement, x: number, y: number): void;
    _setIndexes(itemsToMove: CachedDraggable[], itemBelow: boolean): void;
    _setOffsets(): void;
    _resetTranslatesInfo(): void;
    _getDraggableIndex(item: MdbDraggableDirective): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbSortableContainerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MdbSortableContainerDirective, "[mdbSortableContainer]", ["mdbSortableContainer"], { "autoScroll": "autoScroll"; "containers": "containers"; "data": "data"; "enterPredicate": "enterPredicate"; "id": "id"; "sortingDisabled": "sortingDisabled"; }, { "itemDrop": "itemDrop"; }, ["draggables"]>;
}
