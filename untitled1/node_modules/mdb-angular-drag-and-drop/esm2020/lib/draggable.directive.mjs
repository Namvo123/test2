import { Directive, Input, EventEmitter, Output, Optional, SkipSelf, Inject, InjectionToken, HostBinding, } from '@angular/core';
import { fromEvent, merge, Subject } from 'rxjs';
import { takeUntil, tap, first, filter, switchMap } from 'rxjs/operators';
import { cloneNode, destroyNode } from './utilities';
import * as i0 from "@angular/core";
export const MDB_DRAGGABLE_PARENT = new InjectionToken('MDB_DRAGGABLE_PARENT');
export class MdbDraggableDirective {
    constructor(_elementRef, _ngZone, _draggableParent) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._draggableParent = _draggableParent;
        this.copy = false;
        this.disabled = false;
        this.lockAxis = null;
        this.autoScroll = false;
        this.scrollSpeed = 25;
        this.scrollSensitivity = 30;
        this.delay = 0;
        this.threshold = 0;
        this.dragStart = new EventEmitter();
        this.dragEnd = new EventEmitter();
        this._hostPosition = { x: 0, y: 0 };
        this._startPosition = { x: 0, y: 0 };
        this._startTransform = { x: 0, y: 0 };
        this._isDragging = false;
        this._isMoving = false;
        this._boundaries = null;
        this._destroy$ = new Subject();
        this._sortableContainer = null;
        this._originalContainer = null;
    }
    get boundaryElement() {
        return this._boundaryElement;
    }
    set boundaryElement(value) {
        if (typeof value === 'string') {
            this._boundaryElement = this._getHtmlElement(value);
        }
        else {
            this._boundaryElement = value;
        }
    }
    get handle() {
        return this._handle;
    }
    set handle(value) {
        if (typeof value === 'string') {
            this._handle = this._getHtmlElement(value);
        }
        else {
            this._handle = value;
        }
    }
    // @HostBinding('class.draggable') draggable = true;
    get isMoving() {
        return this._isMoving;
    }
    ngOnInit() {
        const target = this.handle ? this.handle : this._elementRef.nativeElement;
        this._setupEvents(target);
        this._subscribeToEvents();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    _setupEvents(element) {
        this._pointerDown$ = merge(fromEvent(element, 'mousedown', { passive: false }), fromEvent(element, 'touchstart', { passive: false }));
        this._pointerMove$ = merge(fromEvent(document, 'mousemove', { passive: false }), fromEvent(document, 'touchmove', { passive: false }));
        this._pointerUp$ = merge(fromEvent(document, 'mouseup', { passive: false }), fromEvent(document, 'touchend', { passive: false }));
    }
    _getHost() {
        return this._elementRef.nativeElement;
    }
    _getPlaceholder() {
        return this._placeholder;
    }
    _subscribeToEvents() {
        this._ngZone.runOutsideAngular(() => {
            const drag$ = this._pointerDown$.pipe(filter((startEvent) => startEvent.button !== 2 && !this.disabled), switchMap((event) => {
                this._handleDragStart(event);
                return this._pointerMove$.pipe(tap((moveEvent) => {
                    this._handleDragMove(moveEvent);
                }), takeUntil(this._pointerUp$));
            }), takeUntil(this._destroy$));
            const drop$ = this._pointerDown$.pipe(switchMap(() => {
                return this._pointerUp$.pipe(first(), tap(() => {
                    this._handleDragEnd();
                }));
            }), takeUntil(this._destroy$));
            drag$.subscribe();
            drop$.subscribe();
        });
    }
    _handleDragStart(event) {
        if (this._isDragging || this._isMoving) {
            return;
        }
        if (this._draggableParent) {
            event.stopPropagation();
        }
        this._isDragging = true;
        this._draggingStartTime = Date.now();
        const hostRect = this._elementRef.nativeElement.getBoundingClientRect();
        this._pickUpPosition = this._getPosition(event);
        this._startPosition.x = this._pickUpPosition.x - hostRect.left;
        this._startPosition.y = this._pickUpPosition.y - hostRect.top;
        if (this._boundaryElement) {
            this._measureBoundaries();
        }
        if (this._sortableContainer) {
            this._sortableContainer._onDragStart();
            this._originalContainer = this._sortableContainer;
            this._originalContainerRect = this._originalContainer.element.getBoundingClientRect();
            this._startIndex = this._sortableContainer._getDraggableIndex(this);
        }
    }
    _getHtmlElement(selector) {
        return document.querySelector(selector);
    }
    _measureBoundaries() {
        const viewRect = this._boundaryElement.getBoundingClientRect();
        const hostRect = this._elementRef.nativeElement.getBoundingClientRect();
        this._boundaries = {
            minX: viewRect.left - hostRect.left + this._hostPosition.x,
            maxX: viewRect.right - hostRect.right + this._hostPosition.x,
            minY: viewRect.top - hostRect.top + this._hostPosition.y,
            maxY: viewRect.bottom - hostRect.bottom + this._hostPosition.y,
        };
    }
    _handleDragMove(event) {
        const currentPosition = this._getPosition(event);
        const distanceX = Math.abs(currentPosition.x - this._pickUpPosition.x);
        const distanceY = Math.abs(currentPosition.y - this._pickUpPosition.y);
        if (!this._isMoving) {
            const isOverThreshold = distanceX + distanceY >= this.threshold;
            if (this._pickUpPosition && isOverThreshold) {
                const isAfterDelay = Date.now() - this._draggingStartTime >= this.delay;
                if (!isAfterDelay) {
                    return;
                }
                event.preventDefault();
                this._ngZone.run(() => {
                    this._isMoving = true;
                });
                if (this._sortableContainer) {
                    this._ngZone.run(() => {
                        this._initSortableElements();
                    });
                }
            }
            return;
        }
        event.preventDefault();
        this._hostPosition.x = currentPosition.x - this._pickUpPosition.x + this._startTransform.x;
        this._hostPosition.y = currentPosition.y - this._pickUpPosition.y + this._startTransform.y;
        if (this._boundaries) {
            this._applyBoundaries(this._boundaries);
        }
        if (this.lockAxis === 'x') {
            this._hostPosition.x = 0;
        }
        if (this.lockAxis === 'y') {
            this._hostPosition.y = 0;
        }
        if (this.autoScroll && !this._sortableContainer) {
            this._updateScrollPosition();
        }
        if (this._sortableContainer) {
            const originalContainer = this._originalContainer;
            const currentContainer = this._sortableContainer;
            const { x, y } = currentPosition;
            let newContainer = originalContainer._getContainerFromCoordinates(this, x, y);
            const isPointerOverOriginalContainer = !newContainer &&
                this._sortableContainer !== originalContainer &&
                originalContainer._isPointerOverItem(this._originalContainerRect, x, y);
            if (isPointerOverOriginalContainer) {
                newContainer = originalContainer;
            }
            if (newContainer && newContainer !== this._sortableContainer) {
                currentContainer._handleItemLeave(this);
                newContainer._handleItemEnter(this, currentPosition.x, currentPosition.y);
                this._sortableContainer = newContainer;
            }
            if (!this.copy) {
                originalContainer._initSortingEvents(this);
            }
            this._updatePosition(this._helper, currentPosition.x - this._startPosition.x, currentPosition.y - this._startPosition.y);
        }
        else {
            this._updatePosition(this._elementRef.nativeElement, this._hostPosition.x, this._hostPosition.y);
        }
    }
    _initSortableElements() {
        const tempElement = this._createTempElement();
        const host = this._elementRef.nativeElement;
        const hostParent = this._elementRef.nativeElement.parentNode;
        hostParent.insertBefore(tempElement, host);
        const placeholder = (this._placeholder = this._createPlaceholder());
        const helper = (this._helper = this._createHelper());
        this._elementRef.nativeElement.style.display = 'none';
        document.body.appendChild(hostParent.replaceChild(placeholder, host));
        document.body.appendChild(helper);
    }
    _createTempElement() {
        const tempElement = (this._tempElement = this._tempElement || document.createElement('div'));
        tempElement.style.display = 'none';
        return tempElement;
    }
    _getPosition(event) {
        const point = this._isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;
        const scrollPosition = this._getDocumentScrollPosition();
        return {
            x: point.pageX - scrollPosition.left,
            y: point.pageY - scrollPosition.top,
        };
    }
    _isTouchEvent(event) {
        return event.type.startsWith('touch');
    }
    _getDocumentScrollPosition() {
        const documentElement = document.documentElement;
        const body = document.body;
        const top = documentElement.scrollTop || body.scrollTop;
        const left = documentElement.scrollLeft || body.scrollLeft;
        return { top, left };
    }
    _applyBoundaries(boundaries) {
        this._hostPosition.x = Math.max(boundaries.minX, this._hostPosition.x);
        this._hostPosition.x = Math.min(boundaries.maxX, this._hostPosition.x);
        this._hostPosition.y = Math.max(boundaries.minY, this._hostPosition.y);
        this._hostPosition.y = Math.min(boundaries.maxY, this._hostPosition.y);
    }
    _updateScrollPosition() {
        const hostRect = this._elementRef.nativeElement.getBoundingClientRect();
        const height = document.documentElement.clientHeight;
        const width = document.documentElement.clientWidth;
        if (hostRect.top < this.scrollSensitivity) {
            document.documentElement.scrollTop -= this.scrollSpeed;
        }
        if (hostRect.top + hostRect.height > height - this.scrollSensitivity) {
            document.documentElement.scrollTop += this.scrollSpeed;
        }
        if (hostRect.left < this.scrollSensitivity) {
            document.documentElement.scrollLeft -= this.scrollSpeed;
        }
        if (hostRect.left + hostRect.width > width - this.scrollSensitivity) {
            document.documentElement.scrollLeft += this.scrollSpeed;
        }
    }
    _updatePosition(element, x, y) {
        const position = this._getTransform(x, y);
        element.style.transform = position;
    }
    _getTransform(x, y) {
        return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;
    }
    _handleDragEnd() {
        if (!this._isMoving) {
            return;
        }
        if (this._sortableContainer) {
            const placeholderRect = this._placeholder.getBoundingClientRect();
            this._helper.classList.add('draggable-animating');
            this._updatePosition(this._helper, placeholderRect.left, placeholderRect.top);
            setTimeout(() => {
                this._elementRef.nativeElement.style.display = '';
                this._tempElement.parentNode.replaceChild(this._elementRef.nativeElement, this._tempElement);
                this._destroyHelper();
                this._destroyPlaceholder();
                this._ngZone.run(() => {
                    const previousIndex = this._startIndex;
                    const newIndex = this._sortableContainer._getDraggableIndex(this);
                    const previousContainer = this._originalContainer;
                    const newContainer = this._sortableContainer;
                    this._sortableContainer._onDragEnd();
                    this._originalContainer._onDragEnd();
                    this._originalContainer._emitDropEvent(this, previousContainer, newContainer, previousIndex, newIndex);
                    this._sortableContainer = this._originalContainer;
                });
            }, 351);
        }
        else {
            this._startTransform.x = this._hostPosition.x;
            this._startTransform.y = this._hostPosition.y;
        }
        this._ngZone.run(() => {
            this._isMoving = false;
            this._isDragging = false;
        });
    }
    _destroyHelper() {
        if (this._helper) {
            destroyNode(this._helper);
        }
        this._helper = null;
    }
    _destroyPlaceholder() {
        if (this._placeholder) {
            destroyNode(this._placeholder);
        }
        this._placeholder = null;
    }
    _createPlaceholder() {
        const placeholder = cloneNode(this._elementRef.nativeElement);
        placeholder.style.visibility = 'hidden';
        placeholder.classList.add('draggable-placeholder');
        return placeholder;
    }
    _createHelper() {
        const helper = cloneNode(this._elementRef.nativeElement);
        const hostRect = this._elementRef.nativeElement.getBoundingClientRect();
        if (this.copy) {
            helper.style.opacity = '0.5';
        }
        helper.style.pointerEvents = 'none';
        helper.style.position = 'fixed';
        helper.style.top = '0';
        helper.style.left = '0';
        helper.style.margin = '0';
        helper.style.width = `${hostRect.width}px`;
        helper.style.height = `${hostRect.height}px`;
        helper.style.transform = this._getTransform(hostRect.left, hostRect.top);
        helper.classList.add('draggable-helper');
        return helper;
    }
}
MdbDraggableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbDraggableDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MDB_DRAGGABLE_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
MdbDraggableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.3", type: MdbDraggableDirective, selector: "[mdbDraggable]", inputs: { copy: "copy", data: "data", disabled: "disabled", boundaryElement: "boundaryElement", handle: "handle", lockAxis: "lockAxis", autoScroll: "autoScroll", scrollSpeed: "scrollSpeed", scrollSensitivity: "scrollSensitivity", delay: "delay", threshold: "threshold" }, outputs: { dragStart: "dragStart", dragEnd: "dragEnd" }, host: { properties: { "class.draggable-disabled": "this.disabled", "class.draggable-dragging": "this.isMoving" } }, providers: [{ provide: MDB_DRAGGABLE_PARENT, useExisting: MdbDraggableDirective }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbDraggableDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbDraggable]',
                    providers: [{ provide: MDB_DRAGGABLE_PARENT, useExisting: MdbDraggableDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: MdbDraggableDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [MDB_DRAGGABLE_PARENT]
                }] }]; }, propDecorators: { copy: [{
                type: Input
            }], data: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.draggable-disabled']
            }, {
                type: Input
            }], boundaryElement: [{
                type: Input
            }], handle: [{
                type: Input
            }], lockAxis: [{
                type: Input
            }], autoScroll: [{
                type: Input
            }], scrollSpeed: [{
                type: Input
            }], scrollSensitivity: [{
                type: Input
            }], delay: [{
                type: Input
            }], threshold: [{
                type: Input
            }], dragStart: [{
                type: Output
            }], dragEnd: [{
                type: Output
            }], isMoving: [{
                type: HostBinding,
                args: ['class.draggable-dragging']
            }] } });
//# sourceMappingURL=data:application/json;base64,