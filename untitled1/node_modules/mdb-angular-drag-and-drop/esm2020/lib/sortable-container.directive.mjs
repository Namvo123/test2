import { Directive, ContentChildren, Output, EventEmitter, Input, InjectionToken, } from '@angular/core';
import { getElementRect } from './utilities';
import { MdbDraggableDirective } from './draggable.directive';
import * as i0 from "@angular/core";
export const MDB_SORTABLE_CONTAINER = new InjectionToken('MdbSortableContainer');
export class MdbSortableContainerDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.autoScroll = false;
        this._containers = [];
        this.enterPredicate = () => true;
        this.sortingDisabled = false;
        this.itemDrop = new EventEmitter();
        this._inactiveItems = [];
        this._cachedDraggables = [];
        this._eventsInitialized = false;
        this._mouseEnterHandler = this._handleMouseEnter.bind(this);
        MdbSortableContainerDirective._sortableContainers.push(this);
    }
    get containers() {
        return this._containers;
    }
    set containers(containersArray) {
        this._containers = containersArray.map((container) => {
            if (typeof container === 'string') {
                return MdbSortableContainerDirective._sortableContainers.find((sortableContainer) => sortableContainer.id === container);
            }
            return container;
        });
    }
    get element() {
        return this._elementRef.nativeElement;
    }
    ngAfterContentInit() {
        this.draggables.forEach((draggable) => (draggable._sortableContainer = this));
        this._draggables = Array.from(this.draggables);
        this.draggables.changes.subscribe(() => {
            this.draggables.forEach((draggable) => (draggable._sortableContainer = this));
            this._draggables = Array.from(this.draggables);
        });
    }
    _onDragStart() {
        this.draggables.forEach((draggable) => (draggable._sortableContainer = this));
        this._draggables = Array.from(this.draggables);
        this._cacheDraggables();
    }
    _onDragEnd() {
        this._removeSortingEvents();
        this._eventsInitialized = false;
    }
    _emitDropEvent(item, previousContainer, newContainer, previousIndex, newIndex) {
        this.itemDrop.emit({
            item: item,
            previousContainer: previousContainer,
            newContainer: newContainer,
            previousIndex: previousIndex,
            newIndex: newIndex,
        });
    }
    _cacheDraggables() {
        this._cachedDraggables = this._draggables.map((draggable, index) => {
            const element = draggable._getHost();
            return {
                element: element,
                instance: draggable,
                offsetLeft: element.offsetLeft,
                offsetTop: element.offsetTop,
                translateX: 0,
                translateY: 0,
                index: index,
                rect: getElementRect(element),
            };
        });
    }
    _isPointerOverItem(rect, x, y) {
        const { top, bottom, left, right } = rect;
        const offset = 1;
        return (y + offset >= Math.floor(top) &&
            y - offset <= Math.floor(bottom) &&
            x + offset >= Math.floor(left) &&
            x - offset <= Math.floor(right));
    }
    _initSortingEvents(item) {
        if (!this._eventsInitialized) {
            this._setEvents(item);
            this._eventsInitialized = true;
        }
    }
    _removeSortingEvents() {
        this._draggables.forEach((item) => {
            const element = item._getHost();
            element.removeEventListener('mouseenter', this._mouseEnterHandler);
            element.style.transform = '';
            element.style.transition = '';
        });
    }
    _handleItemEnter(item, x, y) {
        this._eventsInitialized = false;
        this._cacheDraggables();
        const newIndex = this._getItemIndexFromCoordinates(x, y);
        const placeholder = item._getPlaceholder();
        let overItem = this._draggables[newIndex];
        let offsetLeft;
        let offsetTop;
        if (overItem) {
            const overItemElement = overItem._getHost();
            offsetLeft = overItemElement.offsetLeft;
            offsetTop = overItemElement.offsetTop;
            overItemElement.parentNode.insertBefore(placeholder, overItemElement);
            this._draggables.splice(newIndex, 0, item);
        }
        else {
            this.element.appendChild(placeholder);
            this._draggables.push(item);
        }
        placeholder.style.transform = '';
        this._cacheDraggables();
        if (overItem) {
            this._cachedDraggables[newIndex].offsetLeft = offsetLeft;
            this._cachedDraggables[newIndex].offsetTop = offsetTop;
        }
        else {
            const lastIndex = this._cachedDraggables.length - 1;
            this._cachedDraggables[lastIndex].offsetLeft = placeholder.offsetLeft;
            this._cachedDraggables[lastIndex].offsetTop = placeholder.offsetTop;
        }
        this._initSortingEvents(item);
    }
    _handleItemLeave(item) {
        const currentIndex = this._draggables.indexOf(item);
        this._draggables.splice(currentIndex, 1);
        this._removeSortingEvents();
    }
    _getItemIndexFromCoordinates(x, y) {
        return this._cachedDraggables.findIndex((draggable) => this._isPointerOverItem(draggable.rect, x, y));
    }
    _getContainerFromCoordinates(item, x, y) {
        return this.containers.find((container) => {
            if (container._canAcceptEnteringItem(item)) {
                return false;
            }
            const elementFromPoint = document.elementFromPoint(x, y);
            if (!elementFromPoint) {
                return false;
            }
            return container.element === elementFromPoint || container.element.contains(elementFromPoint);
        });
    }
    _canAcceptEnteringItem(item) {
        return !this.enterPredicate(item);
    }
    _setEvents(activeDraggable) {
        const inactiveSortItems = this._cachedDraggables.filter((draggable) => {
            if (draggable.instance === activeDraggable) {
                this._activeItem = draggable;
            }
            return draggable.instance !== activeDraggable;
        });
        this._inactiveItems = inactiveSortItems;
        if (!this.sortingDisabled) {
            inactiveSortItems.forEach((draggable) => {
                draggable.element.style.transition = `transform 300ms ease`;
                draggable.element.addEventListener('mouseenter', this._mouseEnterHandler);
            });
        }
    }
    _handleMouseEnter(event) {
        const enteredItem = this._getTarget(event);
        const itemBelow = enteredItem.index > this._activeItem.index;
        const itemsToMove = this._getItemsToMove(itemBelow, enteredItem);
        this._slideItems(itemBelow, itemsToMove);
        this._slideActiveItem(this._activeItem);
        this._activeItem.index = enteredItem.index;
        this._setIndexes(itemsToMove, itemBelow);
    }
    _getTarget(event) {
        return this._cachedDraggables.find((draggable) => draggable.element === event.target);
    }
    _slideItems(itemBelow, itemsToMove) {
        itemsToMove.forEach((item) => {
            const index = itemBelow ? item.index - 1 : item.index + 1;
            const adjacentItem = this._cachedDraggables[index];
            const distanceY = adjacentItem.offsetTop - item.offsetTop;
            const distanceX = adjacentItem.offsetLeft - item.offsetLeft;
            item.translateY = distanceY;
            item.translateX = distanceX;
            this._setTranslate(item.element, distanceX, distanceY);
        });
    }
    _slideActiveItem(item) {
        let sumY = 0;
        let sumX = 0;
        this._cachedDraggables.forEach((draggable) => {
            sumY -= draggable.translateY;
            sumX -= draggable.translateX;
        });
        const placeholder = item.instance._getPlaceholder();
        this._setTranslate(placeholder, sumX, sumY);
    }
    _getItemsToMove(itemBelow, enteredItem) {
        return this._cachedDraggables.filter((draggable) => {
            if (itemBelow) {
                return this._activeItem.index < draggable.index && draggable.index <= enteredItem.index;
            }
            return this._activeItem.index > draggable.index && draggable.index >= enteredItem.index;
        });
    }
    _setTranslate(element, x, y) {
        element.style.transform = `translate3d(${x}px, ${y}px, 0px)`;
    }
    _setIndexes(itemsToMove, itemBelow) {
        this._cachedDraggables = this._cachedDraggables.map((draggable) => {
            itemsToMove.forEach((item) => {
                if (draggable === item) {
                    if (itemBelow) {
                        item.index--;
                    }
                    else {
                        item.index++;
                    }
                }
            });
            return draggable;
        });
    }
    _setOffsets() {
        this._cachedDraggables.forEach((draggable) => {
            draggable.offsetLeft = draggable.element.offsetLeft;
            draggable.offsetTop = draggable.element.offsetTop;
        });
    }
    _resetTranslatesInfo() {
        this._cachedDraggables.forEach((draggable) => {
            draggable.translateX = 0;
            draggable.translateY = 0;
        });
    }
    _getDraggableIndex(item) {
        const correspondingItem = this._cachedDraggables.find((draggable) => draggable.instance === item);
        return correspondingItem.index;
    }
}
MdbSortableContainerDirective._sortableContainers = [];
MdbSortableContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbSortableContainerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
MdbSortableContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.3", type: MdbSortableContainerDirective, selector: "[mdbSortableContainer]", inputs: { autoScroll: "autoScroll", containers: "containers", data: "data", enterPredicate: "enterPredicate", id: "id", sortingDisabled: "sortingDisabled" }, outputs: { itemDrop: "itemDrop" }, providers: [{ provide: MDB_SORTABLE_CONTAINER, useExisting: MdbSortableContainerDirective }], queries: [{ propertyName: "draggables", predicate: MdbDraggableDirective }], exportAs: ["mdbSortableContainer"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbSortableContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbSortableContainer]',
                    exportAs: 'mdbSortableContainer',
                    providers: [{ provide: MDB_SORTABLE_CONTAINER, useExisting: MdbSortableContainerDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { draggables: [{
                type: ContentChildren,
                args: [MdbDraggableDirective]
            }], autoScroll: [{
                type: Input
            }], containers: [{
                type: Input
            }], data: [{
                type: Input
            }], enterPredicate: [{
                type: Input
            }], id: [{
                type: Input
            }], sortingDisabled: [{
                type: Input
            }], itemDrop: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,