import * as i0 from '@angular/core';
import { Injectable } from '@angular/core';

class MdbStorageManagementService {
    constructor() { }
    set(name, value, expires) {
        this.checkExpiry();
        localStorage.setItem(name, JSON.stringify(value));
        if (typeof expires === 'number') {
            const expiryList = this.get('expiryList') || [];
            expires = new Date(Number(new Date()) + expires * 1000 * 60 * 60 * 24);
            if (this.isPresentOnExpiryList(name)) {
                const index = expiryList.findIndex((el) => el[name] !== undefined);
                expiryList[index][name] = expires;
            }
            else {
                expiryList.push({ [name]: expires });
            }
            localStorage.setItem('expiryList', JSON.stringify(expiryList));
        }
        return `${name}: ${value}, expiries: ${expires}`;
    }
    get(name) {
        this.checkExpiry();
        return JSON.parse(localStorage.getItem(name));
    }
    remove(name) {
        this.checkExpiry();
        localStorage.removeItem(name);
        const expiryList = this.get('expiryList') || [];
        if (this.isPresentOnExpiryList(name)) {
            const filteredList = expiryList.filter((el) => {
                const elKey = Object.keys(el);
                return elKey[0] !== name;
            });
            localStorage.setItem('expiryList', JSON.stringify(filteredList));
        }
    }
    isPresentOnExpiryList(name) {
        const expiryList = this.get('expiryList') || [];
        return expiryList.some((el) => {
            return el[name] !== undefined;
        });
    }
    check(name, time, callback) {
        const expiryList = this.get('expiryList') || [];
        const filteredList = expiryList.filter((el) => {
            const elKey = Object.keys(el);
            return elKey[0] === name;
        });
        time *= 6000;
        const intervalId = setInterval(() => {
            if (!filteredList[0]) {
                clearInterval(intervalId);
                return;
            }
            if (new Date(filteredList[0][name]) < new Date()) {
                callback();
                clearInterval(intervalId);
            }
            this.checkExpiry();
        }, time);
    }
    checkExpiry() {
        const expiryList = JSON.parse(localStorage.getItem('expiryList')) || [];
        const now = new Date();
        expiryList.filter((el) => {
            const elKey = Object.keys(el);
            if (now > new Date(el[elKey.toString()])) {
                localStorage.removeItem(elKey[0]);
            }
            return el[elKey.toString()] >= now;
        });
    }
}
MdbStorageManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStorageManagementService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MdbStorageManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStorageManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStorageManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });

/*
 * Public API Surface of mdb-angular-storage-management
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MdbStorageManagementService };
//# sourceMappingURL=mdb-angular-storage-management.mjs.map
