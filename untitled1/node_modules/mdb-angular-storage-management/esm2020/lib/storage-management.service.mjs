import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class MdbStorageManagementService {
    constructor() { }
    set(name, value, expires) {
        this.checkExpiry();
        localStorage.setItem(name, JSON.stringify(value));
        if (typeof expires === 'number') {
            const expiryList = this.get('expiryList') || [];
            expires = new Date(Number(new Date()) + expires * 1000 * 60 * 60 * 24);
            if (this.isPresentOnExpiryList(name)) {
                const index = expiryList.findIndex((el) => el[name] !== undefined);
                expiryList[index][name] = expires;
            }
            else {
                expiryList.push({ [name]: expires });
            }
            localStorage.setItem('expiryList', JSON.stringify(expiryList));
        }
        return `${name}: ${value}, expiries: ${expires}`;
    }
    get(name) {
        this.checkExpiry();
        return JSON.parse(localStorage.getItem(name));
    }
    remove(name) {
        this.checkExpiry();
        localStorage.removeItem(name);
        const expiryList = this.get('expiryList') || [];
        if (this.isPresentOnExpiryList(name)) {
            const filteredList = expiryList.filter((el) => {
                const elKey = Object.keys(el);
                return elKey[0] !== name;
            });
            localStorage.setItem('expiryList', JSON.stringify(filteredList));
        }
    }
    isPresentOnExpiryList(name) {
        const expiryList = this.get('expiryList') || [];
        return expiryList.some((el) => {
            return el[name] !== undefined;
        });
    }
    check(name, time, callback) {
        const expiryList = this.get('expiryList') || [];
        const filteredList = expiryList.filter((el) => {
            const elKey = Object.keys(el);
            return elKey[0] === name;
        });
        time *= 6000;
        const intervalId = setInterval(() => {
            if (!filteredList[0]) {
                clearInterval(intervalId);
                return;
            }
            if (new Date(filteredList[0][name]) < new Date()) {
                callback();
                clearInterval(intervalId);
            }
            this.checkExpiry();
        }, time);
    }
    checkExpiry() {
        const expiryList = JSON.parse(localStorage.getItem('expiryList')) || [];
        const now = new Date();
        expiryList.filter((el) => {
            const elKey = Object.keys(el);
            if (now > new Date(el[elKey.toString()])) {
                localStorage.removeItem(elKey[0]);
            }
            return el[elKey.toString()] >= now;
        });
    }
}
MdbStorageManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStorageManagementService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MdbStorageManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStorageManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStorageManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1tYW5hZ2VtZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tZGItYW5ndWxhci1zdG9yYWdlLW1hbmFnZW1lbnQvc3JjL2xpYi9zdG9yYWdlLW1hbmFnZW1lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8sMkJBQTJCO0lBQ3RDLGdCQUFlLENBQUM7SUFFaEIsR0FBRyxDQUFDLElBQVksRUFBRSxLQUFVLEVBQUUsT0FBdUI7UUFDbkQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5CLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVsRCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUMvQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVoRCxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsR0FBRyxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFFdkUsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztnQkFDbkUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxVQUFVLENBQUMsSUFBSSxDQUFDLEVB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QUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUV2QixVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBTSxFQUFFLEVBQUU7WUFDM0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU5QixJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDeEMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuQztZQUVELE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O3dIQTVGVSwyQkFBMkI7NEhBQTNCLDJCQUEyQixjQUYxQixNQUFNOzJGQUVQLDJCQUEyQjtrQkFIdkMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNZGJTdG9yYWdlTWFuYWdlbWVudFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgc2V0KG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgZXhwaXJlcz86IG51bWJlciB8IERhdGUpOiBzdHJpbmcge1xuICAgIHRoaXMuY2hlY2tFeHBpcnkoKTtcblxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG5cbiAgICBpZiAodHlwZW9mIGV4cGlyZXMgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25zdCBleHBpcnlMaXN0ID0gdGhpcy5nZXQoJ2V4cGlyeUxpc3QnKSB8fCBbXTtcblxuICAgICAgZXhwaXJlcyA9IG5ldyBEYXRlKE51bWJlcihuZXcgRGF0ZSgpKSArIGV4cGlyZXMgKiAxMDAwICogNjAgKiA2MCAqIDI0KTtcblxuICAgICAgaWYgKHRoaXMuaXNQcmVzZW50T25FeHBpcnlMaXN0KG5hbWUpKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZXhwaXJ5TGlzdC5maW5kSW5kZXgoKGVsKSA9PiBlbFtuYW1lXSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgZXhwaXJ5TGlzdFtpbmRleF1bbmFtZV0gPSBleHBpcmVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwaXJ5TGlzdC5wdXNoKHsgW25hbWVdOiBleHBpcmVzIH0pO1xuICAgICAgfVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2V4cGlyeUxpc3QnLCBKU09OLnN0cmluZ2lmeShleHBpcnlMaXN0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke25hbWV9OiAke3ZhbHVlfSwgZXhwaXJpZXM6ICR7ZXhwaXJlc31gO1xuICB9XG5cbiAgZ2V0KG5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgdGhpcy5jaGVja0V4cGlyeSgpO1xuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0obmFtZSkpO1xuICB9XG5cbiAgcmVtb3ZlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tFeHBpcnkoKTtcblxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKG5hbWUpO1xuXG4gICAgY29uc3QgZXhwaXJ5TGlzdCA9IHRoaXMuZ2V0KCdleHBpcnlMaXN0JykgfHwgW107XG5cbiAgICBpZiAodGhpcy5pc1ByZXNlbnRPbkV4cGlyeUxpc3QobmFtZSkpIHtcbiAgICAgIGNvbnN0IGZpbHRlcmVkTGlzdCA9IGV4cGlyeUxpc3QuZmlsdGVyKChlbDoge30pID0+IHtcbiAgICAgICAgY29uc3QgZWxLZXkgPSBPYmplY3Qua2V5cyhlbCk7XG4gICAgICAgIHJldHVybiBlbEtleVswXSAhPT0gbmFtZTtcbiAgICAgIH0pO1xuXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZXhwaXJ5TGlzdCcsIEpTT04uc3RyaW5naWZ5KGZpbHRlcmVkTGlzdCkpO1xuICAgIH1cbiAgfVxuXG4gIGlzUHJlc2VudE9uRXhwaXJ5TGlzdChuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBleHBpcnlMaXN0ID0gdGhpcy5nZXQoJ2V4cGlyeUxpc3QnKSB8fCBbXTtcbiAgICByZXR1cm4gZXhwaXJ5TGlzdC5zb21lKChlbDoge30pID0+IHtcbiAgICAgIHJldHVybiBlbFtuYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICB9XG5cbiAgY2hlY2sobmFtZTogc3RyaW5nLCB0aW1lOiBudW1iZXIsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgY29uc3QgZXhwaXJ5TGlzdCA9IHRoaXMuZ2V0KCdleHBpcnlMaXN0JykgfHwgW107XG4gICAgY29uc3QgZmlsdGVyZWRMaXN0ID0gZXhwaXJ5TGlzdC5maWx0ZXIoKGVsOiB7fSkgPT4ge1xuICAgICAgY29uc3QgZWxLZXkgPSBPYmplY3Qua2V5cyhlbCk7XG4gICAgICByZXR1cm4gZWxLZXlbMF0gPT09IG5hbWU7XG4gICAgfSk7XG5cbiAgICB0aW1lICo9IDYwMDA7XG5cbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKCFmaWx0ZXJlZExpc3RbMF0pIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3IERhdGUoZmlsdGVyZWRMaXN0WzBdW25hbWVdKSA8IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jaGVja0V4cGlyeSgpO1xuICAgIH0sIHRpbWUpO1xuICB9XG5cbiAgY2hlY2tFeHBpcnkoKSB7XG4gICAgY29uc3QgZXhwaXJ5TGlzdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2V4cGlyeUxpc3QnKSkgfHwgW107XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblxuICAgIGV4cGlyeUxpc3QuZmlsdGVyKChlbDoge30pID0+IHtcbiAgICAgIGNvbnN0IGVsS2V5ID0gT2JqZWN0LmtleXMoZWwpO1xuXG4gICAgICBpZiAobm93ID4gbmV3IERhdGUoZWxbZWxLZXkudG9TdHJpbmcoKV0pKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGVsS2V5WzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVsW2VsS2V5LnRvU3RyaW5nKCldID49IG5vdztcbiAgICB9KTtcbiAgfVxufVxuIl19