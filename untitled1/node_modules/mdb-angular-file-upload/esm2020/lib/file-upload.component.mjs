import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, ViewChild, } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { mimeTypes } from './file-upload-mimetype-data';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
var UnitSize;
(function (UnitSize) {
    UnitSize[UnitSize["G"] = 1000000000] = "G";
    UnitSize[UnitSize["M"] = 1000000] = "M";
    UnitSize[UnitSize["K"] = 1000] = "K";
    UnitSize[UnitSize["B"] = 1] = "B";
})(UnitSize || (UnitSize = {}));
export class MdbFileUploadComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.wrapper = true;
        this.maxFileSize = Infinity;
        this.defaultPreview = null;
        this.height = null;
        this.disabled = false;
        this.acceptedExtensions = null;
        this.multiple = false;
        this.defaultMsg = 'Drag and drop a file here or click';
        this.mainError = 'Ooops, something wrong happened.';
        this.maxSizeError = 'Your file is too big (Max size ~~~)';
        this.formatError = 'Your file has incorrect file format (correct format(s) ~~~)';
        this.quantityError = 'Too many files (allowed quantity of files ~~~)';
        this.previewMsg = 'Drag and drop or click to replace';
        this.removeBtn = 'Remove';
        this.removeBtnDisabled = false;
        this.maxFileQuantity = Infinity;
        this.uploadError = new EventEmitter();
        this.fileAdded = new EventEmitter();
        this.fileRemoved = new EventEmitter();
        this._errors = [];
        this._files = [];
        this._previews = [];
        this._defaultPreview = null;
        this._showMainError = false;
        this._imageFileExtensions = ['png', 'jpg', 'jpeg', 'bmp', 'gif'];
        this._destroy$ = new Subject();
    }
    reset() {
        this.input.nativeElement.value = '';
        this._files = [];
        this._previews = [];
        this._errors = [];
        this._defaultPreview = null;
        this._cdRef.markForCheck();
    }
    ngOnInit() {
        if (this.defaultPreview) {
            this._setupDefaultPreview();
        }
        if (this.multiple) {
            this._setupDragEvents();
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    _setupDefaultPreview() {
        const previewParameters = this.defaultPreview.split('/');
        const name = previewParameters[previewParameters.length - 1];
        const extension = name.split('.')[1];
        const isImage = this._imageFileExtensions.includes(extension);
        const imageSrc = isImage && this.defaultPreview;
        this._defaultPreview = { name, isImage, extension, imageSrc };
    }
    _setupDragEvents() {
        fromEvent(this.previews.nativeElement, 'drop')
            .pipe(takeUntil(this._destroy$))
            .subscribe((event) => {
            event.preventDefault();
            const files = event.dataTransfer ? event.dataTransfer.files : [];
            if (files.length) {
                this._handleFileUpload(files);
            }
        });
        fromEvent(this.previews.nativeElement, 'dragover')
            .pipe(takeUntil(this._destroy$))
            .subscribe((event) => {
            event.preventDefault();
        });
    }
    _handleChangeEvent(event) {
        const files = event.target.files;
        if (!files.length) {
            return;
        }
        this._handleFileUpload(files);
    }
    _handleFileUpload(files) {
        this._errors = [];
        this._validateFiles(files);
        if (this._errors.length) {
            this.uploadError.emit(this._errors);
            return;
        }
        const canUploadMoreFiles = this.maxFileQuantity > this._files.length;
        if (this.multiple && !canUploadMoreFiles) {
            return;
        }
        if (this.multiple) {
            this._handleMultipleFileUpload(files);
        }
        else {
            this._previews = [];
            this._handleSingleFileUpload(files[0]);
        }
    }
    _validateFiles(files) {
        Array.from(files).forEach((file) => {
            this._checkFileSize(file);
            this._checkAcceptedExtensions(file);
        });
    }
    _checkFileSize(file) {
        const fileSizeMb = file.size / UnitSize.M;
        if (fileSizeMb > this.maxFileSize) {
            const type = 'maxSizeError';
            const message = this.maxSizeError.replace('~~~', `${this.maxFileSize}M`);
            this._errors.push({ type, message });
        }
    }
    _checkAcceptedExtensions(file) {
        if (!this.acceptedExtensions) {
            return;
        }
        const extensionsForMapping = [
            '.abw',
            '.arc',
            '.avi',
            '.azw',
            '.bin',
            '.bz',
            '.bz2',
            '.cda',
            '.csh',
            '.doc',
            '.docx',
            '.eot',
            '.epub',
            '.gz',
            '.htm',
            '.ico',
            '.ics',
            '.jar',
            '.js',
            '.json',
            '.jsonld',
            '.midi',
            '.mjs',
            '.mp3',
            '.mp4',
            '.mpeg',
            '.mpkg',
            '.odp',
            '.ods',
            '.odt',
            '.oga',
            '.ogv',
            '.ogx',
            '.opus',
            '.otf',
            '.php',
            '.ppt',
            '.pptx',
            '.rar',
            '.sh',
            '.svg',
            '.swf',
            '.tar',
            '.txt',
            '.vsd',
            '.weba',
            '.xhtml',
            '.xls',
            '.xul',
            '.x3gp',
            '.7z',
        ];
        const acceptedExtensions = this.acceptedExtensions.split(',');
        if (acceptedExtensions.length) {
            const fileMainType = file.type.split('/')[0];
            let fileSecondType = file.type.split('/')[1];
            let isAcceptedFormat = false;
            acceptedExtensions.forEach((format) => {
                const isMappingNeeded = extensionsForMapping.indexOf(format) > -1;
                if (isMappingNeeded) {
                    fileSecondType = mimeTypes.find((mimeType) => mimeType['ext'] === format)['ext'];
                }
                if (format.includes('/*') && format.includes(fileMainType)) {
                    isAcceptedFormat = true;
                }
                else if (format.includes('/') &&
                    format.includes(fileMainType) &&
                    format.includes(fileSecondType)) {
                    isAcceptedFormat = true;
                }
                else if (format.includes(fileSecondType)) {
                    isAcceptedFormat = true;
                }
            });
            if (!isAcceptedFormat) {
                const type = 'formatError';
                const message = this.formatError.replace('~~~', this.acceptedExtensions.split(',').join(' '));
                this._errors.push({ type, message });
            }
        }
    }
    _handleSingleFileUpload(file) {
        this._createPreview(file);
        this._files.push(file);
        this.fileAdded.emit([file]);
    }
    _handleMultipleFileUpload(files) {
        Array.from(files).forEach((file) => this._createPreview(file));
        this._files = [...this._files, ...files];
        this.fileAdded.emit([...files]);
        this.input.nativeElement.value = '';
    }
    _createPreview(file) {
        const name = file.name;
        const types = file.type.split('/');
        const isImage = types[0] === 'image';
        const extension = types[1];
        let imageSrc;
        if (isImage) {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onloadend = () => {
                imageSrc = reader.result;
                this._previews.push({ file, name, isImage, imageSrc, extension });
                this._cdRef.markForCheck();
            };
        }
        else {
            this._previews.push({ file, name, isImage, extension });
        }
        this._cdRef.markForCheck();
    }
    _removeFile(preview) {
        const previewIndex = this._previews.indexOf(preview);
        const fileIndex = this._files.indexOf(preview.file);
        this._previews.splice(previewIndex, 1);
        this._files.splice(fileIndex, 1);
        this.input.nativeElement.value = '';
        this.fileRemoved.emit(preview.file);
    }
    _removeDefaultPreview() {
        this._defaultPreview = null;
    }
    _handlePreviewsClick() {
        if (this.multiple && this._previews.length) {
            this.input.nativeElement.click();
        }
    }
}
MdbFileUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbFileUploadComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MdbFileUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbFileUploadComponent, selector: "mdb-file-upload", inputs: { maxFileSize: "maxFileSize", defaultPreview: "defaultPreview", height: "height", disabled: "disabled", acceptedExtensions: "acceptedExtensions", multiple: "multiple", defaultMsg: "defaultMsg", mainError: "mainError", maxSizeError: "maxSizeError", formatError: "formatError", quantityError: "quantityError", previewMsg: "previewMsg", removeBtn: "removeBtn", removeBtnDisabled: "removeBtnDisabled", maxFileQuantity: "maxFileQuantity" }, outputs: { uploadError: "uploadError", fileAdded: "fileAdded", fileRemoved: "fileRemoved" }, host: { properties: { "class.file-upload-wrapper": "this.wrapper" } }, viewQueries: [{ propertyName: "input", first: true, predicate: ["input"], descendants: true, static: true }, { propertyName: "previews", first: true, predicate: ["previews"], descendants: true, static: true }], ngImport: i0, template: "<div\n  class=\"file-upload\"\n  [ngClass]=\"{ disabled: disabled, 'has-preview': _previews.length || _defaultPreview, 'has-error': _errors.length }\"\n  [style.height.px]=\"height ? height : null\"\n>\n  <div class=\"file-upload-message\">\n    <i class=\"fas fa-cloud-upload-alt file-upload-cloud-icon\"></i>\n    <p class=\"file-upload-default-message\">{{ defaultMsg }}</p>\n    <p class=\"file-upload-main-error\" *ngIf=\"_errors.length\">{{ mainError }}</p>\n  </div>\n  <div class=\"file-upload-mask\"></div>\n  <ul class=\"file-upload-errors\" *ngFor=\"let error of _errors\">\n    <li class=\"file-upload-error\">{{ error.message }}</li>\n  </ul>\n  <input\n    #input\n    type=\"file\"\n    class=\"file-upload-input\"\n    [ngClass]=\"{ 'has-multiple': multiple }\"\n    [attr.disabled]=\"disabled ? disabled : null\"\n    [attr.multiple]=\"multiple ? multiple : null\"\n    [attr.accept]=\"acceptedExtensions ? acceptedExtensions : null\"\n    (change)=\"_handleChangeEvent($event)\"\n  />\n  <div #previews class=\"file-upload-previews\" (click)=\"_handlePreviewsClick()\">\n    <ng-container *ngIf=\"!_errors.length\">\n      <div class=\"file-upload-preview\" *ngFor=\"let preview of _previews\">\n        <span class=\"file-upload-render\">\n          <img *ngIf=\"preview.isImage\" class=\"file-upload-preview-img\" [src]=\"preview.imageSrc\" />\n          <ng-container *ngIf=\"!preview.isImage\">\n            <i *ngIf=\"!preview.isImage\" class=\"fas fa-file file-upload-file-icon\"></i>\n            <span class=\"file-upload-extension\">{{ preview.extension }}</span>\n          </ng-container>\n        </span>\n        <div class=\"file-upload-preview-details\">\n          <button *ngIf=\"!removeBtnDisabled\" type=\"button\" class=\"btn btn-danger file-upload-remove-file-btn\" (click)=\"_removeFile(preview); $event.stopPropagation()\">\n            {{ removeBtn }}\n            <i class=\"fa fa-trash-alt ms-1\"></i>\n          </button>\n          <div class=\"file-upload-details-container\">\n            <div class=\"file-upload-preview-details-inner\">\n              <p class=\"file-upload-file-name\">{{ preview.name }}</p>\n              <p class=\"file-upload-preview-message\">{{ previewMsg }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <div *ngIf=\"_defaultPreview && !_files.length\" class=\"file-upload-preview\">\n      <span class=\"file-upload-render\">\n        <img class=\"file-upload-preview-img\" [src]=\"_defaultPreview.imageSrc\" />\n      </span>\n      <div class=\"file-upload-preview-details\">\n        <button *ngIf=\"!removeBtnDisabled\" type=\"button\" class=\"btn btn-danger file-upload-remove-file-btn\" (click)=\"_removeDefaultPreview(); $event.stopPropagation()\">\n          {{ removeBtn }}\n          <i class=\"fa fa-trash-alt ms-1\"></i>\n        </button>\n        <div class=\"file-upload-details-container\">\n          <div class=\"file-upload-preview-details-inner\">\n            <p class=\"file-upload-file-name\">{{ _defaultPreview.name }}</p>\n            <p class=\"file-upload-preview-message\">{{ previewMsg }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbFileUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-file-upload', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  class=\"file-upload\"\n  [ngClass]=\"{ disabled: disabled, 'has-preview': _previews.length || _defaultPreview, 'has-error': _errors.length }\"\n  [style.height.px]=\"height ? height : null\"\n>\n  <div class=\"file-upload-message\">\n    <i class=\"fas fa-cloud-upload-alt file-upload-cloud-icon\"></i>\n    <p class=\"file-upload-default-message\">{{ defaultMsg }}</p>\n    <p class=\"file-upload-main-error\" *ngIf=\"_errors.length\">{{ mainError }}</p>\n  </div>\n  <div class=\"file-upload-mask\"></div>\n  <ul class=\"file-upload-errors\" *ngFor=\"let error of _errors\">\n    <li class=\"file-upload-error\">{{ error.message }}</li>\n  </ul>\n  <input\n    #input\n    type=\"file\"\n    class=\"file-upload-input\"\n    [ngClass]=\"{ 'has-multiple': multiple }\"\n    [attr.disabled]=\"disabled ? disabled : null\"\n    [attr.multiple]=\"multiple ? multiple : null\"\n    [attr.accept]=\"acceptedExtensions ? acceptedExtensions : null\"\n    (change)=\"_handleChangeEvent($event)\"\n  />\n  <div #previews class=\"file-upload-previews\" (click)=\"_handlePreviewsClick()\">\n    <ng-container *ngIf=\"!_errors.length\">\n      <div class=\"file-upload-preview\" *ngFor=\"let preview of _previews\">\n        <span class=\"file-upload-render\">\n          <img *ngIf=\"preview.isImage\" class=\"file-upload-preview-img\" [src]=\"preview.imageSrc\" />\n          <ng-container *ngIf=\"!preview.isImage\">\n            <i *ngIf=\"!preview.isImage\" class=\"fas fa-file file-upload-file-icon\"></i>\n            <span class=\"file-upload-extension\">{{ preview.extension }}</span>\n          </ng-container>\n        </span>\n        <div class=\"file-upload-preview-details\">\n          <button *ngIf=\"!removeBtnDisabled\" type=\"button\" class=\"btn btn-danger file-upload-remove-file-btn\" (click)=\"_removeFile(preview); $event.stopPropagation()\">\n            {{ removeBtn }}\n            <i class=\"fa fa-trash-alt ms-1\"></i>\n          </button>\n          <div class=\"file-upload-details-container\">\n            <div class=\"file-upload-preview-details-inner\">\n              <p class=\"file-upload-file-name\">{{ preview.name }}</p>\n              <p class=\"file-upload-preview-message\">{{ previewMsg }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <div *ngIf=\"_defaultPreview && !_files.length\" class=\"file-upload-preview\">\n      <span class=\"file-upload-render\">\n        <img class=\"file-upload-preview-img\" [src]=\"_defaultPreview.imageSrc\" />\n      </span>\n      <div class=\"file-upload-preview-details\">\n        <button *ngIf=\"!removeBtnDisabled\" type=\"button\" class=\"btn btn-danger file-upload-remove-file-btn\" (click)=\"_removeDefaultPreview(); $event.stopPropagation()\">\n          {{ removeBtn }}\n          <i class=\"fa fa-trash-alt ms-1\"></i>\n        </button>\n        <div class=\"file-upload-details-container\">\n          <div class=\"file-upload-preview-details-inner\">\n            <p class=\"file-upload-file-name\">{{ _defaultPreview.name }}</p>\n            <p class=\"file-upload-preview-message\">{{ previewMsg }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { input: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }], previews: [{
                type: ViewChild,
                args: ['previews', { static: true }]
            }], wrapper: [{
                type: HostBinding,
                args: ['class.file-upload-wrapper']
            }], maxFileSize: [{
                type: Input
            }], defaultPreview: [{
                type: Input
            }], height: [{
                type: Input
            }], disabled: [{
                type: Input
            }], acceptedExtensions: [{
                type: Input
            }], multiple: [{
                type: Input
            }], defaultMsg: [{
                type: Input
            }], mainError: [{
                type: Input
            }], maxSizeError: [{
                type: Input
            }], formatError: [{
                type: Input
            }], quantityError: [{
                type: Input
            }], previewMsg: [{
                type: Input
            }], removeBtn: [{
                type: Input
            }], removeBtnDisabled: [{
                type: Input
            }], maxFileQuantity: [{
                type: Input
            }], uploadError: [{
                type: Output
            }], fileAdded: [{
                type: Output
            }], fileRemoved: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,