import * as i0 from '@angular/core';
import { Component, EventEmitter, Input, Output, ViewChildren, NgModule } from '@angular/core';
import * as i5 from '@angular/forms';
import { FormGroup, FormControl, Validators, ReactiveFormsModule } from '@angular/forms';
import * as i1 from 'mdb-angular-ui-kit/modal';
import { MdbModalModule } from 'mdb-angular-ui-kit/modal';
import * as i2 from 'mdb-angular-ui-kit/forms';
import { MdbFormsModule } from 'mdb-angular-ui-kit/forms';
import * as i3 from 'mdb-angular-ui-kit/datepicker';
import { MdbDatepickerModule } from 'mdb-angular-ui-kit/datepicker';
import * as i4 from 'mdb-angular-ui-kit/timepicker';
import { MdbTimepickerModule } from 'mdb-angular-ui-kit/timepicker';
import * as i6 from 'mdb-angular-ui-kit/validation';
import { MdbValidationModule } from 'mdb-angular-ui-kit/validation';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import { take } from 'rxjs/operators';
import * as i2$1 from 'mdb-angular-ui-kit/tooltip';
import { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';

const MS_IN_DAY = 24 * 60 * 60 * 1000;
const MS_IN_HOUR = 1000 * 60 * 60;
function getToday() {
    return new Date();
}
function getDate(date) {
    return date.getDate();
}
function getDayNumber(date) {
    return date.getDay();
}
function getMonth(date) {
    return date.getMonth();
}
function getYear(date) {
    return date.getFullYear();
}
function getDaysInMonth(date) {
    return getMonthEnd(date).getDate();
}
function getMonthEnd(date) {
    return createDate(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 999);
}
function differenceInDays(dateStart, dateEnd) {
    return Math.floor((dateEnd.getTime() - dateStart.getTime()) / MS_IN_DAY);
}
function differenceInHours(dateStart, dateEnd) {
    return Math.floor((dateEnd.getTime() - dateStart.getTime()) / MS_IN_HOUR);
}
function isSameDate(date1, date2) {
    date1.setHours(0, 0, 0, 0);
    date2.setHours(0, 0, 0, 0);
    return date1.getTime() === date2.getTime();
}
function getFirstDayOfWeek(year, month, mondayFirst) {
    const firstDayIndex = mondayFirst ? 1 : 0;
    const sundayIndex = firstDayIndex > 0 ? 7 - firstDayIndex : 0;
    const date = new Date(year, month);
    const index = getDayNumber(date) + sundayIndex;
    const newIndex = index >= 7 ? index - 7 : index;
    return newIndex;
}
function addMonths(date, months) {
    const month = createDate(date.getFullYear(), date.getMonth() + months, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
    const dayOfPreviousMonth = getDate(date);
    const dayOfNewMonth = getDate(month);
    // Solution for edge cases, like moving from a month with a greater number
    // of days than the destination month. For example, when we move from 31 Mar 2020 to
    // February, createDate(2020, 2, 31) will return 2 Mar 2020, not the desired 29 Feb 2020.
    // We need to use setDate(0) to move back to the last day of the previous month (29 Feb 2020)
    if (dayOfPreviousMonth !== dayOfNewMonth) {
        month.setDate(0);
    }
    return month;
}
function addDays(date, days) {
    return createDate(date.getFullYear(), date.getMonth(), date.getDate() + days, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
}
function addHours(date, hours) {
    const currentHour = date.getHours();
    return new Date(date.setHours(currentHour + hours));
}
function addMinutes(date, minutes) {
    const currentMinutes = date.getMinutes();
    return new Date(date.setMinutes(currentMinutes + minutes));
}
function startOfDay(date) {
    return new Date(date.setHours(0, 0, 0, 0));
}
function endOfDay(date) {
    return new Date(date.setHours(23, 59, 59, 999));
}
function createDate(year, month, day, hours, minutes, seconds, milliseconds) {
    const result = new Date(year, month, day, hours, minutes, seconds, milliseconds);
    // In js native date years from 0 to 99 are treated as abbreviation
    // for dates like 19xx
    if (year >= 0 && year < 100) {
        result.setFullYear(result.getFullYear() - 1900);
    }
    return result;
}
function format(dateToFormat) {
    let month = getMonth(new Date(dateToFormat)) + 1;
    let day = getDate(new Date(dateToFormat));
    let hours = new Date(dateToFormat).getHours();
    let minutes = new Date(dateToFormat).getMinutes();
    if (month < 10) {
        month = '0' + month;
    }
    if (day < 10) {
        day = '0' + day;
    }
    if (minutes < 10) {
        minutes = '0' + minutes;
    }
    if (hours < 10) {
        hours = '0' + hours;
    }
    let time = `${hours}:${minutes}`;
    const year = getYear(new Date(dateToFormat));
    const date = `${day}/${month}/${year}`;
    const shouldReturnTime = time !== '00:00' && time !== '23:59';
    const string = shouldReturnTime ? `${date} ${time}` : `${date}`;
    return { day, month, year, time, string, date };
}
function convertDateTo24h(dateTime) {
    let [date, time, modifier] = dateTime.split(' ');
    time = convertTimeTo24h(`${time} ${modifier}`);
    return `${date} ${time}`;
}
function convertDateTo12h(dateTime) {
    let [date, time] = dateTime.split(' ');
    if (time) {
        time = convertTimeTo12h(time);
    }
    return time ? `${date} ${time}` : `${date}`;
}
function convertTimeTo24h(timeToFormat) {
    let [time, modifier] = timeToFormat.split(' ');
    let [hours, minutes] = time.split(':');
    if (hours === '12') {
        hours = '00';
    }
    if (modifier === 'PM') {
        hours = `${parseInt(hours, 10) + 12}`;
    }
    return `${hours}:${minutes}`;
}
function convertTimeTo12h(timeToFormat) {
    let hours;
    let minutes;
    let modifier = 'AM';
    [hours, minutes] = timeToFormat.split(':');
    if (hours === '00') {
        hours = 12;
    }
    else if (hours > 12) {
        hours -= 12;
        hours = hours < 10 ? '0' + hours : hours;
        modifier = 'PM';
    }
    else if (hours === 12) {
        modifier = 'PM';
    }
    return `${hours}:${minutes} ${modifier}`;
}
function getEvents(events, startDate, endDate, hourEvent = false) {
    if (!events) {
        return;
    }
    let filteredEvents = filterEvents(events, startDate, endDate).sort((a, b) => {
        const aStartDate = a.startDate;
        const bStartDate = b.startDate;
        return aStartDate.getTime() - bStartDate.getTime();
    });
    let result = mapEvents(filteredEvents, startDate, endDate);
    if (hourEvent) {
        return result.filter((event) => !event.allDay && !event.longEvent);
    }
    return result;
}
function filterEvents(events, startDate, endDate) {
    return events.filter((event) => {
        if (event.startDate >= startDate && event.endDate <= endDate) {
            return true;
        }
        if (event.endDate >= startDate && event.endDate <= endDate) {
            return true;
        }
        if (event.startDate <= startDate && event.endDate >= endDate) {
            return true;
        }
        if (event.startDate >= startDate && event.startDate <= endDate) {
            return true;
        }
        return false;
    });
}
function mapEvents(events, startDate, endDate) {
    let order = 1;
    events.forEach((event) => {
        const eventStart = event.startDate >= startDate;
        if (eventStart) {
            event.order = order;
            order += 1;
        }
        else {
            order = event.order + 1;
        }
    });
    return events.map((event) => {
        const startData = format(event.startDate);
        const endData = format(event.endDate);
        const eventStartDate = event.startDate;
        const eventEndDate = event.endDate;
        const eventDuration = differenceInDays(eventStartDate, eventEndDate);
        return {
            ...event,
            startData: startData,
            endData: endData,
            eventStart: eventStartDate >= startDate,
            eventEnd: event.endDate <= endDate,
            oneDay: startData.date == endData.date &&
                eventEndDate.getTime() - eventStartDate.getTime() < MS_IN_DAY,
            allDay: eventEndDate.getTime() - eventStartDate.getTime() - eventDuration * MS_IN_DAY ==
                MS_IN_DAY - 1,
            longEvent: eventEndDate.getTime() - eventStartDate.getTime() >= MS_IN_DAY,
        };
    });
}
function generateEvent(selectionStartDate, selectionEndDate) {
    let startDate = selectionStartDate;
    let endDate = selectionStartDate;
    if (selectionEndDate) {
        startDate = selectionStartDate < selectionEndDate ? selectionStartDate : selectionEndDate;
        endDate = selectionStartDate > selectionEndDate ? selectionStartDate : selectionEndDate;
    }
    const eventDuration = differenceInDays(startDate, endDate);
    const isAllDayEvent = endDate.getTime() - startDate.getTime() - eventDuration * MS_IN_DAY === 0;
    if (isAllDayEvent) {
        startDate = startOfDay(startDate);
        endDate = endOfDay(endDate);
    }
    const newEvent = {
        id: generateUid(),
        summary: '',
        startDate,
        endDate,
        startData: format(startDate),
        endData: format(endDate),
        description: '',
        allDay: isAllDayEvent,
        color: {
            background: 'primary',
        },
    };
    return newEvent;
}
function generateUid() {
    const uid = Math.random().toString(36).substr(2, 9);
    return `mdb-calendar-event-${uid}`;
}

class MdbCalendarEventModalComponent {
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.description = '';
        this.editable = true;
        this.color = 'primary';
        this.twelveHours = false;
    }
    ngOnInit() {
        const startData = this.event.startData;
        const endData = this.event.endData;
        let startTime = startData.time;
        let endTime = endData.time;
        if (this.twelveHours) {
            startTime = convertTimeTo12h(startTime);
            endTime = convertTimeTo12h(endTime);
        }
        this.eventForm = new FormGroup({
            summary: new FormControl({ value: this.event.summary, disabled: !this.editable }, { validators: Validators.required, updateOn: 'submit' }),
            description: new FormControl({ value: this.event.description, disabled: !this.editable }),
            allDay: new FormControl({ value: this.event.allDay, disabled: !this.editable }),
            startDate: new FormControl({
                value: new Date(`${startData.year}/${startData.month}/${startData.day}`),
                disabled: !this.editable,
            }, { validators: Validators.required, updateOn: 'submit' }),
            endDate: new FormControl({
                value: new Date(`${endData.year}/${endData.month}/${endData.day}`),
                disabled: !this.editable,
            }, { validators: Validators.required, updateOn: 'submit' }),
            startTime: new FormControl({ value: startTime, disabled: !this.editable }),
            endTime: new FormControl({ value: endTime, disabled: !this.editable }),
            color: new FormControl({ value: this.event.color.background, disabled: !this.editable }),
        });
    }
    onRemoveClick() {
        this.modalRef.close('remove');
    }
    onSubmit() {
        this.eventForm.markAllAsTouched();
        if (this.mode === 'add' && this.eventForm.status === 'VALID') {
            this.modalRef.close(this.parseEventData());
        }
        else if (this.eventForm.status === 'VALID') {
            this.modalRef.close(this.parseEventData());
        }
    }
    parseEventData() {
        const newEvent = this.eventForm.value;
        const summary = newEvent.summary;
        const description = newEvent.description;
        const allDay = newEvent.allDay;
        const startDate = newEvent.startDate;
        const endDate = newEvent.endDate;
        const startTime = newEvent.startTime;
        const endTime = newEvent.endTime;
        const eventColor = newEvent.color;
        let startDateTime = `${getYear(startDate)}/${getMonth(startDate) + 1}/${getDate(startDate)} ${startTime}`;
        let endDateTime = `${getYear(endDate)}/${getMonth(endDate) + 1}/${getDate(endDate)} ${endTime}`;
        const event = generateEvent(new Date(startDateTime), new Date(endDateTime));
        return {
            ...event,
            summary,
            description,
            allDay,
            color: {
                background: eventColor,
            },
        };
    }
}
MdbCalendarEventModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarEventModalComponent, deps: [{ token: i1.MdbModalRef }], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarEventModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarEventModalComponent, selector: "mdb-calendar-event-modal", ngImport: i0, template: "<form [formGroup]=\"eventForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"modal-header\">\n    <h5 class=\"modal-title\" id=\"{{event.id}}-modal\">{{ mode === 'edit' ? options.editEventModalCaption : options.addEventModalCaption }}</h5>\n    <button\n      type=\"button\"\n      class=\"btn-close\"\n      aria-label=\"Close\"\n      (click)=\"modalRef.close()\"\n    ></button>\n  </div>\n  <div class=\"modal-body\">\n    <mdb-form-control class=\"my-3\">\n      <input \n        mdbInput\n        mdbValidate\n        validateSuccess=\"false\"\n        required\n        type=\"text\"\n        id=\"eventModalSummary\"\n        formControlName=\"summary\"\n        class=\"form-control\"\n      />\n      <label mdbLabel class=\"form-label\" for=\"eventModalSummary\">{{ options.summaryCaption }}</label>\n    </mdb-form-control>\n    <mdb-form-control  class=\"my-3\">\n      <textarea mdbInput class=\"form-control\" id=\"eventModalDescription\" rows=\"2\" formControlName=\"description\"></textarea>\n      <label mdbLabel class=\"form-label\" for=\"eventModalDescription\">{{ options.descriptionCaption }}</label>\n    </mdb-form-control>\n    <div class=\"form-check mx-2\">\n      <input\n        mdbCheckbox\n        class=\"form-check-input\"\n        type=\"checkbox\"\n        value=\"\"\n        id=\"eventModalAllDayCheckbox\"\n        formControlName=\"allDay\"\n      />\n      <label class=\"form-check-label\" for=\"eventModalAllDayCheckbox\">\n        {{ options.allDayCaption }}\n      </label>\n    </div>\n    <div class=\"row my-3\">\n      <div [ngClass]=\"eventForm.value.allDay ? 'col-12' : 'col-6'\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            mdbValidate\n            validateSuccess=\"false\"\n            required\n            formControlName=\"startDate\"\n            [mdbDatepicker]=\"datepickerStartDate\"\n            type=\"text\"\n            class=\"form-control\"\n            id=\"eventModalStartDate\"\n          />\n          <label mdbLabel for=\"eventModalStartDate\" class=\"form-label\">{{ options.startCaption }}</label>\n          <mdb-datepicker-toggle [mdbDatepicker]=\"datepickerStartDate\"></mdb-datepicker-toggle>\n          <mdb-datepicker #datepickerStartDate></mdb-datepicker>\n        </mdb-form-control>\n      </div>\n      <div *ngIf=\"!eventForm.value.allDay\" class=\"col-6\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            formControlName=\"startTime\"\n            type=\"text\"\n            id=\"eventModalStartTime\"\n            class=\"form-control\"\n            [mdbTimepicker]=\"timepickerStartTime\"\n            required\n          />\n          <label mdbLabel class=\"form-label\" for=\"eventModalStartTime\">{{ options.startCaption }}</label>\n          <mdb-timepicker-toggle [mdbTimepickerToggle]=\"timepickerStartTime\"></mdb-timepicker-toggle>\n          <mdb-timepicker #timepickerStartTime [format24]=\"!twelveHours\"></mdb-timepicker>\n        </mdb-form-control>\n      </div>\n    </div>\n    <div class=\"row my-3\">\n      <div [ngClass]=\"eventForm.value.allDay ? 'col-12' : 'col-6'\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            mdbValidate\n            validateSuccess=\"false\"\n            required\n            [mdbDatepicker]=\"datepickerEndDate\"\n            type=\"text\"\n            class=\"form-control\"\n            id=\"eventModalEndDate\"\n            formControlName=\"endDate\"\n          />\n          <label mdbLabel for=\"eventModalEndDate\" class=\"form-label\">{{ options.endCaption }}</label>\n          <mdb-datepicker-toggle [mdbDatepicker]=\"datepickerEndDate\"></mdb-datepicker-toggle>\n          <mdb-datepicker #datepickerEndDate></mdb-datepicker>\n        </mdb-form-control>\n      </div>\n      <div *ngIf=\"!eventForm.value.allDay\" class=\"col-6\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            formControlName=\"endTime\"\n            type=\"text\"\n            id=\"eventModalEndTime\"\n            class=\"form-control\"\n            [mdbTimepicker]=\"timepickerEndTime\"\n            required\n          />\n          <label mdbLabel class=\"form-label\" for=\"eventModalEndTime\">{{ options.endCaption }}</label>\n          <mdb-timepicker-toggle [mdbTimepickerToggle]=\"timepickerEndTime\"></mdb-timepicker-toggle>\n          <mdb-timepicker #timepickerEndTime [format24]=\"!twelveHours\"></mdb-timepicker>\n        </mdb-form-control>\n      </div>\n    </div>\n    <div class=\"text-center mt-3\">\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundPrimary\"\n          [checked]=\"true\"\n          value=\"primary\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundPrimary\">\n          <i class=\"fas fa-circle text-primary\"></i>\n        </label>\n      </div>\n      \n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundSecondary\"\n          value=\"secondary\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundSecondary\">\n          <i class=\"fas fa-circle text-secondary\"></i>\n        </label>\n      </div>\n      \n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundSuccess\"\n          value=\"success\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundSuccess\">\n          <i class=\"fas fa-circle text-success\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundDanger\"\n          value=\"danger\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundDanger\">\n          <i class=\"fas fa-circle text-danger\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundWarning\"\n          value=\"warning\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundWarning\">\n          <i class=\"fas fa-circle text-warning\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundInfo\"\n          value=\"info\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundInfo\">\n          <i class=\"fas fa-circle text-info\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundDark\"\n          value=\"dark\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundDark\">\n          <i class=\"fas fa-circle text-dark\"></i>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <ng-container *ngIf=\"mode !== 'edit'\">\n      <button type=\"button\" class=\"btn btn-danger\" (click)=\"modalRef.close()\">\n        {{ options.closeCaption }}\n      </button>\n      <button type=\"submit\" class=\"btn btn-primary\" >{{ options.addCaption }}</button>\n    </ng-container>\n    <ng-container *ngIf=\"mode === 'edit'\">\n      <button type=\"button\" class=\"btn btn-danger\" (click)=\"onRemoveClick()\">\n        {{ options.deleteCaption }}\n      </button>\n      <button type=\"submit\" class=\"btn btn-primary\">{{ options.editCaption }}</button>\n    </ng-container>\n  </div>\n</form>\n", components: [{ type: i2.MdbFormControlComponent, selector: "mdb-form-control" }, { type: i3.MdbDatepickerToggleComponent, selector: "mdb-datepicker-toggle", inputs: ["disabled", "icon", "mdbDatepicker"] }, { type: i3.MdbDatepickerComponent, selector: "mdb-datepicker", inputs: ["disabled", "inline", "format", "filter", "openOnInputClick", "options", "startDate", "startDay", "startView", "minDate", "maxDate"], outputs: ["dateChanged", "viewChanged", "clearButtonClicked", "cancelButtonClicked", "confirmButtonClicked", "opened", "closed"], exportAs: ["mdbDatepicker"] }, { type: i4.MdbTimepickerToggleComponent, selector: "mdb-timepicker-toggle", inputs: ["mdbTimepickerToggle", "icon", "disabled"] }, { type: i4.MdbTimepickerComponent, selector: "mdb-timepicker", inputs: ["autoClose", "format12", "appendValidationInfo", "bodyID", "closeModalOnMinutesClick", "disabled", "footerID", "format24", "headID", "increment", "inline", "maxTime", "minTime", "modalID", "overflowHidden", "pickerID", "switchHoursToMinutesOnClick", "options"], outputs: ["timeChange", "closed", "opened"], exportAs: ["mdbTimePicker"] }], directives: [{ type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.MdbInputDirective, selector: "[mdbInput]", inputs: ["disabled", "readonly", "value"], exportAs: ["mdbInput"] }, { type: i6.MdbValidateDirective, selector: "[mdbValidate]", inputs: ["mdbValidate", "validate", "validateSuccess", "validateError"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.MdbLabelDirective, selector: "[mdbLabel]", exportAs: ["mdbLabel"] }, { type: i5.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.MdbDatepickerInputDirective, selector: "input[mdbDatepicker]", inputs: ["disabled", "mdbDatepicker"], exportAs: ["mdbDatepickerInput"] }, { type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.MdbTimepickerDirective, selector: "[mdbTimepicker]", inputs: ["mdbTimepicker", "value"] }, { type: i5.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarEventModalComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-calendar-event-modal', template: "<form [formGroup]=\"eventForm\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"modal-header\">\n    <h5 class=\"modal-title\" id=\"{{event.id}}-modal\">{{ mode === 'edit' ? options.editEventModalCaption : options.addEventModalCaption }}</h5>\n    <button\n      type=\"button\"\n      class=\"btn-close\"\n      aria-label=\"Close\"\n      (click)=\"modalRef.close()\"\n    ></button>\n  </div>\n  <div class=\"modal-body\">\n    <mdb-form-control class=\"my-3\">\n      <input \n        mdbInput\n        mdbValidate\n        validateSuccess=\"false\"\n        required\n        type=\"text\"\n        id=\"eventModalSummary\"\n        formControlName=\"summary\"\n        class=\"form-control\"\n      />\n      <label mdbLabel class=\"form-label\" for=\"eventModalSummary\">{{ options.summaryCaption }}</label>\n    </mdb-form-control>\n    <mdb-form-control  class=\"my-3\">\n      <textarea mdbInput class=\"form-control\" id=\"eventModalDescription\" rows=\"2\" formControlName=\"description\"></textarea>\n      <label mdbLabel class=\"form-label\" for=\"eventModalDescription\">{{ options.descriptionCaption }}</label>\n    </mdb-form-control>\n    <div class=\"form-check mx-2\">\n      <input\n        mdbCheckbox\n        class=\"form-check-input\"\n        type=\"checkbox\"\n        value=\"\"\n        id=\"eventModalAllDayCheckbox\"\n        formControlName=\"allDay\"\n      />\n      <label class=\"form-check-label\" for=\"eventModalAllDayCheckbox\">\n        {{ options.allDayCaption }}\n      </label>\n    </div>\n    <div class=\"row my-3\">\n      <div [ngClass]=\"eventForm.value.allDay ? 'col-12' : 'col-6'\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            mdbValidate\n            validateSuccess=\"false\"\n            required\n            formControlName=\"startDate\"\n            [mdbDatepicker]=\"datepickerStartDate\"\n            type=\"text\"\n            class=\"form-control\"\n            id=\"eventModalStartDate\"\n          />\n          <label mdbLabel for=\"eventModalStartDate\" class=\"form-label\">{{ options.startCaption }}</label>\n          <mdb-datepicker-toggle [mdbDatepicker]=\"datepickerStartDate\"></mdb-datepicker-toggle>\n          <mdb-datepicker #datepickerStartDate></mdb-datepicker>\n        </mdb-form-control>\n      </div>\n      <div *ngIf=\"!eventForm.value.allDay\" class=\"col-6\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            formControlName=\"startTime\"\n            type=\"text\"\n            id=\"eventModalStartTime\"\n            class=\"form-control\"\n            [mdbTimepicker]=\"timepickerStartTime\"\n            required\n          />\n          <label mdbLabel class=\"form-label\" for=\"eventModalStartTime\">{{ options.startCaption }}</label>\n          <mdb-timepicker-toggle [mdbTimepickerToggle]=\"timepickerStartTime\"></mdb-timepicker-toggle>\n          <mdb-timepicker #timepickerStartTime [format24]=\"!twelveHours\"></mdb-timepicker>\n        </mdb-form-control>\n      </div>\n    </div>\n    <div class=\"row my-3\">\n      <div [ngClass]=\"eventForm.value.allDay ? 'col-12' : 'col-6'\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            mdbValidate\n            validateSuccess=\"false\"\n            required\n            [mdbDatepicker]=\"datepickerEndDate\"\n            type=\"text\"\n            class=\"form-control\"\n            id=\"eventModalEndDate\"\n            formControlName=\"endDate\"\n          />\n          <label mdbLabel for=\"eventModalEndDate\" class=\"form-label\">{{ options.endCaption }}</label>\n          <mdb-datepicker-toggle [mdbDatepicker]=\"datepickerEndDate\"></mdb-datepicker-toggle>\n          <mdb-datepicker #datepickerEndDate></mdb-datepicker>\n        </mdb-form-control>\n      </div>\n      <div *ngIf=\"!eventForm.value.allDay\" class=\"col-6\">\n        <mdb-form-control>\n          <input\n            mdbInput\n            formControlName=\"endTime\"\n            type=\"text\"\n            id=\"eventModalEndTime\"\n            class=\"form-control\"\n            [mdbTimepicker]=\"timepickerEndTime\"\n            required\n          />\n          <label mdbLabel class=\"form-label\" for=\"eventModalEndTime\">{{ options.endCaption }}</label>\n          <mdb-timepicker-toggle [mdbTimepickerToggle]=\"timepickerEndTime\"></mdb-timepicker-toggle>\n          <mdb-timepicker #timepickerEndTime [format24]=\"!twelveHours\"></mdb-timepicker>\n        </mdb-form-control>\n      </div>\n    </div>\n    <div class=\"text-center mt-3\">\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundPrimary\"\n          [checked]=\"true\"\n          value=\"primary\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundPrimary\">\n          <i class=\"fas fa-circle text-primary\"></i>\n        </label>\n      </div>\n      \n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundSecondary\"\n          value=\"secondary\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundSecondary\">\n          <i class=\"fas fa-circle text-secondary\"></i>\n        </label>\n      </div>\n      \n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundSuccess\"\n          value=\"success\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundSuccess\">\n          <i class=\"fas fa-circle text-success\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundDanger\"\n          value=\"danger\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundDanger\">\n          <i class=\"fas fa-circle text-danger\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundWarning\"\n          value=\"warning\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundWarning\">\n          <i class=\"fas fa-circle text-warning\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundInfo\"\n          value=\"info\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundInfo\">\n          <i class=\"fas fa-circle text-info\"></i>\n        </label>\n      </div>\n\n      <div class=\"form-check form-check-inline\">\n        <input\n          mdbRadio\n          class=\"form-check-input\"\n          type=\"radio\"\n          id=\"eventModalRadioBackgroundDark\"\n          value=\"dark\"\n          formControlName=\"color\"\n        />\n        <label class=\"form-check-label\" for=\"eventModalRadioBackgroundDark\">\n          <i class=\"fas fa-circle text-dark\"></i>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <ng-container *ngIf=\"mode !== 'edit'\">\n      <button type=\"button\" class=\"btn btn-danger\" (click)=\"modalRef.close()\">\n        {{ options.closeCaption }}\n      </button>\n      <button type=\"submit\" class=\"btn btn-primary\" >{{ options.addCaption }}</button>\n    </ng-container>\n    <ng-container *ngIf=\"mode === 'edit'\">\n      <button type=\"button\" class=\"btn btn-danger\" (click)=\"onRemoveClick()\">\n        {{ options.deleteCaption }}\n      </button>\n      <button type=\"submit\" class=\"btn btn-primary\">{{ options.editCaption }}</button>\n    </ng-container>\n  </div>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MdbModalRef }]; } });

class MdbCalendarToolsComponent {
    constructor() {
        this.viewChange = new EventEmitter();
        this.previousBtnClick = new EventEmitter();
        this.nextBtnClick = new EventEmitter();
        this.todayBtnClick = new EventEmitter();
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(date) {
        this._activeDate = date;
        this.setPeriod();
    }
    get activeView() {
        return this._activeView;
    }
    set activeView(view) {
        this._activeView = view;
        this.setPeriod();
    }
    setPeriod() {
        switch (this.activeView) {
            case 'month':
                this.period = `${this.options.months[this.activeDate.getMonth()]} ${this.activeDate.getFullYear()}`;
                break;
            default:
                const sundayIndex = this.mondayFirst ? 1 : 0;
                const firstDay = addDays(this.activeDate, -getDayNumber(this.activeDate) + sundayIndex);
                const lastDay = addDays(firstDay, 6);
                const periodStart = `${this.options.monthsShort[getMonth(firstDay)]} ${getDate(firstDay)}`;
                const periodEnd = `${this.options.monthsShort[getMonth(lastDay)]} ${getDate(lastDay)}, ${getYear(lastDay)}`;
                this.period = `${periodStart} - ${periodEnd}`;
                break;
        }
    }
    toggleView(view) {
        this.viewChange.emit(view);
    }
    handlePreviousBtnClick() {
        this.previousBtnClick.emit();
    }
    handleNextBtnClick() {
        this.nextBtnClick.emit();
    }
    handleTodayBtnClick() {
        this.todayBtnClick.emit();
    }
}
MdbCalendarToolsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarToolsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarToolsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarToolsComponent, selector: "mdb-tools-calendar", inputs: { options: "options", activeDate: "activeDate", mondayFirst: "mondayFirst", activeView: "activeView" }, outputs: { viewChange: "viewChange", previousBtnClick: "previousBtnClick", nextBtnClick: "nextBtnClick", todayBtnClick: "todayBtnClick" }, ngImport: i0, template: "<div class=\"calendar-tools\">\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"handlePreviousBtnClick()\">\n      <i class=\"fas fa-chevron-left\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleNextBtnClick()\">\n      <i class=\"fas fa-chevron-right\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleTodayBtnClick()\">{{ options.todayCaption }}</button>\n  </div>\n  <span class=\"calendar-heading\">{{ period }}</span>\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('month')\">{{ options.monthCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('week')\">{{ options.weekCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('list')\">{{ options.listCaption }}</button>\n  </div>\n</div>" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarToolsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-tools-calendar', styles: [], template: "<div class=\"calendar-tools\">\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"handlePreviousBtnClick()\">\n      <i class=\"fas fa-chevron-left\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleNextBtnClick()\">\n      <i class=\"fas fa-chevron-right\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleTodayBtnClick()\">{{ options.todayCaption }}</button>\n  </div>\n  <span class=\"calendar-heading\">{{ period }}</span>\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('month')\">{{ options.monthCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('week')\">{{ options.weekCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('list')\">{{ options.listCaption }}</button>\n  </div>\n</div>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], mondayFirst: [{
                type: Input
            }], activeView: [{
                type: Input
            }], viewChange: [{
                type: Output
            }], previousBtnClick: [{
                type: Output
            }], nextBtnClick: [{
                type: Output
            }], todayBtnClick: [{
                type: Output
            }] } });

class MdbCalendarMonthViewComponent {
    constructor(_renderer) {
        this._renderer = _renderer;
        this.dayClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.eventDragged = new EventEmitter();
        this.dates = [];
        this.isDragging = false;
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(date) {
        this._activeDate = date;
        this.dates = this._generateDayView();
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.dates = this._generateDayView();
    }
    ngOnInit() {
        this.weekdays = this._getWeekdays();
        this.dates = this._generateDayView();
    }
    ngAfterViewInit() {
        this.daysEl = this.days.toArray().map((el) => el.nativeElement);
    }
    onEventClick(event) {
        if (this.readonly) {
            return;
        }
        this.eventClicked.emit(event);
    }
    onDayClick(day) {
        if (this.readonly) {
            return;
        }
        const newCalendarEvent = generateEvent(day.date);
        this.dayClicked.emit(newCalendarEvent);
    }
    onMouseDown(event, day) {
        if (this.readonly) {
            return;
        }
        this.isDragging = true;
        this.dragStart = this.daysEl.indexOf(event.target);
        this.selectionStartDay = day.date;
    }
    onMouseUp(event, day) {
        if (this.readonly) {
            return;
        }
        this.isDragging = false;
        this.dragEnd = this.daysEl.indexOf(event.target);
        if (this.dragEnd !== 0) {
            this.selectRange();
        }
        this.clearSelection();
        this.selectionEndDay = day.date;
        if (this.selectionStartDay === this.selectionEndDay) {
            return;
        }
        const newCalendarEvent = generateEvent(this.selectionStartDay, this.selectionEndDay);
        this.dayClicked.emit(newCalendarEvent);
    }
    onMouseMove(event) {
        if (this.readonly) {
            return;
        }
        event.preventDefault();
        if (this.isDragging) {
            this.dragEnd = this.daysEl.indexOf(event.target);
            this.selectRange();
        }
    }
    onEventDragStart(calendarEvent) {
        this.draggedEventId = calendarEvent.id;
        this.clearSelection();
    }
    onEventDragEnd(calendarEvent) {
        this.draggedEventId = '';
        this.hoveredEventId = '';
        const daysDifference = differenceInDays(calendarEvent.startDate, this.dragTargetDay.date);
        const newStartDate = addDays(calendarEvent.startDate, daysDifference);
        const newEndDate = addDays(calendarEvent.endDate, daysDifference);
        const newEvent = {
            ...calendarEvent,
            startDate: newStartDate,
            endDate: newEndDate,
            order: '',
        };
        this.eventDragged.emit(newEvent);
    }
    onDragEnter(event, day) {
        this._renderer.addClass(event.target, 'dragenter');
        this.dragTargetDay = day;
    }
    onDragLeave(event) {
        this._renderer.removeClass(event.target, 'dragenter');
    }
    onDragOver(event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        return false;
    }
    onMouseEnter(event) {
        this.hoveredEventId = event.id;
    }
    onMouseLeave() {
        this.hoveredEventId = '';
    }
    selectRange() {
        this.clearSelection();
        if (this.dragEnd + 1 < this.dragStart) {
            this.daysEl
                .slice(this.dragEnd, this.dragStart + 1)
                .forEach((cell) => this._renderer.setStyle(cell, 'background-color', '#fafafa'));
        }
        else {
            this.daysEl
                .slice(this.dragStart, this.dragEnd + 1)
                .forEach((cell) => this._renderer.setStyle(cell, 'background-color', '#fafafa'));
        }
    }
    clearSelection() {
        this.daysEl.forEach((cell) => this._renderer.removeStyle(cell, 'background-color'));
    }
    convertDateTo12hFormat(date) {
        return convertDateTo12h(date);
    }
    _generateDayView() {
        const dates = [];
        const month = getMonth(this.activeDate);
        const previousMonth = getMonth(addMonths(this.activeDate, -1));
        const nextMonth = getMonth(addMonths(this.activeDate, 1));
        const year = getYear(this.activeDate);
        const firstDay = getFirstDayOfWeek(year, month, this.mondayFirst);
        const daysInMonth = getDaysInMonth(this.activeDate);
        const daysInPreviousMonth = getDaysInMonth(addMonths(this.activeDate, -1));
        const daysInWeek = 7;
        let dayNumber = 1;
        let isCurrentMonth = false;
        for (let i = 1; i < daysInWeek; i++) {
            const week = [];
            if (i === 1) {
                // First week
                const previousMonthDay = daysInPreviousMonth - firstDay + 1;
                // Previous month
                for (let j = previousMonthDay; j <= daysInPreviousMonth; j++) {
                    const date = createDate(year, previousMonth, j, 0, 0, 0, 0);
                    week.push({
                        date,
                        currentMonth: isCurrentMonth,
                        isToday: isSameDate(date, getToday()),
                        dayNumber: getDate(date),
                        event: getEvents(this.events, startOfDay(date), endOfDay(date), false),
                    });
                }
                isCurrentMonth = true;
                // Current month
                const daysLeft = daysInWeek - week.length;
                for (let j = 0; j < daysLeft; j++) {
                    const date = createDate(year, month, dayNumber, 0, 0, 0, 0);
                    week.push({
                        date,
                        currentMonth: isCurrentMonth,
                        isToday: isSameDate(date, getToday()),
                        dayNumber: getDate(date),
                        event: getEvents(this.events, startOfDay(date), endOfDay(date), false),
                    });
                    dayNumber++;
                }
            }
            else {
                // Rest of the weeks
                for (let j = 1; j < 8; j++) {
                    if (dayNumber > daysInMonth) {
                        // Next month
                        dayNumber = 1;
                        isCurrentMonth = false;
                    }
                    const date = createDate(year, isCurrentMonth ? month : nextMonth, dayNumber, 0, 0, 0, 0);
                    week.push({
                        date,
                        currentMonth: isCurrentMonth,
                        isToday: isSameDate(date, getToday()),
                        dayNumber: getDate(date),
                        event: getEvents(this.events, startOfDay(date), endOfDay(date), false),
                    });
                    dayNumber++;
                }
            }
            dates.push(week);
        }
        return dates;
    }
    _getWeekdays() {
        const startDay = this.mondayFirst ? 1 : 0;
        const weekdays = this.options.weekdays;
        const sortedWeekdays = weekdays.slice(startDay).concat(weekdays.slice(0, startDay));
        return startDay !== 0 ? sortedWeekdays : weekdays;
    }
}
MdbCalendarMonthViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarMonthViewComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarMonthViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarMonthViewComponent, selector: "mdb-month-view-calendar", inputs: { readonly: "readonly", options: "options", mondayFirst: "mondayFirst", twelveHours: "twelveHours", activeDate: "activeDate", events: "events" }, outputs: { dayClicked: "dayClicked", eventClicked: "eventClicked", eventDragged: "eventDragged" }, viewQueries: [{ propertyName: "days", predicate: ["dayEl"], descendants: true }], ngImport: i0, template: "<table class=\"month\">\n  <thead>\n    <tr>\n      <th *ngFor=\"let weekDay of weekdays\">\n        {{ weekDay }}\n      </th>\n    </tr>\n  </thead>\n  <tbody cdkDropList>\n    <tr *ngFor=\"let date of dates\">\n      <td\n        #dayEl\n        *ngFor=\"let day of date; let dayIndex = index\"\n        [ngClass]=\"{'disabled': !day.currentMonth, 'today': day.isToday}\"\n        (click)=\"onDayClick(day)\"\n        (mousedown)=\"onMouseDown($event, day)\"\n        (mouseup)=\"onMouseUp($event, day)\" \n        (mouseenter)=\"onMouseMove($event)\"\n        (dragenter)=\"onDragEnter($event, day)\"\n        (dragover)=\"onDragOver($event)\"\n        (dragleave)=\"onDragLeave($event)\"\n      >\n        <div class=\"day-field\">{{ day.dayNumber }}</div>\n        <div class=\"events-wrapper\">\n          <ng-container *ngFor=\"let event of day.event; let i = index\">\n            <ng-container *ngIf=\"event.order > i + 1 && i === 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1); let index = index\"\n                [ngStyle]=\"{ order: index + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"event.order > i + 1 && i !== 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1 - day.event[i -1].order); let index = index\"\n                [ngStyle]=\"{ order: event.order - day.event[i - 1].order + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <div \n              draggable=\"true\"\n              *ngIf=\"event.allDay || event.longEvent\" \n              class=\"event bg-{{event.color.background}}\"\n              [ngClass]=\"{'event-long': !event.eventStart, 'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ color: event.color.foreground, order: event.order }\"\n              id=\"{{i === 0 ? event.id : ''}}\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                  - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\n              \"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >\n              {{ event.eventStart || dayIndex === 0 ? event.summary : '&nbsp;' }}\n            </div>\n            <div \n              draggable=\"true\"\n              *ngIf=\"!event.allDay && !event.longEvent\"  \n              class=\"event event-short text-{{event.color.background}}\"\n              [ngClass]=\"{'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ order: event.order }\"\n              id=\"{{i === 0 ? event.id : ''}}\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                   - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\n              \"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >\n              <i class=\"fas fa-circle pe-1 event-circle\"></i>\n              {{ event.summary }}\n            </div>\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>", directives: [{ type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2$1.MdbTooltipDirective, selector: "[mdbTooltip]", inputs: ["mdbTooltip", "tooltipDisabled", "placement", "html", "animation", "trigger", "delayShow", "delayHide", "offset"], outputs: ["tooltipShow", "tooltipShown", "tooltipHide", "tooltipHidden"], exportAs: ["mdbTooltip"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarMonthViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-month-view-calendar', styles: [], template: "<table class=\"month\">\n  <thead>\n    <tr>\n      <th *ngFor=\"let weekDay of weekdays\">\n        {{ weekDay }}\n      </th>\n    </tr>\n  </thead>\n  <tbody cdkDropList>\n    <tr *ngFor=\"let date of dates\">\n      <td\n        #dayEl\n        *ngFor=\"let day of date; let dayIndex = index\"\n        [ngClass]=\"{'disabled': !day.currentMonth, 'today': day.isToday}\"\n        (click)=\"onDayClick(day)\"\n        (mousedown)=\"onMouseDown($event, day)\"\n        (mouseup)=\"onMouseUp($event, day)\" \n        (mouseenter)=\"onMouseMove($event)\"\n        (dragenter)=\"onDragEnter($event, day)\"\n        (dragover)=\"onDragOver($event)\"\n        (dragleave)=\"onDragLeave($event)\"\n      >\n        <div class=\"day-field\">{{ day.dayNumber }}</div>\n        <div class=\"events-wrapper\">\n          <ng-container *ngFor=\"let event of day.event; let i = index\">\n            <ng-container *ngIf=\"event.order > i + 1 && i === 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1); let index = index\"\n                [ngStyle]=\"{ order: index + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"event.order > i + 1 && i !== 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1 - day.event[i -1].order); let index = index\"\n                [ngStyle]=\"{ order: event.order - day.event[i - 1].order + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <div \n              draggable=\"true\"\n              *ngIf=\"event.allDay || event.longEvent\" \n              class=\"event bg-{{event.color.background}}\"\n              [ngClass]=\"{'event-long': !event.eventStart, 'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ color: event.color.foreground, order: event.order }\"\n              id=\"{{i === 0 ? event.id : ''}}\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                  - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\n              \"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >\n              {{ event.eventStart || dayIndex === 0 ? event.summary : '&nbsp;' }}\n            </div>\n            <div \n              draggable=\"true\"\n              *ngIf=\"!event.allDay && !event.longEvent\"  \n              class=\"event event-short text-{{event.color.background}}\"\n              [ngClass]=\"{'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ order: event.order }\"\n              id=\"{{i === 0 ? event.id : ''}}\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                   - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\n              \"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >\n              <i class=\"fas fa-circle pe-1 event-circle\"></i>\n              {{ event.summary }}\n            </div>\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>" }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { days: [{
                type: ViewChildren,
                args: ['dayEl']
            }], readonly: [{
                type: Input
            }], options: [{
                type: Input
            }], mondayFirst: [{
                type: Input
            }], twelveHours: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], events: [{
                type: Input
            }], dayClicked: [{
                type: Output
            }], eventClicked: [{
                type: Output
            }], eventDragged: [{
                type: Output
            }] } });

class MdbCalendarWeekViewComponent {
    constructor(_renderer) {
        this._renderer = _renderer;
        this.dayClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
        this.eventDragged = new EventEmitter();
        this.isDragging = false;
        this.dayCells = [];
        this.columns = [];
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(date) {
        this._activeDate = date;
        this.weekView = this._generateWeekView();
    }
    get events() {
        return this._events;
    }
    set events(events) {
        if (!events) {
            return;
        }
        this._events = events;
        this.weekView = this._generateWeekView();
    }
    ngOnInit() {
        this.weekView = this._generateWeekView();
    }
    onEventClick(event) {
        if (this.readonly) {
            return;
        }
        this.eventClicked.emit(event);
    }
    ngAfterViewInit() {
        this.hoursEl = this.hours.toArray().map((el) => el.nativeElement);
        for (let i = 1; i <= 7; i++) {
            this.hoursEl.forEach((row) => {
                this.columns.push(row.children[i]);
            });
        }
    }
    onDayClick(day) {
        if (this.readonly) {
            return;
        }
        let startDate = addMinutes(new Date(day.date.getTime()), -59);
        let endDate = day.date;
        if (day.date.getHours() === 0) {
            startDate = startOfDay(day.date);
            endDate = '';
        }
        const newCalendarEvent = generateEvent(startDate, endDate);
        this.dayClicked.emit(newCalendarEvent);
    }
    onMouseDown(event, day) {
        if (this.readonly) {
            return;
        }
        this.isDragging = true;
        this.dragStart = this.columns.indexOf(event.target);
        this.selectionStartDay = day.date;
    }
    onMouseUp(event, day) {
        if (this.readonly) {
            return;
        }
        this.isDragging = false;
        this.dragEnd = this.columns.indexOf(event.target);
        if (this.dragEnd !== 0) {
            this.selectRange();
        }
        this.clearSelection();
        this.selectionEndDay = day.date;
        if (this.selectionStartDay === this.selectionEndDay) {
            return;
        }
        const newCalendarEvent = generateEvent(addMinutes(new Date(this.selectionStartDay.getTime()), -59), addMinutes(new Date(this.selectionEndDay.getTime()), -59));
        this.dayClicked.emit(newCalendarEvent);
    }
    onMouseMove(event) {
        if (this.readonly) {
            return;
        }
        event.preventDefault();
        if (this.isDragging) {
            this.dragEnd = this.columns.indexOf(event.target);
            this.selectRange();
        }
    }
    onEventDragStart(calendarEvent) {
        this.draggedEventId = calendarEvent.id;
        this.clearSelection();
    }
    onEventDragEnd(calendarEvent) {
        this.draggedEventId = '';
        this.hoveredEventId = '';
        const daysDifference = differenceInDays(startOfDay(new Date(calendarEvent.startDate)), addDays(this.dragTargetDay.date, -1));
        const newStartDate = addDays(calendarEvent.startDate, daysDifference);
        const newEndDate = addDays(calendarEvent.endDate, daysDifference);
        const newEvent = {
            ...calendarEvent,
            startDate: newStartDate,
            endDate: newEndDate,
            order: '',
        };
        this.eventDragged.emit(newEvent);
    }
    onHoursEventDragEnd(calendarEvent) {
        this.draggedEventId = '';
        this.hoveredEventId = '';
        const daysDifference = differenceInHours(calendarEvent.startDate, this.dragTargetDay.date);
        const newStartDate = addHours(calendarEvent.startDate, daysDifference);
        const newEndDate = addHours(calendarEvent.endDate, daysDifference);
        const newEvent = {
            ...calendarEvent,
            startDate: newStartDate,
            endDate: newEndDate,
            order: '',
        };
        this.eventDragged.emit(newEvent);
    }
    onDragEnter(event, day) {
        this._renderer.addClass(event.target, 'dragenter');
        this.dragTargetDay = day;
    }
    onDragLeave(event) {
        this._renderer.removeClass(event.target, 'dragenter');
    }
    onDragOver(event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        return false;
    }
    onMouseEnter(event) {
        this.hoveredEventId = event.id;
    }
    onMouseLeave() {
        this.hoveredEventId = '';
    }
    selectRange() {
        this.clearSelection();
        if (this.dragEnd + 1 < this.dragStart) {
            this.columns
                .slice(this.dragEnd, this.dragStart + 1)
                .forEach((cell) => this._renderer.setStyle(cell, 'background-color', '#fafafa'));
        }
        else {
            this.columns.slice(this.dragStart, this.dragEnd + 1).forEach((cell) => {
                this._renderer.setStyle(cell, 'background-color', '#fafafa');
            });
        }
    }
    convertDateTo12hFormat(date) {
        return convertDateTo12h(date);
    }
    clearSelection() {
        this.columns.forEach((cell) => this._renderer.removeStyle(cell, 'background-color'));
    }
    _generateWeekView() {
        const sundayIndex = this.mondayFirst ? 1 : 0;
        const firstDay = addDays(this.activeDate, -getDayNumber(this.activeDate) + sundayIndex);
        const lastDay = addDays(firstDay, 6);
        const period = {
            start: `${this.options.monthsShort[getMonth(firstDay)]} ${getDate(firstDay)}`,
            end: `${this.options.monthsShort[getMonth(lastDay)]} ${getDate(lastDay)}, ${getYear(lastDay)}`,
        };
        const allDayRow = [];
        const weekRows = [];
        let row = [];
        let date;
        let month;
        let day;
        let dayNumber;
        let startDate;
        let endDate;
        let dayStart;
        let dayEnd;
        for (let i = 0; i < 24; i++) {
            row = [];
            for (let j = 0; j < 7; j++) {
                date = addDays(firstDay, j);
                month = getMonth(date) + 1;
                day = this.options.weekdays[getDayNumber(date)];
                dayNumber = getDate(date);
                startDate = addHours(startOfDay(date), i);
                endDate = addMinutes(startDate, 59.99);
                dayStart = startOfDay(date);
                dayEnd = endOfDay(date);
                if (month < 10) {
                    month = '0' + month;
                }
                if (dayNumber < 10) {
                    dayNumber = '0' + dayNumber;
                }
                row.push({
                    date: startDate,
                    isToday: isSameDate(date, getToday()),
                    events: getEvents(this.events, startDate, endDate, true),
                });
                if (i === 1) {
                    allDayRow.push({
                        date: addDays(date, 1),
                        isToday: isSameDate(date, getToday()),
                        day: day,
                        dayNumber: dayNumber,
                        month: month,
                        events: getEvents(this.events, dayStart, dayEnd),
                    });
                }
            }
            weekRows.push({ row });
        }
        return { allDayRow, weekRows, period };
    }
}
MdbCalendarWeekViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarWeekViewComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarWeekViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarWeekViewComponent, selector: "mdb-week-view-calendar", inputs: { readonly: "readonly", options: "options", mondayFirst: "mondayFirst", twelveHours: "twelveHours", activeDate: "activeDate", events: "events" }, outputs: { dayClicked: "dayClicked", eventClicked: "eventClicked", eventDragged: "eventDragged" }, viewQueries: [{ propertyName: "hours", predicate: ["hourEl"], descendants: true }], ngImport: i0, template: "<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th *ngFor=\"let day of weekView.allDayRow\">\n        {{ day.day }} {{ day.dayNumber }}/{{ day.month }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"long-event-row\">\n      <th></th>\n      <td \n        *ngFor=\"let day of weekView.allDayRow; let dayIndex = index\"\n        [ngClass]=\"{'today': day.isToday}\"\n        (click)=\"onDayClick(day)\"\n        (mousedown)=\"onMouseDown($event, day)\"\n        (mouseup)=\"onMouseUp($event, day)\" \n        (mouseenter)=\"onMouseMove($event)\"\n        (dragenter)=\"onDragEnter($event, day)\"\n        (dragover)=\"onDragOver($event)\"\n        (dragleave)=\"onDragLeave($event)\"\n      >\n        <div class=\"events-wrapper\">\n          <ng-container *ngFor=\"let event of day.events; let i = index\">\n            <ng-container *ngIf=\"event.order > i + 1 && i === 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1); let index = index\"\n                [ngStyle]=\"{ order: index + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"event.order > i + 1 && i !== 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1 - day.events[i - 1].order); let index = index\"\n                [ngStyle]=\"{ order: event.order - day.events[i - 1].order + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <div \n              draggable=\"true\"\n              class=\"event bg-{{event.color.background}}\"\n              [ngClass]=\"{'event-long': !event.eventStart, 'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ color: event.color.foreground, order: event.order }\"\n              *ngIf=\"event.allDay || event.longEvent\"\n              id=\"{{i === 0 ? event.id : ''}}\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                  - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >    \n              {{ event.eventStart || dayIndex === 0 ? event.summary : '&nbsp;' }}\n            </div>\n          </ng-container>\n          <ng-container *ngFor=\"let event of day.events\">\n            <div\n              draggable=\"true\" \n              class=\"event event-short\"\n              *ngIf=\"!event.allDay && !event.longEvent\"\n              [ngClass]=\"{'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ order: event.order }\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                  - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >\n              <i class=\"fas fa-circle pe-1 event-circle text-{{ event.color.background}}\"></i>\n              {{ event.summary }}\n            </div>\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n     \n    <tr #hourEl *ngFor=\"let row of weekView.weekRows; let i = index\">\n      <th class=\"hour-field\" *ngIf=\"twelveHours\">\n        {{ i === 0 ? '12' : i < 12 ? i : i - 12 === 0 ? '12' : i - 12 }}:00 {{ i < 12 ? 'am' : 'pm'}}\n      </th>\n      <th class=\"hour-field\" *ngIf=\"!twelveHours\">\n        {{ i }}:00 \n      </th>\n      <td *ngFor=\"let date of row.row\"\n        (click)=\"onDayClick(date)\"\n        (mousedown)=\"onMouseDown($event, date)\"\n        (mouseup)=\"onMouseUp($event, date)\" \n        (mouseenter)=\"onMouseMove($event)\"\n        (dragenter)=\"onDragEnter($event, date)\"\n        (dragover)=\"onDragOver($event)\"\n        (dragleave)=\"onDragLeave($event)\"\n      >\n        <div\n          draggable=\"true\"\n          class=\"event event-short\"\n          *ngFor=\"let event of date.events\"\n          [ngClass]=\"{'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n          html=\"true\"\n          mdbTooltip=\"\n            <h6><strong>{{event.summary}}</strong></h6>\n            <p><small><em>{{event.description}}</em></small></p>\n            <p class='me-0'><small>\n              <i class='fas fa-calendar-alt pe-1'></i>\n              {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n              - \n              {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n            </small></p>\"\n          [offset]=15\n          (click)=\"onEventClick(event); $event.stopPropagation()\"\n          (dragstart)=\"onEventDragStart(event)\"\n          (dragend)=\"onHoursEventDragEnd(event)\"\n          (mouseenter)=\"onMouseEnter(event)\"\n          (mouseleave)=\"onMouseLeave()\"\n        >\n          <i class=\"fas fa-circle event-circle pe-1 text-{{ event.color.background }}\"></i>\n          {{event.summary}}\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>", directives: [{ type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2$1.MdbTooltipDirective, selector: "[mdbTooltip]", inputs: ["mdbTooltip", "tooltipDisabled", "placement", "html", "animation", "trigger", "delayShow", "delayHide", "offset"], outputs: ["tooltipShow", "tooltipShown", "tooltipHide", "tooltipHidden"], exportAs: ["mdbTooltip"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarWeekViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-week-view-calendar', styles: [], template: "<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th *ngFor=\"let day of weekView.allDayRow\">\n        {{ day.day }} {{ day.dayNumber }}/{{ day.month }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"long-event-row\">\n      <th></th>\n      <td \n        *ngFor=\"let day of weekView.allDayRow; let dayIndex = index\"\n        [ngClass]=\"{'today': day.isToday}\"\n        (click)=\"onDayClick(day)\"\n        (mousedown)=\"onMouseDown($event, day)\"\n        (mouseup)=\"onMouseUp($event, day)\" \n        (mouseenter)=\"onMouseMove($event)\"\n        (dragenter)=\"onDragEnter($event, day)\"\n        (dragover)=\"onDragOver($event)\"\n        (dragleave)=\"onDragLeave($event)\"\n      >\n        <div class=\"events-wrapper\">\n          <ng-container *ngFor=\"let event of day.events; let i = index\">\n            <ng-container *ngIf=\"event.order > i + 1 && i === 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1); let index = index\"\n                [ngStyle]=\"{ order: index + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"event.order > i + 1 && i !== 0\">\n              <div \n                class=\"fake-event\"\n                *ngFor=\"let fakeEvent of [].constructor(event.order - 1 - day.events[i - 1].order); let index = index\"\n                [ngStyle]=\"{ order: event.order - day.events[i - 1].order + 1 }\"\n              >\n                &nbsp;\n              </div>\n            </ng-container>\n            <div \n              draggable=\"true\"\n              class=\"event bg-{{event.color.background}}\"\n              [ngClass]=\"{'event-long': !event.eventStart, 'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ color: event.color.foreground, order: event.order }\"\n              *ngIf=\"event.allDay || event.longEvent\"\n              id=\"{{i === 0 ? event.id : ''}}\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                  - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >    \n              {{ event.eventStart || dayIndex === 0 ? event.summary : '&nbsp;' }}\n            </div>\n          </ng-container>\n          <ng-container *ngFor=\"let event of day.events\">\n            <div\n              draggable=\"true\" \n              class=\"event event-short\"\n              *ngIf=\"!event.allDay && !event.longEvent\"\n              [ngClass]=\"{'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n              [ngStyle]=\"{ order: event.order }\"\n              html=\"true\"\n              mdbTooltip=\"\n                <h6><strong>{{event.summary}}</strong></h6>\n                <p><small><em>{{event.description}}</em></small></p>\n                <p class='me-0'><small>\n                  <i class='fas fa-calendar-alt pe-1'></i>\n                  {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n                  - \n                  {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n                </small></p>\"\n              [offset]=15\n              (click)=\"onEventClick(event); $event.stopPropagation()\"\n              (dragstart)=\"onEventDragStart(event)\"\n              (dragend)=\"onEventDragEnd(event)\"\n              (mouseenter)=\"onMouseEnter(event)\"\n              (mouseleave)=\"onMouseLeave()\"\n            >\n              <i class=\"fas fa-circle pe-1 event-circle text-{{ event.color.background}}\"></i>\n              {{ event.summary }}\n            </div>\n          </ng-container>\n        </div>\n      </td>\n    </tr>\n     \n    <tr #hourEl *ngFor=\"let row of weekView.weekRows; let i = index\">\n      <th class=\"hour-field\" *ngIf=\"twelveHours\">\n        {{ i === 0 ? '12' : i < 12 ? i : i - 12 === 0 ? '12' : i - 12 }}:00 {{ i < 12 ? 'am' : 'pm'}}\n      </th>\n      <th class=\"hour-field\" *ngIf=\"!twelveHours\">\n        {{ i }}:00 \n      </th>\n      <td *ngFor=\"let date of row.row\"\n        (click)=\"onDayClick(date)\"\n        (mousedown)=\"onMouseDown($event, date)\"\n        (mouseup)=\"onMouseUp($event, date)\" \n        (mouseenter)=\"onMouseMove($event)\"\n        (dragenter)=\"onDragEnter($event, date)\"\n        (dragover)=\"onDragOver($event)\"\n        (dragleave)=\"onDragLeave($event)\"\n      >\n        <div\n          draggable=\"true\"\n          class=\"event event-short\"\n          *ngFor=\"let event of date.events\"\n          [ngClass]=\"{'event-readonly': readonly, 'active' : hoveredEventId === event.id, 'dragging' : draggedEventId === event.id}\"\n          html=\"true\"\n          mdbTooltip=\"\n            <h6><strong>{{event.summary}}</strong></h6>\n            <p><small><em>{{event.description}}</em></small></p>\n            <p class='me-0'><small>\n              <i class='fas fa-calendar-alt pe-1'></i>\n              {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string}}\n              - \n              {{twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n            </small></p>\"\n          [offset]=15\n          (click)=\"onEventClick(event); $event.stopPropagation()\"\n          (dragstart)=\"onEventDragStart(event)\"\n          (dragend)=\"onHoursEventDragEnd(event)\"\n          (mouseenter)=\"onMouseEnter(event)\"\n          (mouseleave)=\"onMouseLeave()\"\n        >\n          <i class=\"fas fa-circle event-circle pe-1 text-{{ event.color.background }}\"></i>\n          {{event.summary}}\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>" }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { hours: [{
                type: ViewChildren,
                args: ['hourEl']
            }], readonly: [{
                type: Input
            }], options: [{
                type: Input
            }], mondayFirst: [{
                type: Input
            }], twelveHours: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], events: [{
                type: Input
            }], dayClicked: [{
                type: Output
            }], eventClicked: [{
                type: Output
            }], eventDragged: [{
                type: Output
            }] } });
function getHours(day) {
    throw new Error('Function not implemented.');
}

class MdbCalendarListViewComponent {
    constructor() {
        this.period = new EventEmitter();
        this.eventClicked = new EventEmitter();
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(date) {
        this._activeDate = date;
        this.listView = this.createListView();
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.listView = this.createListView();
    }
    ngAfterContentInit() {
        this.listView = this.createListView();
    }
    onEventClick(event) {
        if (this.readonly) {
            return;
        }
        this.eventClicked.emit(event);
    }
    convertDateTo12hFormat(date) {
        return convertDateTo12h(date);
    }
    convertTimeTo12hFormat(date) {
        return convertTimeTo12h(date);
    }
    createListView() {
        const sundayIndex = this.mondayFirst ? 1 : 0;
        const firstDay = addDays(this.activeDate, -getDayNumber(this.activeDate) + sundayIndex);
        const lastDay = addDays(firstDay, 5);
        const period = {
            start: `${getDate(firstDay)} ${this.options.monthsShort[getMonth(firstDay)]}, ${getYear(firstDay)}`,
            end: `${getDate(lastDay)} ${this.options.monthsShort[getMonth(lastDay)]}, ${getYear(lastDay)}`,
        };
        const eventsInPeriod = getEvents(this.events, firstDay, lastDay);
        this.period.emit(period);
        return { eventsInPeriod, period };
    }
}
MdbCalendarListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarListViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarListViewComponent, selector: "mdb-list-view-calendar", inputs: { readonly: "readonly", options: "options", mondayFirst: "mondayFirst", twelveHours: "twelveHours", activeDate: "activeDate", events: "events" }, outputs: { period: "period", eventClicked: "eventClicked" }, ngImport: i0, template: "<table class=\"list\">\n  <thead>\n    <tr></tr>\n  </thead>\n  <tbody>\n    <tr *ngIf=\"!listView.eventsInPeriod.length\">\n      <th>{{ options.noEventsCaption}}</th>\n    </tr>\n    <ng-container *ngFor=\"let event of listView.eventsInPeriod\">\n      <tr>\n        <th [ngSwitch]=\"true\">\n          <ng-container *ngSwitchCase=\"event.allDay && event.oneDay\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n          </ng-container>\n          <ng-container *ngSwitchCase=\"!event.allDay && !event.oneDay && event.startData.string !== event.endData.string\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }} \n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }} \n          </ng-container>\n          <ng-container *ngSwitchCase=\"event.allDay && event.longEvent\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            {{ event.startData.day }}/{{ event.startData.month }}/{{ event.startData.year }}\n            <br>\n            {{ twelveHours ? convertTimeTo12hFormat(event.startData.time) : event.startData.time }} \n            - \n            {{ twelveHours ? convertTimeTo12hFormat(event.endData.time) : event.endData.time}} \n          </ng-container>\n        </th>\n      </tr>\n      <tr>\n        <td (click)=\"onEventClick(event)\">\n          <i class=\"pe-2 fas fa-circle text-{{ event.color.background}}\"></i>\n          <strong>{{ event.summary }}</strong>\n          <p class=\"mb-0\" *ngIf=\"event.description\">\n            <small>\n              {{ event.description }}\n            </small>\n          </p>\n        </td>\n      </tr>\n    </ng-container>\n  </tbody>\n</table>", directives: [{ type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarListViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-list-view-calendar', styles: [], template: "<table class=\"list\">\n  <thead>\n    <tr></tr>\n  </thead>\n  <tbody>\n    <tr *ngIf=\"!listView.eventsInPeriod.length\">\n      <th>{{ options.noEventsCaption}}</th>\n    </tr>\n    <ng-container *ngFor=\"let event of listView.eventsInPeriod\">\n      <tr>\n        <th [ngSwitch]=\"true\">\n          <ng-container *ngSwitchCase=\"event.allDay && event.oneDay\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n          </ng-container>\n          <ng-container *ngSwitchCase=\"!event.allDay && !event.oneDay && event.startData.string !== event.endData.string\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }} \n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }} \n          </ng-container>\n          <ng-container *ngSwitchCase=\"event.allDay && event.longEvent\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            {{ event.startData.day }}/{{ event.startData.month }}/{{ event.startData.year }}\n            <br>\n            {{ twelveHours ? convertTimeTo12hFormat(event.startData.time) : event.startData.time }} \n            - \n            {{ twelveHours ? convertTimeTo12hFormat(event.endData.time) : event.endData.time}} \n          </ng-container>\n        </th>\n      </tr>\n      <tr>\n        <td (click)=\"onEventClick(event)\">\n          <i class=\"pe-2 fas fa-circle text-{{ event.color.background}}\"></i>\n          <strong>{{ event.summary }}</strong>\n          <p class=\"mb-0\" *ngIf=\"event.description\">\n            <small>\n              {{ event.description }}\n            </small>\n          </p>\n        </td>\n      </tr>\n    </ng-container>\n  </tbody>\n</table>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { readonly: [{
                type: Input
            }], options: [{
                type: Input
            }], mondayFirst: [{
                type: Input
            }], twelveHours: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], events: [{
                type: Input
            }], period: [{
                type: Output
            }], eventClicked: [{
                type: Output
            }] } });

class MdbCalendarComponent {
    constructor(modalService) {
        this.modalService = modalService;
        this.defaultOptions = {
            weekdays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            months: [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December',
            ],
            monthsShort: [
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec',
            ],
            todayCaption: 'today',
            monthCaption: 'month',
            weekCaption: 'week',
            listCaption: 'list',
            allDayCaption: 'All day event',
            noEventsCaption: 'No events	',
            summaryCaption: 'Summary',
            descriptionCaption: 'Description',
            startCaption: 'Start',
            endCaption: 'End',
            addCaption: 'Add',
            deleteCaption: 'Remove',
            editCaption: 'Edit',
            closeCaption: 'Close',
            addEventModalCaption: 'Add an event',
            editEventModalCaption: 'Edit an event',
        };
        this.mondayFirst = false;
        this._defaultView = 'month';
        this.twelveHours = false;
        this.defaultDate = new Date();
        this.readonly = false;
        this.prev = new EventEmitter();
        this.next = new EventEmitter();
        this.today = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.eventAdded = new EventEmitter();
        this.eventEdited = new EventEmitter();
        this.eventDeleted = new EventEmitter();
        this.activeDate = new Date();
    }
    get defaultView() {
        return this._defaultView;
    }
    set defaultView(view) {
        this._defaultView = view;
    }
    ngOnInit() {
        this.options = this.options
            ? Object.assign(this.defaultOptions, this.options)
            : this.defaultOptions;
        this.activeDate = this.defaultDate;
        this.view = this.defaultView;
    }
    changeView(view) {
        this.view = view;
        this.viewChanged.emit(view);
    }
    nextPeriod() {
        switch (this.view) {
            case 'month':
                this._nextMonth();
                break;
            default:
                this._nextWeek();
                break;
        }
        this.next.emit();
    }
    prevPeriod() {
        switch (this.view) {
            case 'month':
                this._previousMonth();
                break;
            default:
                this._previousWeek();
                break;
        }
        this.prev.emit();
    }
    todayPeriod() {
        this.activeDate = new Date();
        this.today.emit();
    }
    addEvent(newEvent) {
        const config = {
            data: {
                options: this.options,
                twelveHours: this.twelveHours,
                event: newEvent,
            },
        };
        this.modalRef = this.modalService.open(MdbCalendarEventModalComponent, config);
        this.modalRef.onClose.pipe(take(1)).subscribe((event) => {
            if (!event) {
                return;
            }
            this.events = [...this.events, event];
            this.eventAdded.emit(event);
        });
    }
    openEditModal(event) {
        const config = {
            data: {
                options: this.options,
                mode: 'edit',
                twelveHours: this.twelveHours,
                event: event,
            },
        };
        this.modalRef = this.modalService.open(MdbCalendarEventModalComponent, config);
        this.modalRef.onClose.pipe(take(1)).subscribe((newEvent) => {
            if (newEvent == 'remove') {
                this.removeEvent(event);
            }
            else if (newEvent) {
                const eventIndex = this.events.findIndex((el) => el.id === event.id);
                this.events[eventIndex] = newEvent;
                this.events = [...this.events];
                this.eventEdited.emit(newEvent);
            }
        });
    }
    editEvent(event) {
        const eventIndex = this.events.findIndex((el) => el.id === event.id);
        this.events[eventIndex] = event;
        this.events = [...this.events];
    }
    removeEvent(event) {
        const eventIndex = this.events.findIndex((el) => el.id === event.id);
        this.eventDeleted.emit(this.events[eventIndex]);
        this.events.splice(eventIndex, 1);
        this.events = [...this.events];
    }
    removeEvents() {
        this.events = [];
        this.events = [...this.events];
    }
    _nextMonth() {
        this.activeDate = addMonths(this.activeDate, 1);
    }
    _previousMonth() {
        this.activeDate = addMonths(this.activeDate, -1);
    }
    _nextWeek() {
        this.activeDate = addDays(this.activeDate, 7);
    }
    _previousWeek() {
        this.activeDate = addDays(this.activeDate, -7);
    }
}
MdbCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarComponent, deps: [{ token: i1.MdbModalService }], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarComponent, selector: "mdb-calendar", inputs: { mondayFirst: "mondayFirst", defaultView: "defaultView", twelveHours: "twelveHours", defaultDate: "defaultDate", readonly: "readonly", options: "options", events: "events" }, outputs: { prev: "prev", next: "next", today: "today", viewChanged: "viewChanged", eventAdded: "eventAdded", eventEdited: "eventEdited", eventDeleted: "eventDeleted" }, ngImport: i0, template: "<div class=\"calendar\">\n  <mdb-tools-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [activeView]=\"view\"\n    [mondayFirst]=\"mondayFirst\"\n    (viewChange)=\"changeView($event)\"\n    (previousBtnClick)=\"prevPeriod()\"\n    (nextBtnClick)=\"nextPeriod()\"\n    (todayBtnClick)=\"todayPeriod()\"\n  ></mdb-tools-calendar>\n  <mdb-month-view-calendar\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [options]=\"options\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'month'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-month-view-calendar>\n  <mdb-week-view-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'week'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-week-view-calendar>\n  <mdb-list-view-calendar \n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'list'\"\n    (eventClicked)=\"openEditModal($event)\"\n  >\n  </mdb-list-view-calendar>\n\n</div>\n", components: [{ type: MdbCalendarToolsComponent, selector: "mdb-tools-calendar", inputs: ["options", "activeDate", "mondayFirst", "activeView"], outputs: ["viewChange", "previousBtnClick", "nextBtnClick", "todayBtnClick"] }, { type: MdbCalendarMonthViewComponent, selector: "mdb-month-view-calendar", inputs: ["readonly", "options", "mondayFirst", "twelveHours", "activeDate", "events"], outputs: ["dayClicked", "eventClicked", "eventDragged"] }, { type: MdbCalendarWeekViewComponent, selector: "mdb-week-view-calendar", inputs: ["readonly", "options", "mondayFirst", "twelveHours", "activeDate", "events"], outputs: ["dayClicked", "eventClicked", "eventDragged"] }, { type: MdbCalendarListViewComponent, selector: "mdb-list-view-calendar", inputs: ["readonly", "options", "mondayFirst", "twelveHours", "activeDate", "events"], outputs: ["period", "eventClicked"] }], directives: [{ type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-calendar', styles: [], template: "<div class=\"calendar\">\n  <mdb-tools-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [activeView]=\"view\"\n    [mondayFirst]=\"mondayFirst\"\n    (viewChange)=\"changeView($event)\"\n    (previousBtnClick)=\"prevPeriod()\"\n    (nextBtnClick)=\"nextPeriod()\"\n    (todayBtnClick)=\"todayPeriod()\"\n  ></mdb-tools-calendar>\n  <mdb-month-view-calendar\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [options]=\"options\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'month'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-month-view-calendar>\n  <mdb-week-view-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'week'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-week-view-calendar>\n  <mdb-list-view-calendar \n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'list'\"\n    (eventClicked)=\"openEditModal($event)\"\n  >\n  </mdb-list-view-calendar>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MdbModalService }]; }, propDecorators: { mondayFirst: [{
                type: Input
            }], defaultView: [{
                type: Input
            }], twelveHours: [{
                type: Input
            }], defaultDate: [{
                type: Input
            }], readonly: [{
                type: Input
            }], options: [{
                type: Input
            }], events: [{
                type: Input
            }], prev: [{
                type: Output
            }], next: [{
                type: Output
            }], today: [{
                type: Output
            }], viewChanged: [{
                type: Output
            }], eventAdded: [{
                type: Output
            }], eventEdited: [{
                type: Output
            }], eventDeleted: [{
                type: Output
            }] } });

class MdbCalendarModule {
}
MdbCalendarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MdbCalendarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarModule, declarations: [MdbCalendarComponent,
        MdbCalendarToolsComponent,
        MdbCalendarMonthViewComponent,
        MdbCalendarWeekViewComponent,
        MdbCalendarListViewComponent,
        MdbCalendarEventModalComponent], imports: [CommonModule,
        MdbFormsModule,
        MdbDatepickerModule,
        MdbTimepickerModule,
        MdbTooltipModule,
        ReactiveFormsModule,
        MdbModalModule,
        MdbValidationModule], exports: [MdbCalendarComponent,
        MdbCalendarToolsComponent,
        MdbCalendarMonthViewComponent,
        MdbCalendarWeekViewComponent,
        MdbCalendarListViewComponent,
        MdbCalendarEventModalComponent] });
MdbCalendarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarModule, imports: [[
            CommonModule,
            MdbFormsModule,
            MdbDatepickerModule,
            MdbTimepickerModule,
            MdbTooltipModule,
            ReactiveFormsModule,
            MdbModalModule,
            MdbValidationModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        MdbCalendarComponent,
                        MdbCalendarToolsComponent,
                        MdbCalendarMonthViewComponent,
                        MdbCalendarWeekViewComponent,
                        MdbCalendarListViewComponent,
                        MdbCalendarEventModalComponent,
                    ],
                    imports: [
                        CommonModule,
                        MdbFormsModule,
                        MdbDatepickerModule,
                        MdbTimepickerModule,
                        MdbTooltipModule,
                        ReactiveFormsModule,
                        MdbModalModule,
                        MdbValidationModule,
                    ],
                    exports: [
                        MdbCalendarComponent,
                        MdbCalendarToolsComponent,
                        MdbCalendarMonthViewComponent,
                        MdbCalendarWeekViewComponent,
                        MdbCalendarListViewComponent,
                        MdbCalendarEventModalComponent,
                    ],
                }]
        }] });

/*
 * Public API Surface of mdb-angular-calendar
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MdbCalendarComponent, MdbCalendarEventModalComponent, MdbCalendarListViewComponent, MdbCalendarModule, MdbCalendarMonthViewComponent, MdbCalendarToolsComponent, MdbCalendarWeekViewComponent, endOfDay, startOfDay };
//# sourceMappingURL=mdb-angular-calendar.mjs.map
