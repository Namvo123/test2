import { EventEmitter, OnInit } from '@angular/core';
import { MdbModalRef, MdbModalService } from 'mdb-angular-ui-kit/modal';
import { MdbCalendarEvent } from './calendar.event.interface';
import { MdbCalendarEventModalComponent } from './calendar-event-modal.component';
import { MdbCalendarOptions } from './calendar.options.interface';
import * as i0 from "@angular/core";
export declare class MdbCalendarComponent implements OnInit {
    private modalService;
    defaultOptions: MdbCalendarOptions;
    mondayFirst: boolean;
    get defaultView(): string;
    set defaultView(view: string);
    private _defaultView;
    twelveHours: boolean;
    defaultDate: Date;
    readonly: boolean;
    options: any;
    events: MdbCalendarEvent[];
    prev: EventEmitter<any>;
    next: EventEmitter<any>;
    today: EventEmitter<any>;
    viewChanged: EventEmitter<string>;
    eventAdded: EventEmitter<MdbCalendarEvent>;
    eventEdited: EventEmitter<MdbCalendarEvent>;
    eventDeleted: EventEmitter<MdbCalendarEvent>;
    modalRef: MdbModalRef<MdbCalendarEventModalComponent>;
    view: string;
    activeDate: Date;
    constructor(modalService: MdbModalService);
    ngOnInit(): void;
    changeView(view: string): void;
    nextPeriod(): void;
    prevPeriod(): void;
    todayPeriod(): void;
    addEvent(newEvent: MdbCalendarEvent): void;
    openEditModal(event: MdbCalendarEvent): void;
    editEvent(event: any): void;
    removeEvent(event: any): void;
    removeEvents(): void;
    _nextMonth(): void;
    _previousMonth(): void;
    _nextWeek(): void;
    _previousWeek(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbCalendarComponent, "mdb-calendar", never, { "mondayFirst": "mondayFirst"; "defaultView": "defaultView"; "twelveHours": "twelveHours"; "defaultDate": "defaultDate"; "readonly": "readonly"; "options": "options"; "events": "events"; }, { "prev": "prev"; "next": "next"; "today": "today"; "viewChanged": "viewChanged"; "eventAdded": "eventAdded"; "eventEdited": "eventEdited"; "eventDeleted": "eventDeleted"; }, never, never>;
}
