import { Component, EventEmitter, Input, Output } from '@angular/core';
import { addDays, getDate, getDayNumber, getMonth, getYear } from './calendar.utils';
import * as i0 from "@angular/core";
export class MdbCalendarToolsComponent {
    constructor() {
        this.viewChange = new EventEmitter();
        this.previousBtnClick = new EventEmitter();
        this.nextBtnClick = new EventEmitter();
        this.todayBtnClick = new EventEmitter();
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(date) {
        this._activeDate = date;
        this.setPeriod();
    }
    get activeView() {
        return this._activeView;
    }
    set activeView(view) {
        this._activeView = view;
        this.setPeriod();
    }
    setPeriod() {
        switch (this.activeView) {
            case 'month':
                this.period = `${this.options.months[this.activeDate.getMonth()]} ${this.activeDate.getFullYear()}`;
                break;
            default:
                const sundayIndex = this.mondayFirst ? 1 : 0;
                const firstDay = addDays(this.activeDate, -getDayNumber(this.activeDate) + sundayIndex);
                const lastDay = addDays(firstDay, 6);
                const periodStart = `${this.options.monthsShort[getMonth(firstDay)]} ${getDate(firstDay)}`;
                const periodEnd = `${this.options.monthsShort[getMonth(lastDay)]} ${getDate(lastDay)}, ${getYear(lastDay)}`;
                this.period = `${periodStart} - ${periodEnd}`;
                break;
        }
    }
    toggleView(view) {
        this.viewChange.emit(view);
    }
    handlePreviousBtnClick() {
        this.previousBtnClick.emit();
    }
    handleNextBtnClick() {
        this.nextBtnClick.emit();
    }
    handleTodayBtnClick() {
        this.todayBtnClick.emit();
    }
}
MdbCalendarToolsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarToolsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarToolsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarToolsComponent, selector: "mdb-tools-calendar", inputs: { options: "options", activeDate: "activeDate", mondayFirst: "mondayFirst", activeView: "activeView" }, outputs: { viewChange: "viewChange", previousBtnClick: "previousBtnClick", nextBtnClick: "nextBtnClick", todayBtnClick: "todayBtnClick" }, ngImport: i0, template: "<div class=\"calendar-tools\">\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"handlePreviousBtnClick()\">\n      <i class=\"fas fa-chevron-left\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleNextBtnClick()\">\n      <i class=\"fas fa-chevron-right\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleTodayBtnClick()\">{{ options.todayCaption }}</button>\n  </div>\n  <span class=\"calendar-heading\">{{ period }}</span>\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('month')\">{{ options.monthCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('week')\">{{ options.weekCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('list')\">{{ options.listCaption }}</button>\n  </div>\n</div>" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarToolsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-tools-calendar', styles: [], template: "<div class=\"calendar-tools\">\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"handlePreviousBtnClick()\">\n      <i class=\"fas fa-chevron-left\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleNextBtnClick()\">\n      <i class=\"fas fa-chevron-right\"></i>\n    </button>\n    <button class=\"btn btn-outline-primary\" (click)=\"handleTodayBtnClick()\">{{ options.todayCaption }}</button>\n  </div>\n  <span class=\"calendar-heading\">{{ period }}</span>\n  <div class=\"btn-group btn-group-sm shadow-0\">\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('month')\">{{ options.monthCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('week')\">{{ options.weekCaption }}</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"toggleView('list')\">{{ options.listCaption }}</button>\n  </div>\n</div>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { options: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], mondayFirst: [{
                type: Input
            }], activeView: [{
                type: Input
            }], viewChange: [{
                type: Output
            }], previousBtnClick: [{
                type: Output
            }], nextBtnClick: [{
                type: Output
            }], todayBtnClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItdG9vbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbWRiLWFuZ3VsYXItY2FsZW5kYXIvc3JjL2xpYi9jYWxlbmRhci10b29scy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tZGItYW5ndWxhci1jYWxlbmRhci9zcmMvbGliL2NhbGVuZGFyLXRvb2xzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7QUFRckYsTUFBTSxPQUFPLHlCQUF5QjtJQTZCcEM7UUFQVSxlQUFVLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDdEQscUJBQWdCLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDNUQsaUJBQVksR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4RCxrQkFBYSxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO0lBSXBELENBQUM7SUEzQmhCLElBQ0ksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBQ0QsSUFBSSxVQUFVLENBQUMsSUFBVTtRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUdELElBQ0ksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBQ0QsSUFBSSxVQUFVLENBQUMsSUFBWTtRQUN6QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQVlELFNBQVM7UUFDUCxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDdkIsS0FBSyxPQUFPO2dCQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FDWixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUNoRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsTUFBTTtZQUNSO2dCQUNFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUM7Z0JBQ3hGLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRXJDLE1BQU0sV0FBVyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7Z0JBQzNGLE1BQU0sU0FBUyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksT0FBTyxDQUN6RSxPQUFPLENBQ1IsS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFFekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLFdBQVcsTUFBTSxTQUFTLEVBQUUsQ0FBQztnQkFDOUMsTUFBTTtTQUNUO0lBQ0gsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFZO1FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxzQkFBc0I7UUFDcEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7c0hBbkVVLHlCQUF5QjswR0FBekIseUJBQXlCLHFUQ1R0QyxtOEJBZ0JNOzJGRFBPLHlCQUF5QjtrQkFOckMsU0FBUzsrQkFFRSxvQkFBb0IsVUFFdEIsRUFBRTswRUFHRCxPQUFPO3NCQUFmLEtBQUs7Z0JBRUYsVUFBVTtzQkFEYixLQUFLO2dCQVNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBRUYsVUFBVTtzQkFEYixLQUFLO2dCQVVJLFVBQVU7c0JBQW5CLE1BQU07Z0JBQ0csZ0JBQWdCO3NCQUF6QixNQUFNO2dCQUNHLFlBQVk7c0JBQXJCLE1BQU07Z0JBQ0csYUFBYTtzQkFBdEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhZGREYXlzLCBnZXREYXRlLCBnZXREYXlOdW1iZXIsIGdldE1vbnRoLCBnZXRZZWFyIH0gZnJvbSAnLi9jYWxlbmRhci51dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2NvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ21kYi10b29scy1jYWxlbmRhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYWxlbmRhci10b29scy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW10sXG59KVxuZXhwb3J0IGNsYXNzIE1kYkNhbGVuZGFyVG9vbHNDb21wb25lbnQge1xuICBASW5wdXQoKSBvcHRpb25zO1xuICBASW5wdXQoKVxuICBnZXQgYWN0aXZlRGF0ZSgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlRGF0ZTtcbiAgfVxuICBzZXQgYWN0aXZlRGF0ZShkYXRlOiBEYXRlKSB7XG4gICAgdGhpcy5fYWN0aXZlRGF0ZSA9IGRhdGU7XG4gICAgdGhpcy5zZXRQZXJpb2QoKTtcbiAgfVxuICBwcml2YXRlIF9hY3RpdmVEYXRlOiBEYXRlO1xuICBASW5wdXQoKSBtb25kYXlGaXJzdDtcbiAgQElucHV0KClcbiAgZ2V0IGFjdGl2ZVZpZXcoKTogU3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlVmlldztcbiAgfVxuICBzZXQgYWN0aXZlVmlldyh2aWV3OiBTdHJpbmcpIHtcbiAgICB0aGlzLl9hY3RpdmVWaWV3ID0gdmlldztcbiAgICB0aGlzLnNldFBlcmlvZCgpO1xuICB9XG4gIHByaXZhdGUgX2FjdGl2ZVZpZXc6IFN0cmluZztcblxuICBAT3V0cHV0KCkgdmlld0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBwcmV2aW91c0J0bkNsaWNrOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG5leHRCdG5DbGljazogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSB0b2RheUJ0bkNsaWNrOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwZXJpb2Q7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIHNldFBlcmlvZCgpOiB2b2lkIHtcbiAgICBzd2l0Y2ggKHRoaXMuYWN0aXZlVmlldykge1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICB0aGlzLnBlcmlvZCA9IGAke1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5tb250aHNbdGhpcy5hY3RpdmVEYXRlLmdldE1vbnRoKCldXG4gICAgICAgIH0gJHt0aGlzLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKX1gO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnN0IHN1bmRheUluZGV4ID0gdGhpcy5tb25kYXlGaXJzdCA/IDEgOiAwO1xuICAgICAgICBjb25zdCBmaXJzdERheSA9IGFkZERheXModGhpcy5hY3RpdmVEYXRlLCAtZ2V0RGF5TnVtYmVyKHRoaXMuYWN0aXZlRGF0ZSkgKyBzdW5kYXlJbmRleCk7XG4gICAgICAgIGNvbnN0IGxhc3REYXkgPSBhZGREYXlzKGZpcnN0RGF5LCA2KTtcblxuICAgICAgICBjb25zdCBwZXJpb2RTdGFydCA9IGAke3RoaXMub3B0aW9ucy5tb250aHNTaG9ydFtnZXRNb250aChmaXJzdERheSldfSAke2dldERhdGUoZmlyc3REYXkpfWA7XG4gICAgICAgIGNvbnN0IHBlcmlvZEVuZCA9IGAke3RoaXMub3B0aW9ucy5tb250aHNTaG9ydFtnZXRNb250aChsYXN0RGF5KV19ICR7Z2V0RGF0ZShcbiAgICAgICAgICBsYXN0RGF5XG4gICAgICAgICl9LCAke2dldFllYXIobGFzdERheSl9YDtcblxuICAgICAgICB0aGlzLnBlcmlvZCA9IGAke3BlcmlvZFN0YXJ0fSAtICR7cGVyaW9kRW5kfWA7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZVZpZXcodmlldzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy52aWV3Q2hhbmdlLmVtaXQodmlldyk7XG4gIH1cblxuICBoYW5kbGVQcmV2aW91c0J0bkNsaWNrKCk6IHZvaWQge1xuICAgIHRoaXMucHJldmlvdXNCdG5DbGljay5lbWl0KCk7XG4gIH1cblxuICBoYW5kbGVOZXh0QnRuQ2xpY2soKTogdm9pZCB7XG4gICAgdGhpcy5uZXh0QnRuQ2xpY2suZW1pdCgpO1xuICB9XG5cbiAgaGFuZGxlVG9kYXlCdG5DbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLnRvZGF5QnRuQ2xpY2suZW1pdCgpO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiY2FsZW5kYXItdG9vbHNcIj5cbiAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBidG4tZ3JvdXAtc20gc2hhZG93LTBcIj5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnlcIiAoY2xpY2spPVwiaGFuZGxlUHJldmlvdXNCdG5DbGljaygpXCI+XG4gICAgICA8aSBjbGFzcz1cImZhcyBmYS1jaGV2cm9uLWxlZnRcIj48L2k+XG4gICAgPC9idXR0b24+XG4gICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tb3V0bGluZS1wcmltYXJ5XCIgKGNsaWNrKT1cImhhbmRsZU5leHRCdG5DbGljaygpXCI+XG4gICAgICA8aSBjbGFzcz1cImZhcyBmYS1jaGV2cm9uLXJpZ2h0XCI+PC9pPlxuICAgIDwvYnV0dG9uPlxuICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeVwiIChjbGljayk9XCJoYW5kbGVUb2RheUJ0bkNsaWNrKClcIj57eyBvcHRpb25zLnRvZGF5Q2FwdGlvbiB9fTwvYnV0dG9uPlxuICA8L2Rpdj5cbiAgPHNwYW4gY2xhc3M9XCJjYWxlbmRhci1oZWFkaW5nXCI+e3sgcGVyaW9kIH19PC9zcGFuPlxuICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC1zbSBzaGFkb3ctMFwiPlxuICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeVwiIChjbGljayk9XCJ0b2dnbGVWaWV3KCdtb250aCcpXCI+e3sgb3B0aW9ucy5tb250aENhcHRpb24gfX08L2J1dHRvbj5cbiAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnlcIiAoY2xpY2spPVwidG9nZ2xlVmlldygnd2VlaycpXCI+e3sgb3B0aW9ucy53ZWVrQ2FwdGlvbiB9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeVwiIChjbGljayk9XCJ0b2dnbGVWaWV3KCdsaXN0JylcIj57eyBvcHRpb25zLmxpc3RDYXB0aW9uIH19PC9idXR0b24+XG4gIDwvZGl2PlxuPC9kaXY+Il19