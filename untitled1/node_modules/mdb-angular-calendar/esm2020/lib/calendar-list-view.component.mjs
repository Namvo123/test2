import { Component, EventEmitter, Input, Output } from '@angular/core';
import { addDays, convertDateTo12h, convertTimeTo12h, getDate, getDayNumber, getEvents, getMonth, getYear, } from './calendar.utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class MdbCalendarListViewComponent {
    constructor() {
        this.period = new EventEmitter();
        this.eventClicked = new EventEmitter();
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(date) {
        this._activeDate = date;
        this.listView = this.createListView();
    }
    get events() {
        return this._events;
    }
    set events(events) {
        this._events = events;
        this.listView = this.createListView();
    }
    ngAfterContentInit() {
        this.listView = this.createListView();
    }
    onEventClick(event) {
        if (this.readonly) {
            return;
        }
        this.eventClicked.emit(event);
    }
    convertDateTo12hFormat(date) {
        return convertDateTo12h(date);
    }
    convertTimeTo12hFormat(date) {
        return convertTimeTo12h(date);
    }
    createListView() {
        const sundayIndex = this.mondayFirst ? 1 : 0;
        const firstDay = addDays(this.activeDate, -getDayNumber(this.activeDate) + sundayIndex);
        const lastDay = addDays(firstDay, 5);
        const period = {
            start: `${getDate(firstDay)} ${this.options.monthsShort[getMonth(firstDay)]}, ${getYear(firstDay)}`,
            end: `${getDate(lastDay)} ${this.options.monthsShort[getMonth(lastDay)]}, ${getYear(lastDay)}`,
        };
        const eventsInPeriod = getEvents(this.events, firstDay, lastDay);
        this.period.emit(period);
        return { eventsInPeriod, period };
    }
}
MdbCalendarListViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarListViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarListViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarListViewComponent, selector: "mdb-list-view-calendar", inputs: { readonly: "readonly", options: "options", mondayFirst: "mondayFirst", twelveHours: "twelveHours", activeDate: "activeDate", events: "events" }, outputs: { period: "period", eventClicked: "eventClicked" }, ngImport: i0, template: "<table class=\"list\">\n  <thead>\n    <tr></tr>\n  </thead>\n  <tbody>\n    <tr *ngIf=\"!listView.eventsInPeriod.length\">\n      <th>{{ options.noEventsCaption}}</th>\n    </tr>\n    <ng-container *ngFor=\"let event of listView.eventsInPeriod\">\n      <tr>\n        <th [ngSwitch]=\"true\">\n          <ng-container *ngSwitchCase=\"event.allDay && event.oneDay\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n          </ng-container>\n          <ng-container *ngSwitchCase=\"!event.allDay && !event.oneDay && event.startData.string !== event.endData.string\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }} \n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }} \n          </ng-container>\n          <ng-container *ngSwitchCase=\"event.allDay && event.longEvent\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            {{ event.startData.day }}/{{ event.startData.month }}/{{ event.startData.year }}\n            <br>\n            {{ twelveHours ? convertTimeTo12hFormat(event.startData.time) : event.startData.time }} \n            - \n            {{ twelveHours ? convertTimeTo12hFormat(event.endData.time) : event.endData.time}} \n          </ng-container>\n        </th>\n      </tr>\n      <tr>\n        <td (click)=\"onEventClick(event)\">\n          <i class=\"pe-2 fas fa-circle text-{{ event.color.background}}\"></i>\n          <strong>{{ event.summary }}</strong>\n          <p class=\"mb-0\" *ngIf=\"event.description\">\n            <small>\n              {{ event.description }}\n            </small>\n          </p>\n        </td>\n      </tr>\n    </ng-container>\n  </tbody>\n</table>", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarListViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-list-view-calendar', styles: [], template: "<table class=\"list\">\n  <thead>\n    <tr></tr>\n  </thead>\n  <tbody>\n    <tr *ngIf=\"!listView.eventsInPeriod.length\">\n      <th>{{ options.noEventsCaption}}</th>\n    </tr>\n    <ng-container *ngFor=\"let event of listView.eventsInPeriod\">\n      <tr>\n        <th [ngSwitch]=\"true\">\n          <ng-container *ngSwitchCase=\"event.allDay && event.oneDay\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n          </ng-container>\n          <ng-container *ngSwitchCase=\"!event.allDay && !event.oneDay && event.startData.string !== event.endData.string\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }} \n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }} \n          </ng-container>\n          <ng-container *ngSwitchCase=\"event.allDay && event.longEvent\">\n            {{ twelveHours ? convertDateTo12hFormat(event.startData.string) : event.startData.string }}\n            - \n            {{ twelveHours ? convertDateTo12hFormat(event.endData.string) : event.endData.string }}\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            {{ event.startData.day }}/{{ event.startData.month }}/{{ event.startData.year }}\n            <br>\n            {{ twelveHours ? convertTimeTo12hFormat(event.startData.time) : event.startData.time }} \n            - \n            {{ twelveHours ? convertTimeTo12hFormat(event.endData.time) : event.endData.time}} \n          </ng-container>\n        </th>\n      </tr>\n      <tr>\n        <td (click)=\"onEventClick(event)\">\n          <i class=\"pe-2 fas fa-circle text-{{ event.color.background}}\"></i>\n          <strong>{{ event.summary }}</strong>\n          <p class=\"mb-0\" *ngIf=\"event.description\">\n            <small>\n              {{ event.description }}\n            </small>\n          </p>\n        </td>\n      </tr>\n    </ng-container>\n  </tbody>\n</table>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { readonly: [{
                type: Input
            }], options: [{
                type: Input
            }], mondayFirst: [{
                type: Input
            }], twelveHours: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], events: [{
                type: Input
            }], period: [{
                type: Output
            }], eventClicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,