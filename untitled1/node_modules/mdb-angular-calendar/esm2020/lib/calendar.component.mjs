import { Component, EventEmitter, Input, Output } from '@angular/core';
import { addDays, addMonths } from './calendar.utils';
import { MdbCalendarEventModalComponent } from './calendar-event-modal.component';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "mdb-angular-ui-kit/modal";
import * as i2 from "./calendar-tools.component";
import * as i3 from "./calendar-month-view.component";
import * as i4 from "./calendar-week-view.component";
import * as i5 from "./calendar-list-view.component";
import * as i6 from "@angular/common";
export class MdbCalendarComponent {
    constructor(modalService) {
        this.modalService = modalService;
        this.defaultOptions = {
            weekdays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            months: [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December',
            ],
            monthsShort: [
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec',
            ],
            todayCaption: 'today',
            monthCaption: 'month',
            weekCaption: 'week',
            listCaption: 'list',
            allDayCaption: 'All day event',
            noEventsCaption: 'No events	',
            summaryCaption: 'Summary',
            descriptionCaption: 'Description',
            startCaption: 'Start',
            endCaption: 'End',
            addCaption: 'Add',
            deleteCaption: 'Remove',
            editCaption: 'Edit',
            closeCaption: 'Close',
            addEventModalCaption: 'Add an event',
            editEventModalCaption: 'Edit an event',
        };
        this.mondayFirst = false;
        this._defaultView = 'month';
        this.twelveHours = false;
        this.defaultDate = new Date();
        this.readonly = false;
        this.prev = new EventEmitter();
        this.next = new EventEmitter();
        this.today = new EventEmitter();
        this.viewChanged = new EventEmitter();
        this.eventAdded = new EventEmitter();
        this.eventEdited = new EventEmitter();
        this.eventDeleted = new EventEmitter();
        this.activeDate = new Date();
    }
    get defaultView() {
        return this._defaultView;
    }
    set defaultView(view) {
        this._defaultView = view;
    }
    ngOnInit() {
        this.options = this.options
            ? Object.assign(this.defaultOptions, this.options)
            : this.defaultOptions;
        this.activeDate = this.defaultDate;
        this.view = this.defaultView;
    }
    changeView(view) {
        this.view = view;
        this.viewChanged.emit(view);
    }
    nextPeriod() {
        switch (this.view) {
            case 'month':
                this._nextMonth();
                break;
            default:
                this._nextWeek();
                break;
        }
        this.next.emit();
    }
    prevPeriod() {
        switch (this.view) {
            case 'month':
                this._previousMonth();
                break;
            default:
                this._previousWeek();
                break;
        }
        this.prev.emit();
    }
    todayPeriod() {
        this.activeDate = new Date();
        this.today.emit();
    }
    addEvent(newEvent) {
        const config = {
            data: {
                options: this.options,
                twelveHours: this.twelveHours,
                event: newEvent,
            },
        };
        this.modalRef = this.modalService.open(MdbCalendarEventModalComponent, config);
        this.modalRef.onClose.pipe(take(1)).subscribe((event) => {
            if (!event) {
                return;
            }
            this.events = [...this.events, event];
            this.eventAdded.emit(event);
        });
    }
    openEditModal(event) {
        const config = {
            data: {
                options: this.options,
                mode: 'edit',
                twelveHours: this.twelveHours,
                event: event,
            },
        };
        this.modalRef = this.modalService.open(MdbCalendarEventModalComponent, config);
        this.modalRef.onClose.pipe(take(1)).subscribe((newEvent) => {
            if (newEvent == 'remove') {
                this.removeEvent(event);
            }
            else if (newEvent) {
                const eventIndex = this.events.findIndex((el) => el.id === event.id);
                this.events[eventIndex] = newEvent;
                this.events = [...this.events];
                this.eventEdited.emit(newEvent);
            }
        });
    }
    editEvent(event) {
        const eventIndex = this.events.findIndex((el) => el.id === event.id);
        this.events[eventIndex] = event;
        this.events = [...this.events];
    }
    removeEvent(event) {
        const eventIndex = this.events.findIndex((el) => el.id === event.id);
        this.eventDeleted.emit(this.events[eventIndex]);
        this.events.splice(eventIndex, 1);
        this.events = [...this.events];
    }
    removeEvents() {
        this.events = [];
        this.events = [...this.events];
    }
    _nextMonth() {
        this.activeDate = addMonths(this.activeDate, 1);
    }
    _previousMonth() {
        this.activeDate = addMonths(this.activeDate, -1);
    }
    _nextWeek() {
        this.activeDate = addDays(this.activeDate, 7);
    }
    _previousWeek() {
        this.activeDate = addDays(this.activeDate, -7);
    }
}
MdbCalendarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarComponent, deps: [{ token: i1.MdbModalService }], target: i0.ɵɵFactoryTarget.Component });
MdbCalendarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbCalendarComponent, selector: "mdb-calendar", inputs: { mondayFirst: "mondayFirst", defaultView: "defaultView", twelveHours: "twelveHours", defaultDate: "defaultDate", readonly: "readonly", options: "options", events: "events" }, outputs: { prev: "prev", next: "next", today: "today", viewChanged: "viewChanged", eventAdded: "eventAdded", eventEdited: "eventEdited", eventDeleted: "eventDeleted" }, ngImport: i0, template: "<div class=\"calendar\">\n  <mdb-tools-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [activeView]=\"view\"\n    [mondayFirst]=\"mondayFirst\"\n    (viewChange)=\"changeView($event)\"\n    (previousBtnClick)=\"prevPeriod()\"\n    (nextBtnClick)=\"nextPeriod()\"\n    (todayBtnClick)=\"todayPeriod()\"\n  ></mdb-tools-calendar>\n  <mdb-month-view-calendar\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [options]=\"options\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'month'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-month-view-calendar>\n  <mdb-week-view-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'week'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-week-view-calendar>\n  <mdb-list-view-calendar \n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'list'\"\n    (eventClicked)=\"openEditModal($event)\"\n  >\n  </mdb-list-view-calendar>\n\n</div>\n", components: [{ type: i2.MdbCalendarToolsComponent, selector: "mdb-tools-calendar", inputs: ["options", "activeDate", "mondayFirst", "activeView"], outputs: ["viewChange", "previousBtnClick", "nextBtnClick", "todayBtnClick"] }, { type: i3.MdbCalendarMonthViewComponent, selector: "mdb-month-view-calendar", inputs: ["readonly", "options", "mondayFirst", "twelveHours", "activeDate", "events"], outputs: ["dayClicked", "eventClicked", "eventDragged"] }, { type: i4.MdbCalendarWeekViewComponent, selector: "mdb-week-view-calendar", inputs: ["readonly", "options", "mondayFirst", "twelveHours", "activeDate", "events"], outputs: ["dayClicked", "eventClicked", "eventDragged"] }, { type: i5.MdbCalendarListViewComponent, selector: "mdb-list-view-calendar", inputs: ["readonly", "options", "mondayFirst", "twelveHours", "activeDate", "events"], outputs: ["period", "eventClicked"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-calendar', styles: [], template: "<div class=\"calendar\">\n  <mdb-tools-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [activeView]=\"view\"\n    [mondayFirst]=\"mondayFirst\"\n    (viewChange)=\"changeView($event)\"\n    (previousBtnClick)=\"prevPeriod()\"\n    (nextBtnClick)=\"nextPeriod()\"\n    (todayBtnClick)=\"todayPeriod()\"\n  ></mdb-tools-calendar>\n  <mdb-month-view-calendar\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [options]=\"options\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'month'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-month-view-calendar>\n  <mdb-week-view-calendar\n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'week'\"\n    (dayClicked)=\"addEvent($event)\"\n    (eventClicked)=\"openEditModal($event)\"\n    (eventDragged)=\"editEvent($event)\"\n  >\n  </mdb-week-view-calendar>\n  <mdb-list-view-calendar \n    [options]=\"options\"\n    [activeDate]=\"activeDate\"\n    [events]=\"events\"\n    [readonly]=\"readonly\"\n    [mondayFirst]=\"mondayFirst\"\n    [twelveHours]=\"twelveHours\"\n    *ngIf=\"view === 'list'\"\n    (eventClicked)=\"openEditModal($event)\"\n  >\n  </mdb-list-view-calendar>\n\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MdbModalService }]; }, propDecorators: { mondayFirst: [{
                type: Input
            }], defaultView: [{
                type: Input
            }], twelveHours: [{
                type: Input
            }], defaultDate: [{
                type: Input
            }], readonly: [{
                type: Input
            }], options: [{
                type: Input
            }], events: [{
                type: Input
            }], prev: [{
                type: Output
            }], next: [{
                type: Output
            }], today: [{
                type: Output
            }], viewChanged: [{
                type: Output
            }], eventAdded: [{
                type: Output
            }], eventEdited: [{
                type: Output
            }], eventDeleted: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,