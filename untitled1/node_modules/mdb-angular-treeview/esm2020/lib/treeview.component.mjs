import { Component, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, ViewChildren, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "mdb-angular-ui-kit/collapse";
import * as i3 from "mdb-angular-ui-kit/checkbox";
export class MdbTreeviewComponent {
    constructor(_renderer, _cdRef) {
        this._renderer = _renderer;
        this._cdRef = _cdRef;
        this.selectable = false;
        this.accordion = false;
        this.openOnClick = true;
        this.line = false;
        this.color = 'primary';
        this.rotationAngle = '90';
        this.selected = new EventEmitter();
        this.activeItemChange = new EventEmitter();
    }
    expand(id) {
        const node = this._deepFind(id, 'expandId');
        if (!node) {
            return;
        }
        this._expandParentsNode(node[this.textField]);
        node.collapsed = false;
        this._cdRef.markForCheck();
    }
    collapse() {
        this._collapseAll(this.nodes);
        this._cdRef.markForCheck();
    }
    _checkboxChange(element, node) {
        node[this.checkedField] = element.checked;
    }
    _handleCheckboxClick(element, isChecked, node) {
        const isParentField = () => node[this.childrenField];
        const toggleAllDirectChildrenCheckboxes = (actualNode, state) => {
            actualNode[this.childrenField].forEach((childrenNode) => {
                childrenNode[this.checkedField] = state;
            });
        };
        const toggleAllChildrenCheckboxes = (actualNode, state) => {
            toggleAllDirectChildrenCheckboxes(actualNode, state);
            actualNode[this.childrenField]?.forEach((childrenNode) => {
                if (childrenNode[this.childrenField]) {
                    toggleAllChildrenCheckboxes(childrenNode, state);
                }
            });
        };
        if (isChecked && isParentField()) {
            toggleAllChildrenCheckboxes(node, true);
        }
        if (!isChecked && isParentField()) {
            toggleAllChildrenCheckboxes(node, false);
        }
        node[this.checkedField] = element.checked;
        const iterator = (actualNode = this.nodes) => {
            actualNode.forEach((childrenNode) => {
                if (childrenNode[this.childrenField]) {
                    iterator(childrenNode[this.childrenField]);
                    let isAllChildrenChecked = childrenNode[this.childrenField].every((sibling) => sibling[this.checkedField] === true);
                    childrenNode[this.checkedField] = isAllChildrenChecked;
                }
            });
        };
        iterator(this.nodes);
    }
    checkboxSelected(node, isChecked) {
        if (isChecked) {
            this.selected.emit(node);
        }
    }
    setActive(target, preventClick) {
        if (preventClick) {
            return;
        }
        this.activeElement.forEach((element) => {
            this._renderer.removeClass(element.nativeElement, 'active');
        });
        this._renderer.addClass(target, 'active');
        this.activeItemChange.emit(target);
    }
    filter(value) {
        this.collapse();
        const node = this._deepFind(value, 'name');
        if (!node) {
            return;
        }
        this._expandParentsNode(node[this.textField]);
        node.collapsed = false;
        this._cdRef.markForCheck();
    }
    generateUid() {
        const uid = Math.random().toString(36).substr(2, 9);
        return `mdb-treeview-${uid}`;
    }
    _deepFind(value, key = this.textField) {
        let result;
        const findInNode = (nodes, value) => {
            nodes.forEach((node) => {
                const includes = node[key]?.toLowerCase().includes(value.toLowerCase());
                if (includes) {
                    result = node;
                }
                else if (node[this.childrenField]) {
                    findInNode(node[this.childrenField], value);
                }
            });
        };
        findInNode(this.nodes, value);
        return result;
    }
    _expandParentsNode(value, key = this.textField) {
        const findInNode = (nodes, value) => {
            nodes.forEach((parentNode) => {
                parentNode[this.childrenField]?.forEach((childrenNode) => {
                    const includes = childrenNode[key]?.toLowerCase().includes(value.toLowerCase());
                    if (includes) {
                        parentNode.collapsed = false;
                    }
                    else if (childrenNode[this.childrenField]) {
                        findInNode(parentNode[this.childrenField], value);
                    }
                });
            });
        };
        findInNode(this.nodes, value);
    }
    _collapseAll(nodes) {
        nodes.forEach((node) => {
            node.collapsed = true;
            if (node[this.childrenField]) {
                this._collapseAll(node[this.childrenField]);
            }
        });
    }
}
MdbTreeviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbTreeviewComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MdbTreeviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbTreeviewComponent, selector: "mdb-treeview", inputs: { nodes: "nodes", textField: "textField", childrenField: "childrenField", checkedField: "checkedField", selectable: "selectable", checkboxesField: "checkboxesField", accordion: "accordion", openOnClick: "openOnClick", line: "line", color: "color", rotationAngle: "rotationAngle" }, outputs: { selected: "selected", activeItemChange: "activeItemChange" }, viewQueries: [{ propertyName: "activeElement", predicate: ["activeElement"], descendants: true }], exportAs: ["mdbTreeview"], ngImport: i0, template: "<!-- child nodes -->\n<ng-template #tree let-nodeChildren let-idx=\"idx\" let-disabled=\"disabled\">\n  <li\n    #activeElement\n    *ngFor=\"let node of nodeChildren; let n = index;\"\n    role=\"tree-item\"\n    [ngClass]=\"{'treeview-category': !node[childrenField], 'treeview-disabled': (node.disabled || disabled) && !node[childrenField]}\"\n    (click)=\"setActive($event.currentTarget, node[childrenField])\"\n  >\n    <ng-container *ngIf=\"!node[childrenField]\">\n      <ng-container *ngIf=\"selectable\" >\n        <ng-container *ngTemplateOutlet=\"checkboxTemplate; context: { $implicit: node, idx: idx + '_' + n, disabled: node.disabled || disabled}\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!selectable\">\n        <i\n          *ngIf=\"node.icon\"\n          [ngClass]=\"node.icon\"\n          [ngStyle]=\"{'transform': node.collapsed === false ? 'rotate(' + rotationAngle + 'deg)' : 'rotate(0deg)'}\"\n        ></i>\n        {{ node[textField] }}\n      </ng-container>\n    </ng-container>\n    <a \n      #activeElement\n      *ngIf=\"node[childrenField] && node[childrenField].length > 0\"\n      class=\"treeview-category\"\n      role=\"button\"\n      [ngClass]=\"{'d-flex': selectable, 'treeview-disabled': node.disabled || disabled }\"\n      (click)=\"node.collapsed = node.collapsed === undefined ? false : !node.collapsed; setActive($event.currentTarget, false)\"\n    >\n      <span aria-label=\"toggle\">\n        <i\n          tabindex=\"1\"\n          [ngClass]=\"node.icon ? !selectable? node.icon : '' : 'fas fa-angle-right'\"\n          [ngStyle]=\"{'transform': node.collapsed === false ? 'rotate(' + rotationAngle + 'deg)' : 'rotate(0deg)'}\"\n          class=\"mx-1\"\n        ></i>\n      </span>\n      <ng-container *ngIf=\"selectable\" >\n        <ng-container *ngTemplateOutlet=\"checkboxTemplate; context: { $implicit: node, idx: idx + '_' + n, disabled: node.disabled || disabled }\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!selectable\">\n        {{ node[textField] }}\n      </ng-container>\n    </a>\n    <ul \n      id=\"collapse-{{node.expandId}}-{{idx + '_' + n}}\"\n      mdbCollapse\n      [collapsed]=\"node.collapsed === false ? false : true\"\n      role=\"tree\"\n      [ngClass]=\"{'treeview-line': line}\"\n    >\n      <ng-container *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: idx + '_' + n, disabled: node.disabled || disabled }\"></ng-container>\n    </ul>\n  </li>\n</ng-template>\n\n<!-- selectable -->\n<ng-template #checkboxTemplate let-node let-idx=\"idx\" let-disabled=\"disabled\">\n  <div class=\"form-check\">\n    <input\n      mdbCheckbox\n      class=\"form-check-input\"\n      type=\"checkbox\"\n      value=\"\"\n      id=\"{{generateUid() + idx}}\"\n      [disabled]=\"disabled\"\n      (click)=\"_handleCheckboxClick($event.target, $event.target.checked, node); $event.stopPropagation()\"\n      (change)=\"_checkboxChange($event.target, node)\"\n      [checked]=\"node[checkedField]\"\n    />\n    <label class=\"form-check-label\" for=\"{{generateUid() + idx}}\">\n      <i\n        *ngIf=\"node.icon\"\n        [ngClass]=\"node.icon\"\n        [ngStyle]=\"{'transform': node.collapsed === false ? 'rotate(' + rotationAngle + 'deg)' : 'rotate(0deg)'}\"\n        ></i>\n      {{ node[textField] }}\n    </label>\n  </div>\n</ng-template>\n\n<!-- first nodes -->\n<div class=\"treeview treeview-{{color}}\">\n  <ul role=\"tree\">\n    <ng-container *ngTemplateOutlet=\"tree; context: { $implicit: nodes, idx: 1 }\"></ng-container>\n  </ul>\n</div>\n\n", directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2.MdbCollapseDirective, selector: "[mdbCollapse]", inputs: ["collapsed"], outputs: ["collapseShow", "collapseShown", "collapseHide", "collapseHidden"], exportAs: ["mdbCollapse"] }, { type: i3.MdbCheckboxDirective, selector: "[mdbCheckbox]", inputs: ["checked", "value", "disabled"], outputs: ["checkboxChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbTreeviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-treeview', exportAs: 'mdbTreeview', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<!-- child nodes -->\n<ng-template #tree let-nodeChildren let-idx=\"idx\" let-disabled=\"disabled\">\n  <li\n    #activeElement\n    *ngFor=\"let node of nodeChildren; let n = index;\"\n    role=\"tree-item\"\n    [ngClass]=\"{'treeview-category': !node[childrenField], 'treeview-disabled': (node.disabled || disabled) && !node[childrenField]}\"\n    (click)=\"setActive($event.currentTarget, node[childrenField])\"\n  >\n    <ng-container *ngIf=\"!node[childrenField]\">\n      <ng-container *ngIf=\"selectable\" >\n        <ng-container *ngTemplateOutlet=\"checkboxTemplate; context: { $implicit: node, idx: idx + '_' + n, disabled: node.disabled || disabled}\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!selectable\">\n        <i\n          *ngIf=\"node.icon\"\n          [ngClass]=\"node.icon\"\n          [ngStyle]=\"{'transform': node.collapsed === false ? 'rotate(' + rotationAngle + 'deg)' : 'rotate(0deg)'}\"\n        ></i>\n        {{ node[textField] }}\n      </ng-container>\n    </ng-container>\n    <a \n      #activeElement\n      *ngIf=\"node[childrenField] && node[childrenField].length > 0\"\n      class=\"treeview-category\"\n      role=\"button\"\n      [ngClass]=\"{'d-flex': selectable, 'treeview-disabled': node.disabled || disabled }\"\n      (click)=\"node.collapsed = node.collapsed === undefined ? false : !node.collapsed; setActive($event.currentTarget, false)\"\n    >\n      <span aria-label=\"toggle\">\n        <i\n          tabindex=\"1\"\n          [ngClass]=\"node.icon ? !selectable? node.icon : '' : 'fas fa-angle-right'\"\n          [ngStyle]=\"{'transform': node.collapsed === false ? 'rotate(' + rotationAngle + 'deg)' : 'rotate(0deg)'}\"\n          class=\"mx-1\"\n        ></i>\n      </span>\n      <ng-container *ngIf=\"selectable\" >\n        <ng-container *ngTemplateOutlet=\"checkboxTemplate; context: { $implicit: node, idx: idx + '_' + n, disabled: node.disabled || disabled }\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!selectable\">\n        {{ node[textField] }}\n      </ng-container>\n    </a>\n    <ul \n      id=\"collapse-{{node.expandId}}-{{idx + '_' + n}}\"\n      mdbCollapse\n      [collapsed]=\"node.collapsed === false ? false : true\"\n      role=\"tree\"\n      [ngClass]=\"{'treeview-line': line}\"\n    >\n      <ng-container *ngTemplateOutlet=\"tree; context: { $implicit: node[childrenField], idx: idx + '_' + n, disabled: node.disabled || disabled }\"></ng-container>\n    </ul>\n  </li>\n</ng-template>\n\n<!-- selectable -->\n<ng-template #checkboxTemplate let-node let-idx=\"idx\" let-disabled=\"disabled\">\n  <div class=\"form-check\">\n    <input\n      mdbCheckbox\n      class=\"form-check-input\"\n      type=\"checkbox\"\n      value=\"\"\n      id=\"{{generateUid() + idx}}\"\n      [disabled]=\"disabled\"\n      (click)=\"_handleCheckboxClick($event.target, $event.target.checked, node); $event.stopPropagation()\"\n      (change)=\"_checkboxChange($event.target, node)\"\n      [checked]=\"node[checkedField]\"\n    />\n    <label class=\"form-check-label\" for=\"{{generateUid() + idx}}\">\n      <i\n        *ngIf=\"node.icon\"\n        [ngClass]=\"node.icon\"\n        [ngStyle]=\"{'transform': node.collapsed === false ? 'rotate(' + rotationAngle + 'deg)' : 'rotate(0deg)'}\"\n        ></i>\n      {{ node[textField] }}\n    </label>\n  </div>\n</ng-template>\n\n<!-- first nodes -->\n<div class=\"treeview treeview-{{color}}\">\n  <ul role=\"tree\">\n    <ng-container *ngTemplateOutlet=\"tree; context: { $implicit: nodes, idx: 1 }\"></ng-container>\n  </ul>\n</div>\n\n" }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { activeElement: [{
                type: ViewChildren,
                args: ['activeElement']
            }], nodes: [{
                type: Input
            }], textField: [{
                type: Input
            }], childrenField: [{
                type: Input
            }], checkedField: [{
                type: Input
            }], selectable: [{
                type: Input
            }], checkboxesField: [{
                type: Input
            }], accordion: [{
                type: Input
            }], openOnClick: [{
                type: Input
            }], line: [{
                type: Input
            }], color: [{
                type: Input
            }], rotationAngle: [{
                type: Input
            }], selected: [{
                type: Output
            }], activeItemChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,