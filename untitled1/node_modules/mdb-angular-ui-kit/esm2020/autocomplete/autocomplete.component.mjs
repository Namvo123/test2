import { Component, ContentChildren, EventEmitter, Input, Output, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, } from '@angular/core';
import { MdbOptionComponent, MDB_OPTION_PARENT } from 'mdb-angular-ui-kit/option';
import { Subject } from 'rxjs';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { dropdownAnimation, dropdownContainerAnimation } from './autocomplete.animations';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class MdbAutocompleteComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this._optionHeight = 38;
        // Equal to 5 * optionHeight (which is 38px by default)
        this._listHeight = 190;
        this.selected = new EventEmitter();
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        this._destroy$ = new Subject();
        this._isOpen = false;
        this.showNoResultText = false;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get optionHeight() {
        return this._optionHeight;
    }
    set optionHeight(value) {
        if (value !== 0) {
            this._optionHeight = value;
        }
    }
    get listHeight() {
        return this._listHeight;
    }
    set listHeight(value) {
        if (value !== 0) {
            this._listHeight = value;
        }
    }
    _getOptionsArray() {
        return this.options.toArray();
    }
    get isOpen() {
        return this._isOpen;
    }
    _getScrollTop() {
        return this.dropdown ? this.dropdown.nativeElement.scrollTop : 0;
    }
    _setScrollTop(scrollPosition) {
        if (this.dropdown) {
            this.dropdown.nativeElement.scrollTop = scrollPosition;
        }
    }
    _markForCheck() {
        this._cdRef.markForCheck();
    }
    ngAfterContentInit() {
        this._keyManager = new ActiveDescendantKeyManager(this.options);
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
}
MdbAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbAutocompleteComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MdbAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbAutocompleteComponent, selector: "mdb-autocomplete", inputs: { disabled: "disabled", optionHeight: "optionHeight", listHeight: "listHeight", displayValue: "displayValue" }, outputs: { selected: "selected", opened: "opened", closed: "closed" }, providers: [{ provide: MDB_OPTION_PARENT, useExisting: MdbAutocompleteComponent }], queries: [{ propertyName: "options", predicate: MdbOptionComponent, descendants: true }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: ["dropdown"], descendants: true }, { propertyName: "dropdownTemplate", first: true, predicate: ["dropdownTemplate"], descendants: true, static: true }], exportAs: ["mdbAutocomplete"], ngImport: i0, template: "<ng-template #dropdownTemplate>\n  <div [@dropdownContainerAnimation] class=\"autocomplete-dropdown-container\">\n    <div [@dropdownAnimation] role=\"listbox\" class=\"autocomplete-dropdown\">\n      <div\n        #dropdown\n        class=\"autocomplete-items-list\"\n        [ngStyle]=\"{\n          'max-height.px': listHeight\n        }\"\n      >\n        <ng-content></ng-content>\n      </div>\n      <ng-content select=\".autocomplete-no-results\"></ng-content>\n      <ng-content select=\".autocomplete-custom-content\"></ng-content>\n    </div>\n  </div>\n</ng-template>\n", directives: [{ type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], animations: [dropdownAnimation, dropdownContainerAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'mdbAutocomplete', animations: [dropdownAnimation, dropdownContainerAnimation], providers: [{ provide: MDB_OPTION_PARENT, useExisting: MdbAutocompleteComponent }], template: "<ng-template #dropdownTemplate>\n  <div [@dropdownContainerAnimation] class=\"autocomplete-dropdown-container\">\n    <div [@dropdownAnimation] role=\"listbox\" class=\"autocomplete-dropdown\">\n      <div\n        #dropdown\n        class=\"autocomplete-items-list\"\n        [ngStyle]=\"{\n          'max-height.px': listHeight\n        }\"\n      >\n        <ng-content></ng-content>\n      </div>\n      <ng-content select=\".autocomplete-no-results\"></ng-content>\n      <ng-content select=\".autocomplete-custom-content\"></ng-content>\n    </div>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { options: [{
                type: ContentChildren,
                args: [MdbOptionComponent, { descendants: true }]
            }], dropdown: [{
                type: ViewChild,
                args: ['dropdown', { static: false }]
            }], dropdownTemplate: [{
                type: ViewChild,
                args: ['dropdownTemplate', { static: true }]
            }], disabled: [{
                type: Input
            }], optionHeight: [{
                type: Input
            }], listHeight: [{
                type: Input
            }], displayValue: [{
                type: Input
            }], selected: [{
                type: Output
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,