import { Component, ContentChildren, Input, ViewChild, ViewChildren, Output, EventEmitter, ChangeDetectionStrategy, } from '@angular/core';
import { MdbStepComponent } from './step.component';
import { FormControl } from '@angular/forms';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { horizontalAnimation, verticalAnimation } from './stepper-animations';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/portal";
export class MdbStepperComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this.orientation = 'horizontal';
        this._linear = false;
        this._mobile = false;
        this.mobileBarBreakpoint = 4;
        this._markAsCompleted = true;
        this.stepChange = new EventEmitter();
        this._destroy = new Subject();
    }
    get linear() {
        return this._linear;
    }
    set linear(value) {
        this._linear = coerceBooleanProperty(value);
    }
    get mobile() {
        return this._mobile;
    }
    set mobile(value) {
        this._mobile = coerceBooleanProperty(value);
    }
    get markAsCompleted() {
        return this._markAsCompleted;
    }
    set markAsCompleted(value) {
        this._markAsCompleted = coerceBooleanProperty(value);
    }
    get allStepsNumber() {
        return this.steps.length;
    }
    getProgressBarWidth() {
        return ((this.activeStepIndex + 1) / this.steps.length) * 100;
    }
    get activeStepIndex() {
        return this._activeStepIndex;
    }
    set activeStepIndex(value) {
        this._activeStepIndex = value;
    }
    _isStepValid(step) {
        if (!step.stepForm) {
            return true;
        }
        if (step.stepForm && step.stepForm.valid) {
            return true;
        }
        return false;
    }
    getAnimationState(index) {
        const nextElPosition = index - this.activeStepIndex;
        if (nextElPosition < 0) {
            return 'previous';
        }
        else if (nextElPosition > 0) {
            return 'next';
        }
        return 'current';
    }
    _getStepByIndex(index) {
        return this.steps.toArray()[index];
    }
    next() {
        if (this.activeStepIndex < this.steps.length - 1) {
            this.setNewActiveStep(this.activeStepIndex + 1);
            this._cdRef.markForCheck();
        }
    }
    previous() {
        if (this.activeStepIndex > 0) {
            this.setNewActiveStep(this.activeStepIndex - 1);
            this._cdRef.markForCheck();
        }
    }
    submit() {
        if (this.linear) {
            this._markCurrentAsDone();
            this._cdRef.markForCheck();
        }
    }
    setNewActiveStep(index) {
        setTimeout(() => {
            const currentStep = this._activeStep;
            const currentStepIndex = this._activeStepIndex;
            const newStep = this._getStepByIndex(index);
            const newStepIndex = this.steps
                .toArray()
                .findIndex((step) => step === newStep);
            if (this.linear && !this._isNewStepLinear(index)) {
                return;
            }
            if (newStepIndex < this._activeStepIndex && !newStep.editable) {
                return;
            }
            this._removeStepValidationClasses(newStep);
            if (this.linear && index > this.activeStepIndex) {
                if (this._isStepValid(this._activeStep) || currentStep.optional) {
                    this._markCurrentAsDone();
                    this._removeCurrentActiveStep();
                    this._setActiveStep(index);
                    this.stepChange.emit({
                        activeStep: newStep,
                        activeStepIndex: newStepIndex,
                        previousStep: currentStep,
                        previousStepIndex: currentStepIndex,
                    });
                }
                else {
                    this._markCurrentAsWrong();
                    this._markStepControlsAsDirty(this._activeStep);
                }
            }
            else {
                if (index < this.activeStepIndex) {
                    this._removeStepValidationClasses(this._activeStep);
                }
                this._removeCurrentActiveStep();
                this._markCurrentAsDone();
                this._setActiveStep(index);
                this.stepChange.emit({
                    activeStep: newStep,
                    activeStepIndex: newStepIndex,
                    previousStep: currentStep,
                    previousStepIndex: currentStepIndex,
                });
            }
        }, 0);
    }
    _markCurrentAsDone() {
        this._activeStep.isCompleted = true;
        this._activeStep.isInvalid = false;
    }
    _markCurrentAsWrong() {
        this._activeStep.isInvalid = true;
        this._activeStep.isCompleted = false;
    }
    _markStepControlsAsDirty(step) {
        const controls = step.stepForm.controls;
        if (step.stepForm.controls) {
            const keys = Object.keys(controls);
            // tslint:disable-next-line: prefer-for-of
            for (let i = 0; i < keys.length; i++) {
                const control = controls[keys[i]];
                if (control instanceof FormControl) {
                    control.markAsTouched();
                }
            }
        }
    }
    _removeStepValidationClasses(step) {
        step.isCompleted = false;
        step.isInvalid = false;
    }
    _isNewStepLinear(newStepIndex) {
        return this.activeStepIndex - newStepIndex === 1 || this.activeStepIndex - newStepIndex === -1;
    }
    _setActiveStep(index) {
        this.steps.toArray()[index].isActive = true;
        this.activeStepIndex = index;
        this._activeStep = this._getStepByIndex(this.activeStepIndex);
        this._cdRef.markForCheck();
    }
    _removeCurrentActiveStep() {
        const currentActiveStep = this.steps.find((activeStep) => activeStep.isActive);
        if (currentActiveStep) {
            currentActiveStep.isActive = false;
        }
    }
    resetAll() {
        this.steps.forEach((step) => {
            step.reset();
            this._setActiveStep(0);
            this._cdRef.markForCheck();
        });
    }
    ngAfterContentInit() {
        this._setActiveStep(0);
        // tslint:disable-next-line: deprecation
        this.steps.changes.pipe(takeUntil(this._destroy)).subscribe(() => this._cdRef.markForCheck());
        merge(...this.steps.map((step) => step._onChanges))
            .pipe(takeUntil(this._destroy))
            // tslint:disable-next-line: deprecation
            .subscribe((_) => this._cdRef.markForCheck());
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
    }
}
MdbStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStepperComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MdbStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.7", type: MdbStepperComponent, selector: "mdb-stepper", inputs: { orientation: "orientation", linear: "linear", mobile: "mobile", mobileBarBreakpoint: "mobileBarBreakpoint", markAsCompleted: "markAsCompleted" }, outputs: { stepChange: "stepChange" }, queries: [{ propertyName: "steps", predicate: MdbStepComponent }], viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, static: true }, { propertyName: "stepTitles", predicate: ["stepTitle"], descendants: true }, { propertyName: "stepContents", predicate: ["stepContent"], descendants: true }], exportAs: ["mdbStepper"], ngImport: i0, template: "<ng-container [ngSwitch]=\"orientation\">\n  <ng-container *ngSwitchCase=\"'horizontal'\">\n    <div *ngIf=\"mobile\" class=\"stepper-mobile-head bg-light\">\n      Step {{ activeStepIndex + 1 }} of {{ allStepsNumber }}\n    </div>\n    <ul\n      class=\"stepper stepper-horizontal\"\n      [ngClass]=\"{\n        'stepper-mobile': mobile,\n        'stepper-progress-bar': mobile && steps.length > mobileBarBreakpoint\n      }\"\n    >\n      <li\n        [ngClass]=\"{\n          'stepper-active': step.isActive,\n          'stepper-completed': step.isCompleted,\n          'stepper-invalid': step.isInvalid\n        }\"\n        class=\"stepper-step\"\n        *ngFor=\"let step of steps; let i = index\"\n      >\n        <div class=\"stepper-head\" (click)=\"setNewActiveStep(i)\">\n          <span class=\"stepper-head-icon\">\n            <ng-container *ngIf=\"!step.icon\">{{ i + 1 }}</ng-container>\n            <ng-template [ngIf]=\"step.icon\">\n              <ng-template [cdkPortalOutlet]=\"step.icon\"></ng-template>\n            </ng-template>\n          </span>\n          <span class=\"stepper-head-text\">{{ step.name }}</span>\n        </div>\n      </li>\n    </ul>\n    <div class=\"stepper-horizontal-content-container\">\n      <ng-container *ngFor=\"let step of steps; let i = index\">\n        <div\n          class=\"stepper-content\"\n          [attr.aria-expanded]=\"activeStepIndex === i\"\n          [@horizontalAnimation]=\"getAnimationState(i)\"\n        >\n          <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n        </div>\n      </ng-container>\n    </div>\n    <div *ngIf=\"mobile\" class=\"stepper-mobile-footer bg-light\">\n      <div class=\"stepper-back-btn\">\n        <button (click)=\"previous()\" type=\"button\" class=\"btn btn-link\">\n          <i class=\"fas fa-chevron-left\"></i>Back\n        </button>\n      </div>\n      <div *ngIf=\"steps.length > mobileBarBreakpoint\" class=\"stepper-mobile-progress gray-500\">\n        <div\n          class=\"stepper-mobile-progress-bar bg-primary\"\n          [style.width.%]=\"getProgressBarWidth()\"\n        ></div>\n      </div>\n      <div class=\"stepper-next-btn\">\n        <button (click)=\"next()\" type=\"button\" class=\"btn btn-link\">\n          Next<i class=\"fas fa-chevron-right\"></i>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'vertical'\">\n    <ul class=\"stepper stepper-vertical\">\n      <li\n        [ngClass]=\"{\n          'stepper-active': step.isActive,\n          'stepper-completed': step.isCompleted,\n          'stepper-invalid': step.isInvalid\n        }\"\n        class=\"stepper-step\"\n        *ngFor=\"let step of steps; let i = index\"\n      >\n        <div class=\"stepper-head\" (click)=\"setNewActiveStep(i)\">\n          <span class=\"stepper-head-icon\">\n            <ng-container *ngIf=\"!step.icon\">{{ i + 1 }}</ng-container>\n            <ng-template [ngIf]=\"step.icon\">\n              <ng-template [cdkPortalOutlet]=\"step.icon\"></ng-template>\n            </ng-template>\n          </span>\n          <span class=\"stepper-head-text\">{{ step.name }}</span>\n        </div>\n        <div class=\"stepper-vertical-content-container\" [@verticalAnimation]=\"getAnimationState(i)\">\n          <div class=\"stepper-content\">\n            <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </ng-container>\n</ng-container>\n", directives: [{ type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], animations: [horizontalAnimation, verticalAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbStepperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-stepper', exportAs: 'mdbStepper', animations: [horizontalAnimation, verticalAnimation], changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [ngSwitch]=\"orientation\">\n  <ng-container *ngSwitchCase=\"'horizontal'\">\n    <div *ngIf=\"mobile\" class=\"stepper-mobile-head bg-light\">\n      Step {{ activeStepIndex + 1 }} of {{ allStepsNumber }}\n    </div>\n    <ul\n      class=\"stepper stepper-horizontal\"\n      [ngClass]=\"{\n        'stepper-mobile': mobile,\n        'stepper-progress-bar': mobile && steps.length > mobileBarBreakpoint\n      }\"\n    >\n      <li\n        [ngClass]=\"{\n          'stepper-active': step.isActive,\n          'stepper-completed': step.isCompleted,\n          'stepper-invalid': step.isInvalid\n        }\"\n        class=\"stepper-step\"\n        *ngFor=\"let step of steps; let i = index\"\n      >\n        <div class=\"stepper-head\" (click)=\"setNewActiveStep(i)\">\n          <span class=\"stepper-head-icon\">\n            <ng-container *ngIf=\"!step.icon\">{{ i + 1 }}</ng-container>\n            <ng-template [ngIf]=\"step.icon\">\n              <ng-template [cdkPortalOutlet]=\"step.icon\"></ng-template>\n            </ng-template>\n          </span>\n          <span class=\"stepper-head-text\">{{ step.name }}</span>\n        </div>\n      </li>\n    </ul>\n    <div class=\"stepper-horizontal-content-container\">\n      <ng-container *ngFor=\"let step of steps; let i = index\">\n        <div\n          class=\"stepper-content\"\n          [attr.aria-expanded]=\"activeStepIndex === i\"\n          [@horizontalAnimation]=\"getAnimationState(i)\"\n        >\n          <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n        </div>\n      </ng-container>\n    </div>\n    <div *ngIf=\"mobile\" class=\"stepper-mobile-footer bg-light\">\n      <div class=\"stepper-back-btn\">\n        <button (click)=\"previous()\" type=\"button\" class=\"btn btn-link\">\n          <i class=\"fas fa-chevron-left\"></i>Back\n        </button>\n      </div>\n      <div *ngIf=\"steps.length > mobileBarBreakpoint\" class=\"stepper-mobile-progress gray-500\">\n        <div\n          class=\"stepper-mobile-progress-bar bg-primary\"\n          [style.width.%]=\"getProgressBarWidth()\"\n        ></div>\n      </div>\n      <div class=\"stepper-next-btn\">\n        <button (click)=\"next()\" type=\"button\" class=\"btn btn-link\">\n          Next<i class=\"fas fa-chevron-right\"></i>\n        </button>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'vertical'\">\n    <ul class=\"stepper stepper-vertical\">\n      <li\n        [ngClass]=\"{\n          'stepper-active': step.isActive,\n          'stepper-completed': step.isCompleted,\n          'stepper-invalid': step.isInvalid\n        }\"\n        class=\"stepper-step\"\n        *ngFor=\"let step of steps; let i = index\"\n      >\n        <div class=\"stepper-head\" (click)=\"setNewActiveStep(i)\">\n          <span class=\"stepper-head-icon\">\n            <ng-container *ngIf=\"!step.icon\">{{ i + 1 }}</ng-container>\n            <ng-template [ngIf]=\"step.icon\">\n              <ng-template [cdkPortalOutlet]=\"step.icon\"></ng-template>\n            </ng-template>\n          </span>\n          <span class=\"stepper-head-text\">{{ step.name }}</span>\n        </div>\n        <div class=\"stepper-vertical-content-container\" [@verticalAnimation]=\"getAnimationState(i)\">\n          <div class=\"stepper-content\">\n            <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n          </div>\n        </div>\n      </li>\n    </ul>\n  </ng-container>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { steps: [{
                type: ContentChildren,
                args: [MdbStepComponent]
            }], stepTitles: [{
                type: ViewChildren,
                args: ['stepTitle']
            }], stepContents: [{
                type: ViewChildren,
                args: ['stepContent']
            }], container: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }], orientation: [{
                type: Input
            }], linear: [{
                type: Input
            }], mobile: [{
                type: Input
            }], mobileBarBreakpoint: [{
                type: Input
            }], markAsCompleted: [{
                type: Input
            }], stepChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,