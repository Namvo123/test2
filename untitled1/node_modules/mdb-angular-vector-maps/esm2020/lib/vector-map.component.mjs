import { TemplatePortal } from '@angular/cdk/portal';
import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { maps } from './maps';
import { Pinch } from './pinch';
import { getDisplacement, getElementCenter, getEventCoordinates, getVector, parseToHTML, } from './utilts';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/common";
import * as i3 from "mdb-angular-ui-kit/tooltip";
const TOOLTIP_OFFSET_X = -25;
const TOOLTIP_OFFSET_Y = 20;
export class MdbVectorMapComponent {
    constructor(_elementRef, _overlay, _vcr, _zone) {
        this._elementRef = _elementRef;
        this._overlay = _overlay;
        this._vcr = _vcr;
        this._zone = _zone;
        this.btnClass = 'btn-dark';
        this._colorMap = [];
        this.fill = '#E0E0E0';
        this.fillOpacity = 1;
        this.hover = true;
        this.hoverFill = '#BDBDBD';
        this._map = 'world';
        this._markers = [];
        this.markerFill = '#757575';
        this.markerStroke = '#000';
        this.markerInnerFill = 'rgba(0, 0, 0, 0.3)';
        this.markerStrokeWidth = 1.2;
        this.readonly = false;
        this.scale = 1;
        this.selectFill = '#B23CFD';
        this.selectRegion = null;
        this.stroke = '#000';
        this.strokeLinejoin = 'round';
        this.strokeOpacity = 1;
        this.strokeWidth = 0.5;
        this.tooltips = true;
        this.zoomEvents = true;
        this.zoomMin = 1;
        this.zoomStep = 0.5;
        this.selected = new EventEmitter();
        this.markerClick = new EventEmitter();
        this._mapViewBox = null;
        this._componentInitialized = false;
        this._origin = { x: 0, y: 0 };
        this._x = 0;
        this._y = 0;
        this._prevPosition = null;
        this._mouseDownHandler = this._handleDragStart.bind(this);
        this._mouseMoveHandler = this._handleDragMove.bind(this);
        this._mouseEndHandler = this._handleDragEnd.bind(this);
        this._touchStartHandler = this._handleTouchStart.bind(this);
        this._touchMoveHandler = this._handleTouchMove.bind(this);
        this._touchEndHandler = this._handleTouchEnd.bind(this);
        this._wheelEventSubscription = null;
        this._pinchEventSubscription = null;
        this._zoomInButtonDisabled = false;
        this._zoomOutButtonDisabled = false;
        this._pins = [];
        this._bullets = [];
        this._overlayRef = null;
        this._currentTooltipTitle = '';
        this._currentTooltipContent = '';
    }
    get colorMap() {
        return this._colorMap;
    }
    set colorMap(colorMap) {
        this._colorMap = colorMap;
        if (this._componentInitialized) {
            this._setupUnitsParameters();
        }
    }
    get map() {
        return this._map;
    }
    set map(value) {
        this._map = value;
        if (this._componentInitialized) {
            this._updateMap();
        }
    }
    get markers() {
        return this._markers;
    }
    set markers(value) {
        this._markers = value;
        if (this._componentInitialized) {
            this._setupMarkers();
        }
    }
    get _dragging() {
        return this._prevPosition !== null;
    }
    ngOnInit() {
        this._componentInitialized = true;
        this._initMap();
        if (this.selectedRegion) {
            this.select(this.selectedRegion);
        }
    }
    _setupDragEvents() {
        this.svgElement.nativeElement.addEventListener('mousedown', this._mouseDownHandler);
        document.addEventListener('mouseup', this._mouseEndHandler);
        this.svgElement.nativeElement.addEventListener('touchstart', this._touchStartHandler);
        document.addEventListener('touchend', this._touchEndHandler);
    }
    _initMap() {
        this._scale = this.scale;
        if (!this.customMapContent) {
            this._renderMap(this.map);
        }
        else {
            this.mapContentTemplate.nativeElement.innerHTML = this.customMapContent.innerHTML;
            this.customMapContent.parentNode.removeChild(this.customMapContent);
        }
        this._cacheRectPositions();
        this._mapUnits = this._getMapUnits();
        this._setupUnitsParameters();
        this._setupUnitsEvents();
        this._setupMapPosition();
        this._setupMarkers();
        this._toggleZoomBtns();
        if (this.zoomEvents) {
            this._pinch = new Pinch(this.svgElement.nativeElement);
            this._pinch.init();
            this._setupWheelEvent();
            this._setupPinchEvent();
        }
        this._setupDragEvents();
    }
    _updateMap() {
        this._removeEvents();
        if (this.mapContentTemplate) {
            // this.mapContentTemplate.nativeElement.innerHTML = '';
        }
        this._initMap();
    }
    _renderMap(name) {
        const map = maps[name];
        if (!map) {
            throw new TypeError(`Map "${name}" is not available`);
        }
        const mapNode = parseToHTML(map).querySelector('svg');
        this._mapViewBox = mapNode.getAttribute('viewBox');
        this.mapContentTemplate.nativeElement.innerHTML = mapNode.innerHTML;
    }
    _cacheRectPositions() {
        this._elementRect = this.wrapper.nativeElement.getBoundingClientRect();
        this._mapRect = this.svgElement.nativeElement.getBoundingClientRect();
    }
    _getMapUnits() {
        return Array.from(this.svgElement.nativeElement.querySelectorAll('path')).map((path) => {
            const id = path.getAttribute('id');
            const title = path.getAttribute('title') || path.getAttribute('name');
            const d = path.getAttribute('d');
            const fill = path.getAttribute('fill');
            return {
                element: path,
                d,
                id,
                title,
                fill,
                selected: false,
                tooltip: '',
            };
        });
    }
    _setupUnitsParameters() {
        this._mapUnits.forEach((unit) => {
            unit.fill = null;
            unit.element.removeAttribute('fill');
        });
        if (!this.colorMap.length) {
            return;
        }
        this.colorMap.forEach((map) => {
            map.regions.forEach((region) => {
                const tooltip = region.tooltip || '';
                const unit = this._mapUnits.find((unit) => {
                    if (typeof region === 'string') {
                        return unit.id === region;
                    }
                    return unit.id === region.id;
                });
                if (!unit) {
                    return;
                }
                unit.fill = map.fill;
                unit.tooltip = tooltip;
                if (!unit.selected) {
                    unit.element.setAttribute('fill', unit.fill);
                }
            });
        });
    }
    _setupUnitsEvents() {
        this._mapUnits.forEach((unit) => {
            if (!this.readonly) {
                unit.element.addEventListener('click', () => this._handleUnitSelection(unit));
            }
            if (this.hover || this.tooltips) {
                unit.element.addEventListener('mouseover', (event) => this._handleUnitMouseover(event, unit));
                unit.element.addEventListener('mouseout', () => this._handleUnitMouseout(unit));
            }
        });
    }
    _setupMapPosition() {
        this._origin = getElementCenter(this._mapRect);
        this._updateTransformOrigin();
        this._setInitialMapPosition();
        this._updateMapTransform();
    }
    _setupMarkers() {
        const pins = [];
        const bullets = [];
        this.markers.forEach((marker) => {
            if (marker.type === 'pin') {
                const pin = this._getPin(marker);
                pins.push(pin);
            }
            if (marker.type === 'bullet') {
                const bullet = this._getBullet(marker);
                bullets.push(bullet);
            }
        });
        this._pins = [...pins];
        this._bullets = [...bullets];
    }
    _getPin(pin) {
        const innerRadius = (14 / this._scale) * 0.5;
        return {
            label: pin.label,
            x: pin.x,
            y: pin.y,
            d: this._getPinPath(pin.x, pin.y),
            radius: innerRadius / 2,
            innerRadius: innerRadius,
            innerY: pin.y - 54 / 2,
            circleFill: 'rgba(0, 0, 0, 0.2)',
            strokeWidth: pin.strokeWidth || this.strokeWidth,
            fill: pin.fill || this.markerFill,
            innerFill: pin.innerFill || this.markerInnerFill,
        };
    }
    _getPinPath(x, y) {
        const height = 40;
        const radius = 14;
        const dyAC = height - radius;
        const alpha = Math.acos(radius / dyAC);
        const deltaX = radius * Math.sin(alpha);
        const deltaY = (height * (height - radius * 2)) / dyAC;
        return `M ${x},${y} l ${-deltaX},${-deltaY} A ${radius} ${radius} 1 1 1 ${x + deltaX},${y - deltaY} l 0,0 z`;
    }
    _getBullet(bullet) {
        const radius = bullet.radius || 5;
        return {
            label: bullet.label,
            radius: radius,
            strokeWidth: 0,
            fill: bullet.fill,
            x: bullet.x,
            y: bullet.y,
            opacity: 0.3,
            innerOpacity: 1,
        };
    }
    _setupWheelEvent() {
        this._zone.runOutsideAngular(() => {
            fromEvent(this._elementRef.nativeElement, 'wheel').subscribe((event) => {
                event.preventDefault();
                const mousePosition = getEventCoordinates(event);
                const direction = event.deltaY < 0 ? 1 : -1;
                const factor = direction * this.zoomStep;
                if (!this._allowZoom(factor)) {
                    return;
                }
                this._origin = this._getOrigin(mousePosition);
                this._updateTransformOrigin();
                this._setInitialMapPosition();
                this._updateMapTransform();
                this._zone.run(() => {
                    this._zoom(factor);
                });
            });
        });
    }
    _setupPinchEvent() {
        fromEvent(this._elementRef.nativeElement, 'pinch').subscribe((event) => {
            event.preventDefault();
            const factor = this._scale * (event.ratio - 1);
            if (!this._allowZoom(factor)) {
                return;
            }
            this._origin = this._getOrigin(event.origin);
            this._updateTransformOrigin();
            this._setInitialMapPosition();
            this._updateMapTransform();
            this._zoom(factor);
        });
    }
    _handlePinch(event) {
        const factor = this._scale * (event.overallVelocity + 1);
        if (!this._allowZoom(factor)) {
            return;
        }
        this._origin = this._getOrigin(event.target);
        this._updateTransformOrigin();
        this._setInitialMapPosition();
        this._updateMapTransform();
        this._zoom(factor);
    }
    _allowZoom(factor) {
        return (!(this._scale === this.zoomMax && factor > 0) && !(this._scale === this.zoomMin && factor < 0));
    }
    _getOrigin(point) {
        const rect = this.svgElement.nativeElement.getBoundingClientRect();
        const position = {
            x: (point.x - rect.x) / this._scale,
            y: (point.y - rect.y) / this._scale,
        };
        const dx = (position.x - this._origin.x - this._x) / this._scale;
        const dy = (position.y - this._origin.y - this._y) / this._scale;
        const origin = {
            x: this._origin.x + dx,
            y: this._origin.y + dy,
        };
        return origin;
    }
    _updateTransformOrigin() {
        this.svgElement.nativeElement.style.transformOrigin = `${this._origin.x}px ${this._origin.y}px`;
    }
    _updateMapTransform() {
        this.svgElement.nativeElement.style.transform = `matrix(${this._scale}, 0, 0, ${this._scale}, ${this._x}, ${this._y})`;
    }
    _zoom(factor) {
        const value = this._scale + factor;
        if (value <= this.zoomMin) {
            this._scale = this.zoomMin;
            this._origin = this._getValueInMapBoundry(getElementCenter(this._elementRect));
            this._updateTransformOrigin();
            this._updateMapTransform();
            this._setInitialMapPosition();
        }
        else if (this.zoomMax !== null && value >= this.zoomMax) {
            this._scale = this.zoomMax;
        }
        else {
            this._scale = value;
        }
        this._toggleZoomBtns();
        this._updateMapTransform();
        // this._updateMarkers();
        this.svgElement.nativeElement.style.strokeWidth = this.strokeWidth / this._scale;
    }
    _getValueInMapBoundry({ x, y }) {
        this._cacheRectPositions();
        const margins = this._getMapMargins();
        let xPosition = this._x;
        let yPosition = this._y;
        if ((x < 0 && margins.right > 0) || (x > 0 && margins.left > 0)) {
            xPosition += x;
        }
        if ((y > 0 && margins.top > 0) || (y < 0 && margins.bottom > 0)) {
            yPosition += y;
        }
        return {
            x: xPosition,
            y: yPosition,
        };
    }
    _getMapMargins() {
        return {
            left: this._elementRect.left - this._mapRect.left,
            top: this._elementRect.top - this._mapRect.top,
            right: this._mapRect.right - this._elementRect.right,
            bottom: this._mapRect.bottom - this._elementRect.bottom,
        };
    }
    select(region) {
        const correspondingUnit = this._mapUnits.find((unit) => unit.id === region);
        if (correspondingUnit) {
            this._selectUnit(correspondingUnit);
        }
    }
    _setInitialMapPosition() {
        this._x = 0;
        this._y = 0;
    }
    _toggleZoomBtns() {
        if (this._scale === this.zoomMin) {
            this._zoomOutButtonDisabled = true;
        }
        else {
            this._zoomOutButtonDisabled = false;
        }
        if (this._scale === this.zoomMax) {
            this._zoomInButtonDisabled = true;
        }
        else {
            this._zoomInButtonDisabled = false;
        }
    }
    _selectUnit(unit) {
        const selection = this._currentSelectedUnit;
        if (selection) {
            selection.selected = false;
            if (selection.fill) {
                selection.element.setAttribute('fill', selection.fill);
            }
            else {
                selection.element.removeAttribute('fill');
            }
        }
        unit.selected = true;
        unit.element.setAttribute('fill', this.selectFill);
        this._currentSelectedUnit = unit;
    }
    _handleUnitSelection(unit) {
        this._selectUnit(unit);
        this.selected.emit(unit);
    }
    _handleUnitMouseover(event, unit) {
        if (this._dragging) {
            return;
        }
        if (this.hover) {
            unit.element.setAttribute('fill', this.hoverFill);
        }
        if (this.tooltips) {
            this._currentTooltipTitle = unit.title;
            this._currentTooltipContent = unit.tooltip !== '' ? unit.tooltip : null;
            this._showUnitTooltip(event, unit);
        }
    }
    _handleUnitMouseout(unit) {
        if (this.hover) {
            if (unit.selected) {
                unit.element.setAttribute('fill', this.selectFill);
            }
            else if (unit.fill) {
                unit.element.setAttribute('fill', unit.fill);
            }
            else {
                unit.element.removeAttribute('fill');
            }
        }
        if (this.tooltips) {
            this._hideUnitTooltip();
        }
    }
    _showUnitTooltip(event, unit) {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        this._portal = new TemplatePortal(this.tooltipTemplate, this._vcr);
        this._overlayRef = this._overlay.create({
            positionStrategy: this._getOverlayPosition(event),
            panelClass: 'vector-map-pane',
        });
        this._overlayRef.attach(this._portal);
        const ref = this._overlayRef;
        this._zone.runOutsideAngular(() => {
            fromEvent(unit.element, 'mousemove')
                .pipe(takeUntil(ref.detachments()))
                .subscribe((event) => {
                const positionStrategy = this._overlay
                    .position()
                    .global()
                    .left(event.clientX + TOOLTIP_OFFSET_X + 'px')
                    .top(event.clientY + TOOLTIP_OFFSET_Y + 'px');
                this._overlayRef.updatePositionStrategy(positionStrategy);
            });
        });
    }
    _hideUnitTooltip() {
        if (this._overlayRef) {
            this._overlayRef.detach();
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    _getOverlayPosition(event) {
        const x = event.clientX + 'px';
        const y = event.clientY + 'px';
        const positionStrategy = this._overlay.position().global().left(x).top(y);
        return positionStrategy;
    }
    _handleDragStart(event) {
        if ((event.touches && event.touches.length > 1) || event.button === 2) {
            return;
        }
        this._prevPosition = getEventCoordinates(event);
        this.wrapper.nativeElement.classList.add('dragged');
        this._zone.runOutsideAngular(() => {
            document.addEventListener('mousemove', this._mouseMoveHandler);
        });
    }
    _handleDragMove(event) {
        if (event.touches && event.touches.length > 1) {
            return;
        }
        if (!this._prevPosition) {
            return;
        }
        event.preventDefault();
        const mousePosition = getEventCoordinates(event);
        const displacement = this._getValueInMapBoundry(getDisplacement(mousePosition, this._prevPosition));
        this._x = displacement.x;
        this._y = displacement.y;
        this._prevPosition = mousePosition;
        this._updateMapTransform();
        // this._updateMarkerTooltips();
    }
    _handleDragEnd() {
        this._prevPosition = null;
        this.wrapper.nativeElement.classList.remove('dragged');
    }
    _handleTouchStart(event) {
        if (event.touches.length > 1) {
            this._vector = getVector(event);
            this._origin = { ...this._vector.center };
            this._updateTransformOrigin();
            return;
        }
        this._handleDragStart(event);
        this.svgElement.nativeElement.addEventListener('touchmove', this._touchMoveHandler);
    }
    _handleTouchMove(event) {
        if (event.touches.length > 1 && this._vector) {
            event.preventDefault();
            event.stopPropagation();
            const vector = getVector(event);
            const ratio = vector.length / this._vector.length;
            const scaleFactor = this._scale * (ratio - 1);
            this._zoom(scaleFactor);
            this._vector = vector;
            return;
        }
        this._handleDragMove(event);
    }
    _handleTouchEnd(event) {
        if (event.touches.length > 1) {
            this._vector = null;
            return;
        }
        this._handleDragEnd();
    }
    ngOnDestroy() {
        this._removeEvents();
        if (this._pinch) {
            this._pinch.dispose();
        }
        if (this._overlayRef) {
            this._overlayRef.detach();
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
    }
    _removeEvents() {
        if (this.svgElement) {
            this.svgElement.nativeElement.removeEventListener('mousedown', this._mouseDownHandler);
            document.removeEventListener('mousemove', this._mouseMoveHandler);
            document.removeEventListener('mouseup', this._mouseEndHandler);
            this.svgElement.nativeElement.removeEventListener('touchstart', this._touchStartHandler);
            document.removeEventListener('touchmove', this._touchMoveHandler);
            document.removeEventListener('touchend', this._touchEndHandler);
        }
        if (this._wheelEventSubscription) {
            this._wheelEventSubscription.unsubscribe();
        }
        if (this._pinchEventSubscription) {
            this._pinchEventSubscription.unsubscribe();
        }
    }
    _getAnimateValue(radius) {
        return `${radius / this._scale}; ${(radius / this._scale) * 5}; ${radius / this._scale}`;
    }
    _emitMarkerClick(type, x, y, label) {
        this.markerClick.emit({
            type: type,
            x: x,
            y: y,
            label: label,
        });
    }
}
MdbVectorMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbVectorMapComponent, deps: [{ token: i0.ElementRef }, { token: i1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
MdbVectorMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbVectorMapComponent, selector: "mdb-vector-map", inputs: { btnClass: "btnClass", colorMap: "colorMap", customMapContent: "customMapContent", viewBox: "viewBox", fill: "fill", fillOpacity: "fillOpacity", height: "height", hover: "hover", hoverFill: "hoverFill", map: "map", markers: "markers", markerFill: "markerFill", markerStroke: "markerStroke", markerInnerFill: "markerInnerFill", markerStrokeWidth: "markerStrokeWidth", readonly: "readonly", scale: "scale", selectFill: "selectFill", selectRegion: "selectRegion", stroke: "stroke", strokeLinejoin: "strokeLinejoin", strokeOpacity: "strokeOpacity", strokeWidth: "strokeWidth", selectedRegion: "selectedRegion", tooltips: "tooltips", width: "width", zoomEvents: "zoomEvents", zoomMax: "zoomMax", zoomMin: "zoomMin", zoomStep: "zoomStep" }, outputs: { selected: "selected", markerClick: "markerClick" }, viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true, static: true }, { propertyName: "svgElement", first: true, predicate: ["svgElement"], descendants: true, static: true }, { propertyName: "tooltipTemplate", first: true, predicate: ["tooltipTemplate"], descendants: true, read: TemplateRef }, { propertyName: "mapContentTemplate", first: true, predicate: ["mapContentTemplate"], descendants: true, static: true }], ngImport: i0, template: "<div #wrapper class=\"vector-map\">\n  <svg\n    [attr.viewBox]=\"_mapViewBox || viewBox\"\n    [style.fill]=\"fill\"\n    [style.fillOpacity]=\"fillOpacity\"\n    [style.stroke]=\"stroke\"\n    [style.strokeWidth]=\"strokeWidth\"\n    [style.strokeOpacity]=\"strokeOpacity\"\n    [style.strokeLinejoin]=\"strokeLinejoin\"\n    #svgElement\n  >\n    <g #mapContentTemplate></g>\n\n    <g class=\"vector-map-marker\" *ngFor=\"let pin of _pins\" [mdbTooltip]=\"pin.label\">\n      <circle\n        class=\"pin-shadow-circle\"\n        [attr.cx]=\"pin.x\"\n        [attr.cy]=\"pin.y\"\n        [attr.strokeWidth]=\"pin.strokeWidth\"\n        [attr.fill]=\"pin.circleFill\"\n        [attr.r]=\"pin.radius\"\n        (click)=\"_emitMarkerClick(pin.type, pin.x, pin.y, pin.label)\"\n      ></circle>\n      <path\n        [attr.d]=\"pin.d\"\n        [attr.fill]=\"pin.fill\"\n        [attr.stroke]=\"pin.stroke\"\n        [attr.strokeWidth]=\"pin.strokeWidth\"\n      ></path>\n      <circle\n        class=\"pin-inner-circle\"\n        [attr.cx]=\"pin.x\"\n        [attr.cy]=\"pin.innerY\"\n        [attr.stroke]=\"pin.stroke\"\n        [attr.strokeWidth]=\"pin.strokeWidth\"\n        [attr.r]=\"pin.innerRadius\"\n        [attr.fill]=\"pin.innerFill\"\n      ></circle>\n    </g>\n    <ng-container *ngFor=\"let bullet of _bullets\">\n      <circle\n        [attr.cx]=\"bullet.x\"\n        [attr.cy]=\"bullet.y\"\n        [attr.r]=\"bullet.radius / _scale\"\n        [attr.fill]=\"bullet.fill\"\n        [attr.stroke-width]=\"bullet.strokeWidth\"\n        [attr.opacity]=\"bullet.opacity\"\n        class=\"animated-circle\"\n      >\n        <animate\n          [attr.attributeName]=\"'r'\"\n          [attr.values]=\"_getAnimateValue(bullet.radius)\"\n          [attr.dur]=\"'1.5s'\"\n          [attr.repeatCount]=\"'indefinite'\"\n        ></animate>\n        <animate\n          [attr.attributeName]=\"'opacity'\"\n          [attr.values]=\"'0;0.3;0'\"\n          [attr.dur]=\"'1.5s'\"\n          [attr.repeatCount]=\"'indefinite'\"\n        ></animate>\n      </circle>\n      <circle\n        [mdbTooltip]=\"bullet.label\"\n        [attr.cx]=\"bullet.x\"\n        [attr.cy]=\"bullet.y\"\n        [attr.r]=\"bullet.radius / _scale\"\n        [attr.fill]=\"bullet.fill\"\n        [attr.stroke-width]=\"bullet.strokeWidth\"\n        [attr.opacity]=\"bullet.innerOpacity\"\n        (click)=\"_emitMarkerClick(bullet.type, bullet.x, bullet.y, bullet.label)\"\n        class=\"vector-map-marker\"\n      ></circle>\n    </ng-container>\n  </svg>\n  <div class=\"vector-map-toolbar\">\n    <button\n      class=\"btn btn-floating {{ btnClass }}\"\n      [attr.aria-label]=\"'Zoom in'\"\n      style=\"min-width: 37px\"\n      [disabled]=\"_zoomInButtonDisabled\"\n      (click)=\"_zoom(zoomStep)\"\n    >\n      <i class=\"fa fa-plus\"></i>\n    </button>\n    <button\n      class=\"btn btn-floating {{ btnClass }}\"\n      [attr.aria-label]=\"'Zoom out'\"\n      style=\"min-width: 37px\"\n      [disabled]=\"_zoomOutButtonDisabled\"\n      (click)=\"_zoom(-1 * zoomStep)\"\n    >\n      <i class=\"fa fa-minus\"></i>\n    </button>\n  </div>\n\n  <ng-template #tooltipTemplate>\n    <div class=\"vector-map-tooltip\" style=\"pointer-events: none;\">\n      <strong>{{ _currentTooltipTitle }}</strong>\n      <div *ngIf=\"_currentTooltipContent\" [innerHTML]=\"_currentTooltipContent\"></div>\n    </div>\n  </ng-template>\n</div>\n", directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.MdbTooltipDirective, selector: "[mdbTooltip]", inputs: ["mdbTooltip", "tooltipDisabled", "placement", "html", "animation", "trigger", "delayShow", "delayHide", "offset"], outputs: ["tooltipShow", "tooltipShown", "tooltipHide", "tooltipHidden"], exportAs: ["mdbTooltip"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbVectorMapComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-vector-map', template: "<div #wrapper class=\"vector-map\">\n  <svg\n    [attr.viewBox]=\"_mapViewBox || viewBox\"\n    [style.fill]=\"fill\"\n    [style.fillOpacity]=\"fillOpacity\"\n    [style.stroke]=\"stroke\"\n    [style.strokeWidth]=\"strokeWidth\"\n    [style.strokeOpacity]=\"strokeOpacity\"\n    [style.strokeLinejoin]=\"strokeLinejoin\"\n    #svgElement\n  >\n    <g #mapContentTemplate></g>\n\n    <g class=\"vector-map-marker\" *ngFor=\"let pin of _pins\" [mdbTooltip]=\"pin.label\">\n      <circle\n        class=\"pin-shadow-circle\"\n        [attr.cx]=\"pin.x\"\n        [attr.cy]=\"pin.y\"\n        [attr.strokeWidth]=\"pin.strokeWidth\"\n        [attr.fill]=\"pin.circleFill\"\n        [attr.r]=\"pin.radius\"\n        (click)=\"_emitMarkerClick(pin.type, pin.x, pin.y, pin.label)\"\n      ></circle>\n      <path\n        [attr.d]=\"pin.d\"\n        [attr.fill]=\"pin.fill\"\n        [attr.stroke]=\"pin.stroke\"\n        [attr.strokeWidth]=\"pin.strokeWidth\"\n      ></path>\n      <circle\n        class=\"pin-inner-circle\"\n        [attr.cx]=\"pin.x\"\n        [attr.cy]=\"pin.innerY\"\n        [attr.stroke]=\"pin.stroke\"\n        [attr.strokeWidth]=\"pin.strokeWidth\"\n        [attr.r]=\"pin.innerRadius\"\n        [attr.fill]=\"pin.innerFill\"\n      ></circle>\n    </g>\n    <ng-container *ngFor=\"let bullet of _bullets\">\n      <circle\n        [attr.cx]=\"bullet.x\"\n        [attr.cy]=\"bullet.y\"\n        [attr.r]=\"bullet.radius / _scale\"\n        [attr.fill]=\"bullet.fill\"\n        [attr.stroke-width]=\"bullet.strokeWidth\"\n        [attr.opacity]=\"bullet.opacity\"\n        class=\"animated-circle\"\n      >\n        <animate\n          [attr.attributeName]=\"'r'\"\n          [attr.values]=\"_getAnimateValue(bullet.radius)\"\n          [attr.dur]=\"'1.5s'\"\n          [attr.repeatCount]=\"'indefinite'\"\n        ></animate>\n        <animate\n          [attr.attributeName]=\"'opacity'\"\n          [attr.values]=\"'0;0.3;0'\"\n          [attr.dur]=\"'1.5s'\"\n          [attr.repeatCount]=\"'indefinite'\"\n        ></animate>\n      </circle>\n      <circle\n        [mdbTooltip]=\"bullet.label\"\n        [attr.cx]=\"bullet.x\"\n        [attr.cy]=\"bullet.y\"\n        [attr.r]=\"bullet.radius / _scale\"\n        [attr.fill]=\"bullet.fill\"\n        [attr.stroke-width]=\"bullet.strokeWidth\"\n        [attr.opacity]=\"bullet.innerOpacity\"\n        (click)=\"_emitMarkerClick(bullet.type, bullet.x, bullet.y, bullet.label)\"\n        class=\"vector-map-marker\"\n      ></circle>\n    </ng-container>\n  </svg>\n  <div class=\"vector-map-toolbar\">\n    <button\n      class=\"btn btn-floating {{ btnClass }}\"\n      [attr.aria-label]=\"'Zoom in'\"\n      style=\"min-width: 37px\"\n      [disabled]=\"_zoomInButtonDisabled\"\n      (click)=\"_zoom(zoomStep)\"\n    >\n      <i class=\"fa fa-plus\"></i>\n    </button>\n    <button\n      class=\"btn btn-floating {{ btnClass }}\"\n      [attr.aria-label]=\"'Zoom out'\"\n      style=\"min-width: 37px\"\n      [disabled]=\"_zoomOutButtonDisabled\"\n      (click)=\"_zoom(-1 * zoomStep)\"\n    >\n      <i class=\"fa fa-minus\"></i>\n    </button>\n  </div>\n\n  <ng-template #tooltipTemplate>\n    <div class=\"vector-map-tooltip\" style=\"pointer-events: none;\">\n      <strong>{{ _currentTooltipTitle }}</strong>\n      <div *ngIf=\"_currentTooltipContent\" [innerHTML]=\"_currentTooltipContent\"></div>\n    </div>\n  </ng-template>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }]; }, propDecorators: { wrapper: [{
                type: ViewChild,
                args: ['wrapper', { static: true }]
            }], svgElement: [{
                type: ViewChild,
                args: ['svgElement', { static: true }]
            }], tooltipTemplate: [{
                type: ViewChild,
                args: ['tooltipTemplate', { read: TemplateRef }]
            }], mapContentTemplate: [{
                type: ViewChild,
                args: ['mapContentTemplate', { static: true }]
            }], btnClass: [{
                type: Input
            }], colorMap: [{
                type: Input
            }], customMapContent: [{
                type: Input
            }], viewBox: [{
                type: Input
            }], fill: [{
                type: Input
            }], fillOpacity: [{
                type: Input
            }], height: [{
                type: Input
            }], hover: [{
                type: Input
            }], hoverFill: [{
                type: Input
            }], map: [{
                type: Input
            }], markers: [{
                type: Input
            }], markerFill: [{
                type: Input
            }], markerStroke: [{
                type: Input
            }], markerInnerFill: [{
                type: Input
            }], markerStrokeWidth: [{
                type: Input
            }], readonly: [{
                type: Input
            }], scale: [{
                type: Input
            }], selectFill: [{
                type: Input
            }], selectRegion: [{
                type: Input
            }], stroke: [{
                type: Input
            }], strokeLinejoin: [{
                type: Input
            }], strokeOpacity: [{
                type: Input
            }], strokeWidth: [{
                type: Input
            }], selectedRegion: [{
                type: Input
            }], tooltips: [{
                type: Input
            }], width: [{
                type: Input
            }], zoomEvents: [{
                type: Input
            }], zoomMax: [{
                type: Input
            }], zoomMin: [{
                type: Input
            }], zoomStep: [{
                type: Input
            }], selected: [{
                type: Output
            }], markerClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,