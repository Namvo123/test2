const NAME = 'pinch';
const EVENT_END = `${NAME}end`;
const EVENT_START = `${NAME}start`;
const EVENT_MOVE = `${NAME}move`;
export class Pinch {
    constructor(_element) {
        this._element = _element;
        this._startTouch = null;
        this._origin = null;
        this._touch = null;
        this._math = null;
        this._ratio = null;
        this._options = {
            pointers: 2,
            threshold: 10,
        };
        this._touchStartHandler = this._handleTouchStart.bind(this);
        this._touchMoveHandler = this._handleTouchMove.bind(this);
        this._touchEndHandler = this._handleTouchEnd.bind(this);
    }
    dispose() {
        this._element.removeEventListener('touchstart', this._touchStartHandler);
        this._element.removeEventListener('touchmove', this._touchMoveHandler);
        this._element.removeEventListener('touchend', this._touchEndHandler);
    }
    init() {
        this._element.addEventListener('touchstart', this._touchStartHandler);
        this._element.addEventListener('touchmove', this._touchMoveHandler);
        this._element.addEventListener('touchend', this._touchEndHandler);
    }
    _handleTouchStart(e) {
        if (e.touches.length !== this._options.pointers)
            return;
        e.preventDefault();
        const [touch, origin] = this._getPinchTouchOrigin(e.touches);
        this._touch = touch;
        this._origin = origin;
        this._startTouch = this._touch;
        this.triggerCustomEvent(this._element, EVENT_START, {
            ratio: this._ratio,
            origin: this._origin,
        });
    }
    _handleTouchMove(e) {
        const { threshold, pointers } = this._options;
        if (e.touches.length !== pointers)
            return;
        e.preventDefault();
        this._touch = this._getPinchTouchOrigin(e.touches)[0];
        this._ratio = this._touch / this._startTouch;
        const typeofing = typeof this._startTouch === 'number' && typeof this._touch === 'number';
        // eslint-disable-next-line no-restricted-globals
        const isNumber = !isNaN(this._startTouch) && !isNaN(this._touch);
        if (typeofing && isNumber) {
            if (this._origin.x > threshold || this._origin.y > threshold) {
                this._startTouch = this._touch;
                this.triggerCustomEvent(this._element, NAME, { ratio: this._ratio, origin: this._origin });
                this.triggerCustomEvent(this._element, EVENT_MOVE, {
                    ratio: this._ratio,
                    origin: this._origin,
                });
            }
        }
    }
    _handleTouchEnd() {
        const typeofing = typeof this._startTouch === 'number' && typeof this._touch === 'number';
        // eslint-disable-next-line no-restricted-globals
        const isNumber = !isNaN(this._startTouch) && !isNaN(this._touch);
        if (typeofing && isNumber) {
            this._startTouch = null;
            this.triggerCustomEvent(this._element, EVENT_END, {
                ratio: this._ratio,
                origin: this._origin,
            });
        }
    }
    _getCoordinates(e) {
        const [touch] = e.touches;
        return {
            x: touch.clientX,
            y: touch.clientY,
        };
    }
    _getDirection({ x, y }) {
        return {
            x: {
                direction: x < 0 ? 'left' : 'right',
                value: Math.abs(x),
            },
            y: {
                direction: y < 0 ? 'up' : 'down',
                value: Math.abs(y),
            },
        };
    }
    _getOrigin({ x, y }, { x: x2, y: y2 }) {
        return {
            x: x - x2,
            y: y - y2,
        };
    }
    _getDistanceBetweenTwoPoints(x1, x2, y1, y2) {
        return Math.hypot(x2 - x1, y2 - y1);
    }
    _getMidPoint({ x1, x2, y1, y2 }) {
        return {
            x: (x1 + x2) / 2,
            y: (y1 + y2) / 2,
        };
    }
    _getVectorLength({ x1, x2, y1, y2 }) {
        return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
    }
    _getRightMostTouch(touches) {
        let rightMost = null;
        const distance = Number.MIN_VALUE;
        touches.forEach((touch) => {
            if (touch.clientX > distance) {
                rightMost = touch;
            }
        });
        return rightMost;
    }
    _getAngle(x1, y1, x2, y2) {
        return Math.atan2(y2 - y1, x2 - x1);
    }
    _getAngularDistance(start, end) {
        return end - start;
    }
    _getCenterXY({ x1, x2, y1, y2 }) {
        return {
            x: x1 + (x2 - x1) / 2,
            y: y1 + (y2 - y1) / 2,
        };
    }
    _getPinchTouchOrigin(touches) {
        const [t1, t2] = touches;
        const _position = {
            x1: t1.clientX,
            x2: t2.clientX,
            y1: t1.clientY,
            y2: t2.clientY,
        };
        return [this._getVectorLength(_position), this._getCenterXY(_position)];
    }
    _getPosition({ x1, x2, y1, y2 }) {
        return { x1, x2, y1, y2 };
    }
    triggerCustomEvent(element, event, args) {
        if (typeof event !== 'string' || !element) {
            return null;
        }
        let bubbles = true;
        let nativeDispatch = true;
        let defaultPrevented = false;
        let evt = null;
        evt = new CustomEvent(event, {
            bubbles,
            cancelable: true,
        });
        if (typeof args !== 'undefined') {
            Object.keys(args).forEach((key) => {
                Object.defineProperty(evt, key, {
                    get() {
                        return args[key];
                    },
                });
            });
        }
        if (defaultPrevented) {
            evt.preventDefault();
        }
        if (nativeDispatch) {
            element.dispatchEvent(evt);
        }
        return evt;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluY2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tZGItYW5ndWxhci12ZWN0b3ItbWFwcy9zcmMvbGliL3BpbmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQztBQUNyQixNQUFNLFNBQVMsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDO0FBQy9CLE1BQU0sV0FBVyxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUM7QUFDbkMsTUFBTSxVQUFVLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQztBQUVqQyxNQUFNLE9BQU8sS0FBSztJQWVoQixZQUFvQixRQUFxQjtRQUFyQixhQUFRLEdBQVIsUUFBUSxDQUFhO1FBZGpDLGdCQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ25CLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFDZixXQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2QsVUFBSyxHQUFHLElBQUksQ0FBQztRQUNiLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFDZCxhQUFRLEdBQUc7WUFDakIsUUFBUSxFQUFFLENBQUM7WUFDWCxTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7UUFFTSx1QkFBa0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELHNCQUFpQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQscUJBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFZixDQUFDO0lBRTdDLE9BQU87UUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxDQUFNO1FBQzlCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRO1lBQUUsT0FBTztRQUN4RCxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFbkIsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUUvQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUU7WUFDbEQsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTztTQUNyQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsQ0FBQztRQUN4QixNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFOUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxRQUFRO1lBQUUsT0FBTztRQUUxQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBRTdDLE1BQU0sU0FBUyxHQUFHLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQztRQUMxRixpREFBaUQ7UUFDakQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRSxJQUFJLFNBQVMsSUFBSSxRQUFRLEVBQUU7WUFDekIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsU0FBUyxFQUFFO2dCQUM1RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBRS9CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDM0YsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFO29CQUNqRCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07b0JBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTztpQkFDckIsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtJQUNILENBQUM7SUFFTyxlQUFlO1FBQ3JCLE1BQU0sU0FBUyxHQUFHLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsQ0FBQztRQUMxRixpREFBaUQ7UUFDakQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqRSxJQUFJLFNBQVMsSUFBSSxRQUFRLEVBQUU7WUFDekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFFeEIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFO2dCQUNoRCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTzthQUNyQixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxlQUFlLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBRTFCLE9BQU87WUFDTCxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDaEIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ2pCLENBQUM7SUFDSixDQUFDO0lBRUQsYUFBYSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNwQixPQUFPO1lBQ0wsQ0FBQyxFQUFFO2dCQUNELFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU87Z0JBQ25DLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNuQjtZQUNELENBQUMsRUFBRTtnQkFDRCxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNO2dCQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbkI7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTtRQUNuQyxPQUFPO1lBQ0wsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFO1lBQ1QsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFO1NBQ1YsQ0FBQztJQUNKLENBQUM7SUFFRCw0QkFBNEIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzdCLE9BQU87WUFDTCxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztZQUNoQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztTQUNqQixDQUFDO0lBQ0osQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELGtCQUFrQixDQUFDLE9BQU87UUFDeEIsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDbEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3hCLElBQUksS0FBSyxDQUFDLE9BQU8sR0FBRyxRQUFRLEVBQUU7Z0JBQzVCLFNBQVMsR0FBRyxLQUFLLENBQUM7YUFDbkI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELG1CQUFtQixDQUFDLEtBQUssRUFBRSxHQUFHO1FBQzVCLE9BQU8sR0FBRyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRUQsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzdCLE9BQU87WUFDTCxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDckIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQ3RCLENBQUM7SUFDSixDQUFDO0lBRUQsb0JBQW9CLENBQUMsT0FBTztRQUMxQixNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztRQUV6QixNQUFNLFNBQVMsR0FBRztZQUNoQixFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU87WUFDZCxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU87WUFDZCxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU87WUFDZCxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU87U0FDZixDQUFDO1FBRUYsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUM3QixPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLE9BQVksRUFBRSxLQUFVLEVBQUUsSUFBUztRQUNwRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN6QyxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFZixHQUFHLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO1lBQzNCLE9BQU87WUFDUCxVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxJQUFJLE9BQU8sSUFBSSxLQUFLLFdBQVcsRUFBRTtZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNoQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7b0JBQzlCLEdBQUc7d0JBQ0QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ25CLENBQUM7aUJBQ0YsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksZ0JBQWdCLEVBQUU7WUFDcEIsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxjQUFjLEVBQUU7WUFDbEIsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1QjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTkFNRSA9ICdwaW5jaCc7XG5jb25zdCBFVkVOVF9FTkQgPSBgJHtOQU1FfWVuZGA7XG5jb25zdCBFVkVOVF9TVEFSVCA9IGAke05BTUV9c3RhcnRgO1xuY29uc3QgRVZFTlRfTU9WRSA9IGAke05BTUV9bW92ZWA7XG5cbmV4cG9ydCBjbGFzcyBQaW5jaCB7XG4gIHByaXZhdGUgX3N0YXJ0VG91Y2ggPSBudWxsO1xuICBwcml2YXRlIF9vcmlnaW4gPSBudWxsO1xuICBwcml2YXRlIF90b3VjaCA9IG51bGw7XG4gIHByaXZhdGUgX21hdGggPSBudWxsO1xuICBwcml2YXRlIF9yYXRpbyA9IG51bGw7XG4gIHByaXZhdGUgX29wdGlvbnMgPSB7XG4gICAgcG9pbnRlcnM6IDIsXG4gICAgdGhyZXNob2xkOiAxMCxcbiAgfTtcblxuICBwcml2YXRlIF90b3VjaFN0YXJ0SGFuZGxlciA9IHRoaXMuX2hhbmRsZVRvdWNoU3RhcnQuYmluZCh0aGlzKTtcbiAgcHJpdmF0ZSBfdG91Y2hNb3ZlSGFuZGxlciA9IHRoaXMuX2hhbmRsZVRvdWNoTW92ZS5iaW5kKHRoaXMpO1xuICBwcml2YXRlIF90b3VjaEVuZEhhbmRsZXIgPSB0aGlzLl9oYW5kbGVUb3VjaEVuZC5iaW5kKHRoaXMpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxFbGVtZW50KSB7fVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fdG91Y2hTdGFydEhhbmRsZXIpO1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5fdG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMuX3RvdWNoRW5kSGFuZGxlcik7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuX3RvdWNoU3RhcnRIYW5kbGVyKTtcbiAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMuX3RvdWNoTW92ZUhhbmRsZXIpO1xuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl90b3VjaEVuZEhhbmRsZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaGFuZGxlVG91Y2hTdGFydChlOiBhbnkpIHtcbiAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCAhPT0gdGhpcy5fb3B0aW9ucy5wb2ludGVycykgcmV0dXJuO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IFt0b3VjaCwgb3JpZ2luXSA9IHRoaXMuX2dldFBpbmNoVG91Y2hPcmlnaW4oZS50b3VjaGVzKTtcblxuICAgIHRoaXMuX3RvdWNoID0gdG91Y2g7XG4gICAgdGhpcy5fb3JpZ2luID0gb3JpZ2luO1xuICAgIHRoaXMuX3N0YXJ0VG91Y2ggPSB0aGlzLl90b3VjaDtcblxuICAgIHRoaXMudHJpZ2dlckN1c3RvbUV2ZW50KHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NUQVJULCB7XG4gICAgICByYXRpbzogdGhpcy5fcmF0aW8sXG4gICAgICBvcmlnaW46IHRoaXMuX29yaWdpbixcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2hhbmRsZVRvdWNoTW92ZShlKSB7XG4gICAgY29uc3QgeyB0aHJlc2hvbGQsIHBvaW50ZXJzIH0gPSB0aGlzLl9vcHRpb25zO1xuXG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggIT09IHBvaW50ZXJzKSByZXR1cm47XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB0aGlzLl90b3VjaCA9IHRoaXMuX2dldFBpbmNoVG91Y2hPcmlnaW4oZS50b3VjaGVzKVswXTtcbiAgICB0aGlzLl9yYXRpbyA9IHRoaXMuX3RvdWNoIC8gdGhpcy5fc3RhcnRUb3VjaDtcblxuICAgIGNvbnN0IHR5cGVvZmluZyA9IHR5cGVvZiB0aGlzLl9zdGFydFRvdWNoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdGhpcy5fdG91Y2ggPT09ICdudW1iZXInO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICBjb25zdCBpc051bWJlciA9ICFpc05hTih0aGlzLl9zdGFydFRvdWNoKSAmJiAhaXNOYU4odGhpcy5fdG91Y2gpO1xuXG4gICAgaWYgKHR5cGVvZmluZyAmJiBpc051bWJlcikge1xuICAgICAgaWYgKHRoaXMuX29yaWdpbi54ID4gdGhyZXNob2xkIHx8IHRoaXMuX29yaWdpbi55ID4gdGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuX3N0YXJ0VG91Y2ggPSB0aGlzLl90b3VjaDtcblxuICAgICAgICB0aGlzLnRyaWdnZXJDdXN0b21FdmVudCh0aGlzLl9lbGVtZW50LCBOQU1FLCB7IHJhdGlvOiB0aGlzLl9yYXRpbywgb3JpZ2luOiB0aGlzLl9vcmlnaW4gfSk7XG4gICAgICAgIHRoaXMudHJpZ2dlckN1c3RvbUV2ZW50KHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVkUsIHtcbiAgICAgICAgICByYXRpbzogdGhpcy5fcmF0aW8sXG4gICAgICAgICAgb3JpZ2luOiB0aGlzLl9vcmlnaW4sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2hhbmRsZVRvdWNoRW5kKCkge1xuICAgIGNvbnN0IHR5cGVvZmluZyA9IHR5cGVvZiB0aGlzLl9zdGFydFRvdWNoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdGhpcy5fdG91Y2ggPT09ICdudW1iZXInO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICBjb25zdCBpc051bWJlciA9ICFpc05hTih0aGlzLl9zdGFydFRvdWNoKSAmJiAhaXNOYU4odGhpcy5fdG91Y2gpO1xuXG4gICAgaWYgKHR5cGVvZmluZyAmJiBpc051bWJlcikge1xuICAgICAgdGhpcy5fc3RhcnRUb3VjaCA9IG51bGw7XG5cbiAgICAgIHRoaXMudHJpZ2dlckN1c3RvbUV2ZW50KHRoaXMuX2VsZW1lbnQsIEVWRU5UX0VORCwge1xuICAgICAgICByYXRpbzogdGhpcy5fcmF0aW8sXG4gICAgICAgIG9yaWdpbjogdGhpcy5fb3JpZ2luLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX2dldENvb3JkaW5hdGVzKGUpIHtcbiAgICBjb25zdCBbdG91Y2hdID0gZS50b3VjaGVzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHRvdWNoLmNsaWVudFgsXG4gICAgICB5OiB0b3VjaC5jbGllbnRZLFxuICAgIH07XG4gIH1cblxuICBfZ2V0RGlyZWN0aW9uKHsgeCwgeSB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHtcbiAgICAgICAgZGlyZWN0aW9uOiB4IDwgMCA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gICAgICAgIHZhbHVlOiBNYXRoLmFicyh4KSxcbiAgICAgIH0sXG4gICAgICB5OiB7XG4gICAgICAgIGRpcmVjdGlvbjogeSA8IDAgPyAndXAnIDogJ2Rvd24nLFxuICAgICAgICB2YWx1ZTogTWF0aC5hYnMoeSksXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBfZ2V0T3JpZ2luKHsgeCwgeSB9LCB7IHg6IHgyLCB5OiB5MiB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggLSB4MixcbiAgICAgIHk6IHkgLSB5MixcbiAgICB9O1xuICB9XG5cbiAgX2dldERpc3RhbmNlQmV0d2VlblR3b1BvaW50cyh4MSwgeDIsIHkxLCB5Mikge1xuICAgIHJldHVybiBNYXRoLmh5cG90KHgyIC0geDEsIHkyIC0geTEpO1xuICB9XG5cbiAgX2dldE1pZFBvaW50KHsgeDEsIHgyLCB5MSwgeTIgfSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiAoeDEgKyB4MikgLyAyLFxuICAgICAgeTogKHkxICsgeTIpIC8gMixcbiAgICB9O1xuICB9XG5cbiAgX2dldFZlY3Rvckxlbmd0aCh7IHgxLCB4MiwgeTEsIHkyIH0pIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh4MiAtIHgxKSAqKiAyICsgKHkyIC0geTEpICoqIDIpO1xuICB9XG5cbiAgX2dldFJpZ2h0TW9zdFRvdWNoKHRvdWNoZXMpIHtcbiAgICBsZXQgcmlnaHRNb3N0ID0gbnVsbDtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgdG91Y2hlcy5mb3JFYWNoKCh0b3VjaCkgPT4ge1xuICAgICAgaWYgKHRvdWNoLmNsaWVudFggPiBkaXN0YW5jZSkge1xuICAgICAgICByaWdodE1vc3QgPSB0b3VjaDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmlnaHRNb3N0O1xuICB9XG5cbiAgX2dldEFuZ2xlKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIoeTIgLSB5MSwgeDIgLSB4MSk7XG4gIH1cblxuICBfZ2V0QW5ndWxhckRpc3RhbmNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZW5kIC0gc3RhcnQ7XG4gIH1cblxuICBfZ2V0Q2VudGVyWFkoeyB4MSwgeDIsIHkxLCB5MiB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgxICsgKHgyIC0geDEpIC8gMixcbiAgICAgIHk6IHkxICsgKHkyIC0geTEpIC8gMixcbiAgICB9O1xuICB9XG5cbiAgX2dldFBpbmNoVG91Y2hPcmlnaW4odG91Y2hlcykge1xuICAgIGNvbnN0IFt0MSwgdDJdID0gdG91Y2hlcztcblxuICAgIGNvbnN0IF9wb3NpdGlvbiA9IHtcbiAgICAgIHgxOiB0MS5jbGllbnRYLFxuICAgICAgeDI6IHQyLmNsaWVudFgsXG4gICAgICB5MTogdDEuY2xpZW50WSxcbiAgICAgIHkyOiB0Mi5jbGllbnRZLFxuICAgIH07XG5cbiAgICByZXR1cm4gW3RoaXMuX2dldFZlY3Rvckxlbmd0aChfcG9zaXRpb24pLCB0aGlzLl9nZXRDZW50ZXJYWShfcG9zaXRpb24pXTtcbiAgfVxuXG4gIF9nZXRQb3NpdGlvbih7IHgxLCB4MiwgeTEsIHkyIH0pIHtcbiAgICByZXR1cm4geyB4MSwgeDIsIHkxLCB5MiB9O1xuICB9XG5cbiAgdHJpZ2dlckN1c3RvbUV2ZW50KGVsZW1lbnQ6IGFueSwgZXZlbnQ6IGFueSwgYXJnczogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBidWJibGVzID0gdHJ1ZTtcbiAgICBsZXQgbmF0aXZlRGlzcGF0Y2ggPSB0cnVlO1xuICAgIGxldCBkZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgbGV0IGV2dCA9IG51bGw7XG5cbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgIGJ1YmJsZXMsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBhcmdzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgT2JqZWN0LmtleXMoYXJncykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldnQsIGtleSwge1xuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmdzW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG5hdGl2ZURpc3BhdGNoKSB7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZ0O1xuICB9XG59XG4iXX0=