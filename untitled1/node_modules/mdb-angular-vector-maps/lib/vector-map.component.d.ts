import { Overlay } from '@angular/cdk/overlay';
import { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
export interface MdbMapUnit {
    element: HTMLElement;
    d: string;
    id: string;
    title: string;
    fill: string;
    selected: boolean;
    tooltip: string;
}
export interface MdbMapMarker {
    type: 'pin' | 'bullet';
    x: number;
    y: number;
    label: string;
    radius?: number;
    fill?: string;
    stroke?: string;
    strokeWidth?: string;
    innerFill?: string;
}
export declare class MdbVectorMapComponent implements OnInit, OnDestroy {
    private _elementRef;
    private _overlay;
    private _vcr;
    private _zone;
    wrapper: ElementRef;
    svgElement: ElementRef;
    tooltipTemplate: TemplateRef<any>;
    mapContentTemplate: any;
    btnClass: string;
    get colorMap(): any;
    set colorMap(colorMap: any);
    private _colorMap;
    customMapContent: HTMLElement;
    viewBox: string;
    fill: string;
    fillOpacity: number;
    height: number;
    hover: boolean;
    hoverFill: string;
    get map(): string;
    set map(value: string);
    private _map;
    get markers(): MdbMapMarker[];
    set markers(value: MdbMapMarker[]);
    private _markers;
    markerFill: string;
    markerStroke: string;
    markerInnerFill: string;
    markerStrokeWidth: number;
    readonly: boolean;
    scale: number;
    selectFill: string;
    selectRegion: any;
    stroke: string;
    strokeLinejoin: string;
    strokeOpacity: number;
    strokeWidth: number;
    selectedRegion: string;
    tooltips: boolean;
    width: number;
    zoomEvents: boolean;
    zoomMax: number;
    zoomMin: number;
    zoomStep: number;
    selected: EventEmitter<MdbMapUnit>;
    markerClick: EventEmitter<MdbMapMarker>;
    _mapUnits: MdbMapUnit[];
    _mapViewBox: string | null;
    private _componentInitialized;
    private _pinch;
    _scale: number;
    private _mapRect;
    private _elementRect;
    private _origin;
    private _x;
    private _y;
    private _vector;
    private _prevPosition;
    private _mouseDownHandler;
    private _mouseMoveHandler;
    private _mouseEndHandler;
    private _touchStartHandler;
    private _touchMoveHandler;
    private _touchEndHandler;
    private _wheelEventSubscription;
    private _pinchEventSubscription;
    _zoomInButtonDisabled: boolean;
    _zoomOutButtonDisabled: boolean;
    _pins: any[];
    _bullets: any[];
    private _currentSelectedUnit;
    private _overlayRef;
    private _portal;
    _currentTooltipTitle: string;
    _currentTooltipContent: string;
    get _dragging(): boolean;
    constructor(_elementRef: ElementRef, _overlay: Overlay, _vcr: ViewContainerRef, _zone: NgZone);
    ngOnInit(): void;
    private _setupDragEvents;
    private _initMap;
    private _updateMap;
    private _renderMap;
    private _cacheRectPositions;
    private _getMapUnits;
    private _setupUnitsParameters;
    private _setupUnitsEvents;
    private _setupMapPosition;
    private _setupMarkers;
    private _getPin;
    private _getPinPath;
    private _getBullet;
    private _setupWheelEvent;
    private _setupPinchEvent;
    _handlePinch(event: any): void;
    private _allowZoom;
    private _getOrigin;
    private _updateTransformOrigin;
    private _updateMapTransform;
    _zoom(factor: number): void;
    _getValueInMapBoundry({ x, y }: {
        x: any;
        y: any;
    }): {
        x: number;
        y: number;
    };
    _getMapMargins(): {
        left: number;
        top: number;
        right: number;
        bottom: number;
    };
    select(region: string): void;
    private _setInitialMapPosition;
    private _toggleZoomBtns;
    _selectUnit(unit: MdbMapUnit): void;
    private _handleUnitSelection;
    _handleUnitMouseover(event: any, unit: MdbMapUnit): void;
    _handleUnitMouseout(unit: MdbMapUnit): void;
    private _showUnitTooltip;
    private _hideUnitTooltip;
    private _getOverlayPosition;
    _handleDragStart(event: any): void;
    _handleDragMove(event: any): void;
    _handleDragEnd(): void;
    _handleTouchStart(event: any): void;
    _handleTouchMove(event: any): void;
    _handleTouchEnd(event: any): void;
    ngOnDestroy(): void;
    private _removeEvents;
    _getAnimateValue(radius: number): string;
    _emitMarkerClick(type: 'pin' | 'bullet', x: number, y: number, label: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbVectorMapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbVectorMapComponent, "mdb-vector-map", never, { "btnClass": "btnClass"; "colorMap": "colorMap"; "customMapContent": "customMapContent"; "viewBox": "viewBox"; "fill": "fill"; "fillOpacity": "fillOpacity"; "height": "height"; "hover": "hover"; "hoverFill": "hoverFill"; "map": "map"; "markers": "markers"; "markerFill": "markerFill"; "markerStroke": "markerStroke"; "markerInnerFill": "markerInnerFill"; "markerStrokeWidth": "markerStrokeWidth"; "readonly": "readonly"; "scale": "scale"; "selectFill": "selectFill"; "selectRegion": "selectRegion"; "stroke": "stroke"; "strokeLinejoin": "strokeLinejoin"; "strokeOpacity": "strokeOpacity"; "strokeWidth": "strokeWidth"; "selectedRegion": "selectedRegion"; "tooltips": "tooltips"; "width": "width"; "zoomEvents": "zoomEvents"; "zoomMax": "zoomMax"; "zoomMin": "zoomMin"; "zoomStep": "zoomStep"; }, { "selected": "selected"; "markerClick": "markerClick"; }, never, never>;
}
