import * as i3 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { forwardRef, EventEmitter, Component, Inject, ViewChild, ViewChildren, Input, Output, NgModule } from '@angular/core';
import * as i5 from '@angular/forms';
import { NG_VALUE_ACCESSOR, FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';
import { Subject, fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import * as i1 from 'mdb-angular-ui-kit/dropdown';
import { MdbDropdownModule } from 'mdb-angular-ui-kit/dropdown';
import * as i2 from 'mdb-angular-ui-kit/forms';
import { MdbFormsModule } from 'mdb-angular-ui-kit/forms';
import * as i4 from 'mdb-angular-ui-kit/tooltip';
import { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';

const OPTIONS_ITEMS = {
    paragraph: 'Paragraph',
    textStyle: 'Text style',
    heading: 'Heading',
    preformatted: 'Preformatted',
    bold: 'Bold',
    italic: 'Italic',
    strikethrough: 'Strikethrough',
    underline: 'Underline',
    textcolor: 'Color',
    textBackgroundColor: 'Background Color',
    justifyLeft: 'Align Left',
    justifyCenter: 'Align Center',
    justifyRight: 'Align Right',
    justifyFull: 'Align Justify',
    insertLink: 'Insert Link',
    insertPicture: 'Insert Picture',
    insertUnorderedList: 'Unordered List',
    insertOrderedList: 'Numbered List',
    indent: 'Increase Indent',
    outdent: 'Decrease Indent',
    insertHorizontalRule: 'Insert Horizontal Line',
    showHTML: 'Show HTML code',
    undo: 'Undo',
    redo: 'Redo',
    addLinkHead: 'Add Link',
    addImageHead: 'Add Image',
    linkUrlLabel: 'Enter a URL:',
    linkDescription: 'Enter a description',
    imageUrlLabel: 'Enter a URL:',
    okButton: 'OK',
    cancelButton: 'cancel',
    moreOptions: 'Show More Options',
};
const TOOLBAR_STYLE_ITEMS = [
    { type: 'paragraph', selector: 'p' },
    { type: 'heading', selector: 'h1' },
    { type: 'heading', selector: 'h2' },
    { type: 'heading', selector: 'h3' },
    { type: 'heading', selector: 'h4' },
    { type: 'heading', selector: 'h5' },
    { type: 'heading', selector: 'h6' },
    { type: 'preformatted', selector: 'pre' },
];
const TEXT_FORMATING_ITEMS = [
    { type: 'bold', icon: 'fas fa-bold' },
    { type: 'italic', icon: 'fas fa-italic' },
    { type: 'underline', icon: 'fas fa-underline' },
    { type: 'strikethrough', icon: 'fas fa-strikethrough' },
    //   { type: 'textcolor', icon: 'fas fa-font' },
    //   { type: 'textBackgroundColor', icon: 'fas fa-paint-brush' }
];
const ALIGN_ITEMS = [
    { type: 'justifyLeft', icon: 'fas fa-align-left' },
    { type: 'justifyCenter', icon: 'fas fa-align-center' },
    { type: 'justifyRight', icon: 'fas fa-align-right' },
    { type: 'justifyFull', icon: 'fas fa-align-justify' },
];
const LIST_ITEMS = [
    { type: 'insertUnorderedList', icon: 'fas fa-list-ul' },
    { type: 'insertOrderedList', icon: 'fas fa-list-ol' },
    { type: 'outdent', icon: 'fas fa-outdent' },
    { type: 'indent', icon: 'fas fa-indent' },
];
const UNDO_REDO_ITEMS = [
    { type: 'undo', icon: 'fas fa-angle-left' },
    { type: 'redo', icon: 'fas fa-angle-right' },
];
const TOOLBAR_OPTIONS = {
    styles: {
        disabled: false,
        hidden: false,
        p: { disabled: false, hidden: false },
        h1: { disabled: false, hidden: false },
        h2: { disabled: false, hidden: false },
        h3: { disabled: false, hidden: false },
        h4: { disabled: false, hidden: false },
        h5: { disabled: false, hidden: false },
        h6: { disabled: false, hidden: false },
        pre: { disabled: false, hidden: false },
    },
    formatting: {
        disabled: false,
        hidden: false,
        bold: { disabled: false, hidden: false },
        italic: { disabled: false, hidden: false },
        underline: { disabled: false, hidden: false },
        strikethrough: { disabled: false, hidden: false },
        textColor: { disabled: false, hidden: false },
        textBackground: { disabled: false, hidden: false },
    },
    align: {
        disabled: false,
        hidden: false,
        justifyLeft: { disabled: false, hidden: false },
        justifyCenter: { disabled: false, hidden: false },
        justifyRight: { disabled: false, hidden: false },
        justifyFull: { disabled: false, hidden: false },
    },
    lists: {
        disabled: false,
        hidden: false,
        insertUnorderedList: { disabled: false, hidden: false },
        insertOrderedList: { disabled: false, hidden: false },
        indent: { disabled: false, hidden: false },
        outdent: { disabled: false, hidden: false },
    },
    links: {
        disabled: false,
        hidden: false,
        link: { disabled: false, hidden: false },
        image: { disabled: false, hidden: false },
        insertHorizontalRule: { disabled: false, hidden: false },
    },
    showCode: { disabled: false, hidden: false },
    undoRedo: {
        disabled: false,
        hidden: false,
        undo: { disabled: false, hidden: false },
        redo: { disabled: false, hidden: false },
    },
};
const COLORS_OPTIONS = [
    '#1266F1',
    '#B23CFD',
    '#00B74A',
    '#F93154',
    '#FFA900',
    '#39C0ED',
    '#FBFBFB',
    '#262626', // Dark
];

const VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef(() => MdbWysiwygComponent),
    multi: true,
};
class MdbWysiwygComponent {
    constructor(el, _ngZone, document) {
        this.el = el;
        this._ngZone = _ngZone;
        this.document = document;
        this.fixed = false;
        this.fixedOffsetTop = 0;
        this.valueChange = new EventEmitter();
        this.valueContent = new EventEmitter();
        this.toolbarStyleItems = TOOLBAR_STYLE_ITEMS;
        this.toolbarTextFormatingItems = TEXT_FORMATING_ITEMS;
        this.alignItems = ALIGN_ITEMS;
        this.listItems = LIST_ITEMS;
        this.undoRedoItems = UNDO_REDO_ITEMS;
        this.toolbarOptionsVisibility = {
            styles: true,
            formatting: true,
            align: true,
            lists: true,
            links: true,
            showCode: true,
            undoRedo: true,
        };
        this.toolbarTogglerVisible = false;
        this._toolbarOptionsWidth = [];
        this._value = '';
        this._selection = {
            anchorNode: null,
            anchorOffset: 0,
            focusNode: null,
            focusOffset: 0,
        };
        this._colors = COLORS_OPTIONS;
        this._options = OPTIONS_ITEMS;
        this.wysiwygValueChange$ = new Subject();
        this._destroy = new Subject();
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (newValue || newValue === '') {
            this._value = newValue;
            this.wysiwygContent.nativeElement.innerHTML = newValue;
        }
        else {
            this._value = '';
            this.wysiwygContent.nativeElement.innerHTML = '';
        }
    }
    get toolbarOptions() {
        return this._toolbarOptions;
    }
    set toolbarOptions(newValue) {
        this._toolbarOptions = newValue;
    }
    get options() {
        return this._options;
    }
    set options(newValue) {
        this._options = newValue;
    }
    get colors() {
        return this._colors;
    }
    set colors(newValue) {
        this._colors = newValue;
    }
    valueChange$() {
        return this.wysiwygValueChange$;
    }
    writeValue(value) {
        if (value || value === '') {
            this.value = value;
            this.wysiwygContent.nativeElement.innerHTML = this.value;
            this.wysiwygValueChange$.next(value);
            // this.valueChange.emit(value);
            this.onChange(value);
            this.onTouched();
        }
    }
    valueChanged() {
        this.onChange(this.value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisableState(isDisabled) { }
    ngOnInit() {
        this.linkForm = new FormGroup({
            url: new FormControl(),
            description: new FormControl(),
        });
        this.imageForm = new FormControl();
        this.toolbarOptions = this.toolbarOptions
            ? this._deepMerge(this.toolbarOptions, TOOLBAR_OPTIONS)
            : TOOLBAR_OPTIONS;
        this._ngZone.runOutsideAngular(() => {
            fromEvent(window, 'resize').subscribe((event) => {
                this._ngZone.run(() => {
                    this._updateToolbar();
                });
            });
        });
    }
    ngAfterViewInit() {
        if (this.value || this.value === '') {
            this.wysiwygContent.nativeElement.innerHTML = this.value;
        }
        else {
            this.wysiwygContent.nativeElement.innerHTML = '';
        }
        this._getToolsWidth();
        fromEvent(this.el.nativeElement, 'input')
            .pipe(debounceTime(100), distinctUntilChanged(), takeUntil(this._destroy))
            .subscribe((event) => {
            this.wysiwygValueChange$.next(event.target.innerHTML);
            this.valueChange.emit(event.target.innerHTML);
            this.onChange(event.target.innerHTML);
            this.valueContent.emit(event.target.textContent);
            this.onTouched();
        });
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
    }
    getCode() {
        return this.wysiwygContent.nativeElement.innerHTML;
    }
    performAction(command, argument = '') {
        this.document.execCommand(command, false, argument);
    }
    insertLink() {
        const { anchorNode, anchorOffset, focusNode, focusOffset } = this._selection;
        const selection = document.getSelection();
        const linkString = `<a href="${this.linkForm.value.url}" target="_blank">${this.linkForm.value.description}</a>`;
        this.linkDropdown.hide();
        this.wysiwygContent.nativeElement.focus();
        selection.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);
        this.performAction('insertHTML', linkString);
        this.linkForm.reset();
    }
    insertImage() {
        const { anchorNode, anchorOffset, focusNode, focusOffset } = this._selection;
        const selection = document.getSelection();
        const imageString = `<img src="${this.imageForm.value}" target="_blank" class="img-fluid" />`;
        this.imageDropdown.hide();
        this.wysiwygContent.nativeElement.focus();
        selection.setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset);
        this.performAction('insertHTML', imageString);
        this.imageForm.reset();
    }
    toggleHtml() {
        if (this.isCodeShown) {
            this.wysiwygContent.nativeElement.innerHTML = this.wysiwygContent.nativeElement.textContent;
            this.isCodeShown = false;
        }
        else {
            this.wysiwygContent.nativeElement.textContent = this.wysiwygContent.nativeElement.innerHTML;
            this.isCodeShown = true;
        }
    }
    getSelection() {
        const selection = this.document.getSelection();
        this._selection.focusOffset = selection.focusOffset;
        this._selection.focusNode = selection.focusNode;
        this._selection.anchorOffset = selection.anchorOffset;
        this._selection.anchorNode = selection.anchorNode;
    }
    onLinkDropdownOpen() {
        const selection = this.document.getSelection();
        if (!selection.baseNode) {
            this.wysiwygContent.nativeElement.focus();
        }
        const url = selection.baseNode.parentElement.href || '';
        const description = selection.toString();
        this.linkForm.setValue({
            url: url,
            description: description,
        });
    }
    onImageDropdownOpen() {
        const selection = this.document.getSelection();
        if (!selection.baseNode) {
            this.wysiwygContent.nativeElement.focus();
        }
        const url = selection.baseNode.firstChild?.currentSrc || '';
        this.imageForm.setValue(url);
    }
    _updateToolbar() {
        const contentWidth = this.wysiwygContent.nativeElement.offsetWidth;
        let toolsWidth = 0;
        if (this.toolbarTogglerVisible) {
            toolsWidth += this.toolbarToggler.nativeElement.offsetWidth;
        }
        this._toolbarOptionsWidth.forEach((tool) => {
            const isHidden = this.toolbarOptionsVisibility[tool.id];
            toolsWidth += tool.width;
            if (contentWidth < toolsWidth && isHidden) {
                this.toolbarOptionsVisibility[tool.id] = false;
                if (!this.toolbarTogglerVisible) {
                    this.toolbarTogglerVisible = true;
                }
            }
            else if (contentWidth > toolsWidth && !isHidden) {
                this.toolbarOptionsVisibility[tool.id] = true;
                const toolbarLastOptionVisible = this.toolbarOptionsVisibility.undoRedo;
                if (toolbarLastOptionVisible) {
                    this.toolbarTogglerVisible = false;
                }
            }
        });
    }
    _getToolsWidth() {
        this.tools.forEach((tool, index) => {
            const toolObject = { id: tool.nativeElement.id, width: tool.nativeElement.offsetWidth };
            this._toolbarOptionsWidth[index] = toolObject;
        });
    }
    _deepMerge(updates, defaultOptions) {
        for (const key of Object.keys(defaultOptions)) {
            if (defaultOptions[key] instanceof Object && updates[key]) {
                this._deepMerge(updates[key], defaultOptions[key]);
            }
            else if (!updates[key]) {
                updates[key] = defaultOptions[key];
            }
        }
        return updates;
    }
}
MdbWysiwygComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbWysiwygComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
MdbWysiwygComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.3", type: MdbWysiwygComponent, selector: "mdb-wysiwyg", inputs: { value: "value", toolbarOptions: "toolbarOptions", fixed: "fixed", fixedOffsetTop: "fixedOffsetTop", options: "options", colors: "colors" }, outputs: { valueChange: "valueChange", valueContent: "valueContent" }, providers: [VALUE_ACCESSOR], viewQueries: [{ propertyName: "linkDropdown", first: true, predicate: ["linkDropdown"], descendants: true }, { propertyName: "imageDropdown", first: true, predicate: ["imageDropdown"], descendants: true }, { propertyName: "wysiwygContent", first: true, predicate: ["wysiwygContent"], descendants: true, static: true }, { propertyName: "toolbarToggler", first: true, predicate: ["toolbarToggler"], descendants: true }, { propertyName: "tools", predicate: ["tools"], descendants: true }], ngImport: i0, template: "<div>\n  <textarea id=\"demo\" style=\"width: 0px; height: 0px; visibility: hidden\" cols=\"30\" rows=\"10\"></textarea>\n  <div class=\"wysiwyg w-100 border\">\n    <div \n      class=\"wysiwyg-toolbar btn-toolbar\"\n      role=\"toolbar\"\n      [ngClass]=\"{'sticky-top': fixed}\"\n      [ngStyle]=\"{top: fixedOffsetTop + 'px'}\"  \n    >\n      <ng-template *ngIf=\"!toolbarOptions.styles.hidden && toolbarOptionsVisibility.styles then styleTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.formatting.hidden && toolbarOptionsVisibility.formatting then formatingTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.align.hidden && toolbarOptionsVisibility.align then alignTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.lists.hidden && toolbarOptionsVisibility.lists then listsTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.links.hidden && toolbarOptionsVisibility.links then linksTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.showCode.hidden && toolbarOptionsVisibility.showCode then showCodeTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.undoRedo.hidden && toolbarOptionsVisibility.undoRedo then undoRedoTemplate\"></ng-template>\n      <ng-template *ngIf=\"toolbarTogglerVisible then toolbarTogglerTemplate\"></ng-template>\n\n    </div>\n    <div \n      #wysiwygContent\n      class=\"wysiwyg-content\"\n      contenteditable=\"true\"\n      (blur)=\"getSelection()\"\n      [ngClass]=\"{'wysiwyg-show-html': isCodeShown}\"\n    >\n\n    </div>\n  </div>\n</div>\n\n<ng-template #styleTemplate>\n  <div\n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"styles\"\n  >\n    <div mdbDropdown class=\" mx-1 border-0\">\n      <button\n        class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0\"\n        type=\"button\"\n        id=\"wysiwygTextStyle\"\n        aria-expanded=\"false\"\n        mdbDropdownToggle\n        [attr.disabled]=\"toolbarOptions.styles.disabled ? 'disabled' : null\" \n      >\n        {{ options.textStyle }}\n      </button>\n      <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"wysiwygTextStyle\">\n        <ng-container *ngFor=\"let style of toolbarStyleItems; let i = index\">\n          <li *ngIf=\"!toolbarOptions.styles[style.selector].hidden\">\n            <button \n              type=\"button\" \n              class=\"dropdown-item\"\n              (click)=\"performAction('formatBlock', style.selector)\"\n              [attr.disabled]=\"toolbarOptions.styles[style.selector].disabled || toolbarOptions.styles.disabled ? 'disabled' : null\" \n            >\n              {{ options[style.type] }} {{ style.type === 'heading' ? i : ''}}\n            </button>\n          </li>\n        </ng-container>\n      </ul>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #formatingTemplate>\n  <div \n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"formatting\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let format of toolbarTextFormatingItems\">\n        <button \n          (click)=\"performAction(format.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[format.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.formatting[format.type].disabled || toolbarOptions.formatting.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.formatting[format.type].hidden\"\n        >\n          <i class=\"{{ format.icon }}\"></i>\n        </button> \n      </ng-container>\n      \n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div mdbDropdown class=\"mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-color\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['textcolor'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.formatting.textColor.disabled || toolbarOptions.formatting.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.formatting.textColor.hidden\"\n          >\n            <i class=\"fas fa-font\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\" style=\"max-width: 8rem; min-width: 8rem;\">\n            <button\n              *ngFor=\"let color of colors\"\n              (click)=\"performAction('foreColor', color)\"\n              type=\"button\"\n              class=\"dropdown-item d-inline-block btn btn-link wysiwyg-color border-0 p-0\"\n              [ngStyle]=\"{background: color}\"\n            >\n            </button>\n          </ul>\n        </div>\n      </div>\n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div mdbDropdown class=\" mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-color\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['textBackgroundColor'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.formatting.textBackground.disabled || toolbarOptions.formatting.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.formatting.textBackground.hidden\"\n          >\n            <i class=\"fas fa-paint-brush\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\" style=\"max-width: 8rem; min-width: 8rem;\">\n            <button\n              *ngFor=\"let color of colors\"\n              (click)=\"performAction('backColor', color)\"\n              type=\"button\"\n              class=\"dropdown-item d-inline-block btn btn-link wysiwyg-color border-0 p-0\"\n              [ngStyle]=\"{background: color}\"\n            >\n            </button>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #alignTemplate>\n  <div \n    #tools\n    id=\"align\"\n    class=\"wysiwyg-toolbar-group\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let align of alignItems\">\n        <button\n          (click)=\"performAction(align.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[align.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.align[align.type].disabled || toolbarOptions.align.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.align[align.type].hidden\"\n        >\n          <i class=\"{{align.icon}}\"></i>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #listsTemplate>\n  <div\n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"lists\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let list of listItems\">\n        <button\n          (click)=\"performAction(list.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[list.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.lists[list.type].disabled || toolbarOptions.lists.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.lists[list.type].hidden\"\n        >\n          <i class=\"{{list.icon}}\"></i>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #linksTemplate>\n  <div \n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"links\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0 dropdown\" role=\"group\">\n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div (dropdownShow)=\"onLinkDropdownOpen()\" #linkDropdown mdbDropdown class=\" mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-btn\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['insertLink'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.links.link.disabled || toolbarOptions.links.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.links.link.hidden\"\n          >\n            <i class=\"fas fa-paperclip\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\">\n            <form [formGroup]=\"linkForm\" class=\"px-4 py-3\">\n              <h5 class=\"mb-3\">{{ options.addLinkHead }}</h5>\n              <mdb-form-control class=\"mb-4\">\n                <input formControlName=\"url\" mdbInput type=\"url\" id=\"link-url\" class=\"form-control\" />\n                <label mdbLabel class=\"form-label\" for=\"link-url\">{{ options.linkUrlLabel }}</label>\n              </mdb-form-control>\n              <mdb-form-control class=\"mb-4\">\n                <input formControlName=\"description\" mdbInput type=\"text\" id=\"link-description\" class=\"form-control\" />\n                <label mdbLabel class=\"form-label\" for=\"link-description\">{{ options.linkDescription }}</label>\n              </mdb-form-control>\n              <div class=\"d-flex justify-content-end\">\n                <button (click)=\"insertLink()\" type=\"button\" class=\"btn btn-primary\">{{ options.okButton }}</button>\n                <button (click)=\"linkDropdown.hide()\" type=\"button\" class=\"btn btn-primary ms-2\">{{ options.cancelButton }}</button>\n              </div>\n            </form>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div (dropdownShow)=\"onImageDropdownOpen()\" #imageDropdown mdbDropdown class=\" mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-btn\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['insertPicture'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.links.image.disabled || toolbarOptions.links.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.links.image.hidden\"\n          >\n            <i class=\"far fa-image\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\">\n            <form class=\"px-4 py-3\">\n              <h5 class=\"mb-3\">{{ options.addImageHead }}</h5>\n              <mdb-form-control class=\"mb-4\">\n                <input [formControl]=\"imageForm\" mdbInput type=\"url\" id=\"image-url\" class=\"form-control\" />\n                <label mdbLabel class=\"form-label\" for=\"image-url\">{{ options.imageUrlLabel }}</label>\n              </mdb-form-control>\n              <div class=\"d-flex justify-content-end\">\n                <button (click)=\"insertImage()\" type=\"button\" class=\"btn btn-primary\">{{ options.okButton }}</button>\n                <button (click)=\"imageDropdown.hide()\" type=\"button\" class=\"btn btn-primary ms-2\">{{ options.cancelButton }}</button>\n              </div>\n            </form>\n          </ul>\n        </div>\n      </div>\n      <button \n        (click)=\"performAction('insertHorizontalRule')\"\n        class=\"btn btn-light wysiwyg-btn\"\n        aria-label=\"Insert Horizontal Line\"\n        [attr.disabled]=\"toolbarOptions.links.insertHorizontalRule.disabled ? 'disabled' : null\" \n        *ngIf=\"!toolbarOptions.links.insertHorizontalRule.hidden\"\n        mdbTooltip=\"{{ options['insertHorizontalRule'] }}\"\n        placement=\"bottom\"\n      >\n        <i class=\"fas fa-grip-lines\"></i>\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #showCodeTemplate>\n  <div \n    #tools\n    class=\"ms-auto wysiwyg-toolbar-group\"\n    id=\"showCode\"\n  >\n    <div class=\"btn-group mx-1 border-0 btn-group-sm shadow-0\" role=\"group\">\n      <button\n        (click)=\"toggleHtml()\"\n        type=\"button\"\n        class=\"btn btn-sm btn-light wysiwyg-btn shadow-0\"\n        aria-label=\"Show HTML code\"\n        [attr.disabled]=\"toolbarOptions.showCode.disabled ? 'disabled' : null\" \n        mdbTooltip=\"{{ options['showHTML'] }}\"\n        placement=\"bottom\"\n      >\n        <i class=\"fas fa-code\"></i>\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #undoRedoTemplate>\n  <div \n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"undoRedo\"\n    *ngIf=\"!toolbarOptions.undoRedo.hidden && toolbarOptionsVisibility.undoRedo\"\n  >\n    <div class=\"btn-group mx-1 border-0 btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let undoRedo of undoRedoItems\">\n        <button\n          (click)=\"performAction(undoRedo.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[undoRedo.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.undoRedo[undoRedo.type].disabled || toolbarOptions.undoRedo.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.undoRedo[undoRedo.type].hidden\"\n        >\n          <i class=\"{{undoRedo.icon}}\"></i>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #toolbarTogglerTemplate>\n  <div class=\"ms-auto wysiwyg-toolbar-group wysiwyg-toolbar-toggler\">\n    <div mdbDropdown class=\"dropdown mx-1\">\n      <button\n        #toolbarToggler\n        class=\"dropdown-toggle btn btn-sm btn-light wysiwyg-btn shadow-0\"\n        type=\"button\"\n        id=\"dropdownMenuButton\"\n        aria-expanded=\"false\"\n        mdbDropdownToggle\n        mdbTooltip=\"{{ options['moreOptions'] }}\"\n        placement=\"bottom\"\n      >\n        <i class=\"fas fa-ellipsis-h\"></i>\n      </button>\n      <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n        <ng-template *ngIf=\"!toolbarOptions.styles.hidden && !toolbarOptionsVisibility.styles then styleTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.formatting.hidden && !toolbarOptionsVisibility.formatting then formatingTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.align.hidden && !toolbarOptionsVisibility.align then alignTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.lists.hidden && !toolbarOptionsVisibility.lists then listsTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.links.hidden && !toolbarOptionsVisibility.links then linksTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.showCode.hidden && !toolbarOptionsVisibility.showCode then showCodeTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.undoRedo.hidden && !toolbarOptionsVisibility.undoRedo then undoRedoTemplate\"></ng-template>\n      </ul>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i1.MdbDropdownDirective, selector: "[mdbDropdown]", inputs: ["animation", "offset", "closeOnOutsideClick", "closeOnItemClick", "closeOnEsc"], outputs: ["dropdownShow", "dropdownShown", "dropdownHide", "dropdownHidden"] }, { type: i2.MdbFormControlComponent, selector: "mdb-form-control" }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.MdbDropdownToggleDirective, selector: "[mdbDropdownToggle]", exportAs: ["mdbDropdownToggle"] }, { type: i1.MdbDropdownMenuDirective, selector: "[mdbDropdownMenu]", exportAs: ["mdbDropdownMenu"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.MdbTooltipDirective, selector: "[mdbTooltip]", inputs: ["mdbTooltip", "tooltipDisabled", "placement", "html", "animation", "trigger", "delayShow", "delayHide", "offset"], outputs: ["tooltipShow", "tooltipShown", "tooltipHide", "tooltipHidden"], exportAs: ["mdbTooltip"] }, { type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.MdbInputDirective, selector: "[mdbInput]", inputs: ["disabled", "readonly", "value"], exportAs: ["mdbInput"] }, { type: i2.MdbLabelDirective, selector: "[mdbLabel]", exportAs: ["mdbLabel"] }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbWysiwygComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mdb-wysiwyg', providers: [VALUE_ACCESSOR], template: "<div>\n  <textarea id=\"demo\" style=\"width: 0px; height: 0px; visibility: hidden\" cols=\"30\" rows=\"10\"></textarea>\n  <div class=\"wysiwyg w-100 border\">\n    <div \n      class=\"wysiwyg-toolbar btn-toolbar\"\n      role=\"toolbar\"\n      [ngClass]=\"{'sticky-top': fixed}\"\n      [ngStyle]=\"{top: fixedOffsetTop + 'px'}\"  \n    >\n      <ng-template *ngIf=\"!toolbarOptions.styles.hidden && toolbarOptionsVisibility.styles then styleTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.formatting.hidden && toolbarOptionsVisibility.formatting then formatingTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.align.hidden && toolbarOptionsVisibility.align then alignTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.lists.hidden && toolbarOptionsVisibility.lists then listsTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.links.hidden && toolbarOptionsVisibility.links then linksTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.showCode.hidden && toolbarOptionsVisibility.showCode then showCodeTemplate\"></ng-template>\n      <ng-template *ngIf=\"!toolbarOptions.undoRedo.hidden && toolbarOptionsVisibility.undoRedo then undoRedoTemplate\"></ng-template>\n      <ng-template *ngIf=\"toolbarTogglerVisible then toolbarTogglerTemplate\"></ng-template>\n\n    </div>\n    <div \n      #wysiwygContent\n      class=\"wysiwyg-content\"\n      contenteditable=\"true\"\n      (blur)=\"getSelection()\"\n      [ngClass]=\"{'wysiwyg-show-html': isCodeShown}\"\n    >\n\n    </div>\n  </div>\n</div>\n\n<ng-template #styleTemplate>\n  <div\n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"styles\"\n  >\n    <div mdbDropdown class=\" mx-1 border-0\">\n      <button\n        class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0\"\n        type=\"button\"\n        id=\"wysiwygTextStyle\"\n        aria-expanded=\"false\"\n        mdbDropdownToggle\n        [attr.disabled]=\"toolbarOptions.styles.disabled ? 'disabled' : null\" \n      >\n        {{ options.textStyle }}\n      </button>\n      <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"wysiwygTextStyle\">\n        <ng-container *ngFor=\"let style of toolbarStyleItems; let i = index\">\n          <li *ngIf=\"!toolbarOptions.styles[style.selector].hidden\">\n            <button \n              type=\"button\" \n              class=\"dropdown-item\"\n              (click)=\"performAction('formatBlock', style.selector)\"\n              [attr.disabled]=\"toolbarOptions.styles[style.selector].disabled || toolbarOptions.styles.disabled ? 'disabled' : null\" \n            >\n              {{ options[style.type] }} {{ style.type === 'heading' ? i : ''}}\n            </button>\n          </li>\n        </ng-container>\n      </ul>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #formatingTemplate>\n  <div \n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"formatting\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let format of toolbarTextFormatingItems\">\n        <button \n          (click)=\"performAction(format.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[format.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.formatting[format.type].disabled || toolbarOptions.formatting.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.formatting[format.type].hidden\"\n        >\n          <i class=\"{{ format.icon }}\"></i>\n        </button> \n      </ng-container>\n      \n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div mdbDropdown class=\"mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-color\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['textcolor'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.formatting.textColor.disabled || toolbarOptions.formatting.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.formatting.textColor.hidden\"\n          >\n            <i class=\"fas fa-font\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\" style=\"max-width: 8rem; min-width: 8rem;\">\n            <button\n              *ngFor=\"let color of colors\"\n              (click)=\"performAction('foreColor', color)\"\n              type=\"button\"\n              class=\"dropdown-item d-inline-block btn btn-link wysiwyg-color border-0 p-0\"\n              [ngStyle]=\"{background: color}\"\n            >\n            </button>\n          </ul>\n        </div>\n      </div>\n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div mdbDropdown class=\" mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-color\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['textBackgroundColor'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.formatting.textBackground.disabled || toolbarOptions.formatting.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.formatting.textBackground.hidden\"\n          >\n            <i class=\"fas fa-paint-brush\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\" style=\"max-width: 8rem; min-width: 8rem;\">\n            <button\n              *ngFor=\"let color of colors\"\n              (click)=\"performAction('backColor', color)\"\n              type=\"button\"\n              class=\"dropdown-item d-inline-block btn btn-link wysiwyg-color border-0 p-0\"\n              [ngStyle]=\"{background: color}\"\n            >\n            </button>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #alignTemplate>\n  <div \n    #tools\n    id=\"align\"\n    class=\"wysiwyg-toolbar-group\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let align of alignItems\">\n        <button\n          (click)=\"performAction(align.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[align.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.align[align.type].disabled || toolbarOptions.align.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.align[align.type].hidden\"\n        >\n          <i class=\"{{align.icon}}\"></i>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #listsTemplate>\n  <div\n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"lists\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let list of listItems\">\n        <button\n          (click)=\"performAction(list.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[list.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.lists[list.type].disabled || toolbarOptions.lists.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.lists[list.type].hidden\"\n        >\n          <i class=\"{{list.icon}}\"></i>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #linksTemplate>\n  <div \n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"links\"\n  >\n    <div class=\"mx-1 border-0 btn-group btn-group-sm shadow-0 dropdown\" role=\"group\">\n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div (dropdownShow)=\"onLinkDropdownOpen()\" #linkDropdown mdbDropdown class=\" mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-btn\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['insertLink'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.links.link.disabled || toolbarOptions.links.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.links.link.hidden\"\n          >\n            <i class=\"fas fa-paperclip\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\">\n            <form [formGroup]=\"linkForm\" class=\"px-4 py-3\">\n              <h5 class=\"mb-3\">{{ options.addLinkHead }}</h5>\n              <mdb-form-control class=\"mb-4\">\n                <input formControlName=\"url\" mdbInput type=\"url\" id=\"link-url\" class=\"form-control\" />\n                <label mdbLabel class=\"form-label\" for=\"link-url\">{{ options.linkUrlLabel }}</label>\n              </mdb-form-control>\n              <mdb-form-control class=\"mb-4\">\n                <input formControlName=\"description\" mdbInput type=\"text\" id=\"link-description\" class=\"form-control\" />\n                <label mdbLabel class=\"form-label\" for=\"link-description\">{{ options.linkDescription }}</label>\n              </mdb-form-control>\n              <div class=\"d-flex justify-content-end\">\n                <button (click)=\"insertLink()\" type=\"button\" class=\"btn btn-primary\">{{ options.okButton }}</button>\n                <button (click)=\"linkDropdown.hide()\" type=\"button\" class=\"btn btn-primary ms-2\">{{ options.cancelButton }}</button>\n              </div>\n            </form>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"btn-group btn-group-sm\" role=\"group\">\n        <div (dropdownShow)=\"onImageDropdownOpen()\" #imageDropdown mdbDropdown class=\" mx-0 border-0\">\n          <button\n            class=\"btn btn-sm btn-light wysiwyg-btn dropdown-toggle shadow-0 wysiwyg-btn\"\n            type=\"button\"\n            id=\"textColor\"\n            aria-expanded=\"false\"\n            mdbDropdownToggle\n            mdbTooltip=\"{{ options['insertPicture'] }}\"\n            placement=\"bottom\"\n            [attr.disabled]=\"toolbarOptions.links.image.disabled || toolbarOptions.links.disabled ? 'disabled' : null\" \n            *ngIf=\"!toolbarOptions.links.image.hidden\"\n          >\n            <i class=\"far fa-image\"></i>\n          </button>\n          <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"textColor\">\n            <form class=\"px-4 py-3\">\n              <h5 class=\"mb-3\">{{ options.addImageHead }}</h5>\n              <mdb-form-control class=\"mb-4\">\n                <input [formControl]=\"imageForm\" mdbInput type=\"url\" id=\"image-url\" class=\"form-control\" />\n                <label mdbLabel class=\"form-label\" for=\"image-url\">{{ options.imageUrlLabel }}</label>\n              </mdb-form-control>\n              <div class=\"d-flex justify-content-end\">\n                <button (click)=\"insertImage()\" type=\"button\" class=\"btn btn-primary\">{{ options.okButton }}</button>\n                <button (click)=\"imageDropdown.hide()\" type=\"button\" class=\"btn btn-primary ms-2\">{{ options.cancelButton }}</button>\n              </div>\n            </form>\n          </ul>\n        </div>\n      </div>\n      <button \n        (click)=\"performAction('insertHorizontalRule')\"\n        class=\"btn btn-light wysiwyg-btn\"\n        aria-label=\"Insert Horizontal Line\"\n        [attr.disabled]=\"toolbarOptions.links.insertHorizontalRule.disabled ? 'disabled' : null\" \n        *ngIf=\"!toolbarOptions.links.insertHorizontalRule.hidden\"\n        mdbTooltip=\"{{ options['insertHorizontalRule'] }}\"\n        placement=\"bottom\"\n      >\n        <i class=\"fas fa-grip-lines\"></i>\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #showCodeTemplate>\n  <div \n    #tools\n    class=\"ms-auto wysiwyg-toolbar-group\"\n    id=\"showCode\"\n  >\n    <div class=\"btn-group mx-1 border-0 btn-group-sm shadow-0\" role=\"group\">\n      <button\n        (click)=\"toggleHtml()\"\n        type=\"button\"\n        class=\"btn btn-sm btn-light wysiwyg-btn shadow-0\"\n        aria-label=\"Show HTML code\"\n        [attr.disabled]=\"toolbarOptions.showCode.disabled ? 'disabled' : null\" \n        mdbTooltip=\"{{ options['showHTML'] }}\"\n        placement=\"bottom\"\n      >\n        <i class=\"fas fa-code\"></i>\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #undoRedoTemplate>\n  <div \n    #tools\n    class=\"wysiwyg-toolbar-group\"\n    id=\"undoRedo\"\n    *ngIf=\"!toolbarOptions.undoRedo.hidden && toolbarOptionsVisibility.undoRedo\"\n  >\n    <div class=\"btn-group mx-1 border-0 btn-group-sm shadow-0\" role=\"group\">\n      <ng-container *ngFor=\"let undoRedo of undoRedoItems\">\n        <button\n          (click)=\"performAction(undoRedo.type)\"\n          type=\"button\"\n          class=\"btn btn-light wysiwyg-btn\"\n          mdbTooltip=\"{{ options[undoRedo.type] }}\"\n          placement=\"bottom\"\n          [attr.disabled]=\"toolbarOptions.undoRedo[undoRedo.type].disabled || toolbarOptions.undoRedo.disabled ? 'disabled' : null\" \n          *ngIf=\"!toolbarOptions.undoRedo[undoRedo.type].hidden\"\n        >\n          <i class=\"{{undoRedo.icon}}\"></i>\n        </button>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #toolbarTogglerTemplate>\n  <div class=\"ms-auto wysiwyg-toolbar-group wysiwyg-toolbar-toggler\">\n    <div mdbDropdown class=\"dropdown mx-1\">\n      <button\n        #toolbarToggler\n        class=\"dropdown-toggle btn btn-sm btn-light wysiwyg-btn shadow-0\"\n        type=\"button\"\n        id=\"dropdownMenuButton\"\n        aria-expanded=\"false\"\n        mdbDropdownToggle\n        mdbTooltip=\"{{ options['moreOptions'] }}\"\n        placement=\"bottom\"\n      >\n        <i class=\"fas fa-ellipsis-h\"></i>\n      </button>\n      <ul mdbDropdownMenu class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n        <ng-template *ngIf=\"!toolbarOptions.styles.hidden && !toolbarOptionsVisibility.styles then styleTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.formatting.hidden && !toolbarOptionsVisibility.formatting then formatingTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.align.hidden && !toolbarOptionsVisibility.align then alignTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.lists.hidden && !toolbarOptionsVisibility.lists then listsTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.links.hidden && !toolbarOptionsVisibility.links then linksTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.showCode.hidden && !toolbarOptionsVisibility.showCode then showCodeTemplate\"></ng-template>\n        <ng-template *ngIf=\"!toolbarOptions.undoRedo.hidden && !toolbarOptionsVisibility.undoRedo then undoRedoTemplate\"></ng-template>\n      </ul>\n    </div>\n  </div>\n</ng-template>" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { linkDropdown: [{
                type: ViewChild,
                args: ['linkDropdown']
            }], imageDropdown: [{
                type: ViewChild,
                args: ['imageDropdown']
            }], wysiwygContent: [{
                type: ViewChild,
                args: ['wysiwygContent', { static: true }]
            }], toolbarToggler: [{
                type: ViewChild,
                args: ['toolbarToggler']
            }], tools: [{
                type: ViewChildren,
                args: ['tools']
            }], value: [{
                type: Input
            }], toolbarOptions: [{
                type: Input
            }], fixed: [{
                type: Input
            }], fixedOffsetTop: [{
                type: Input
            }], options: [{
                type: Input
            }], colors: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], valueContent: [{
                type: Output
            }] } });

class MdbWysiwygModule {
}
MdbWysiwygModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbWysiwygModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
MdbWysiwygModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbWysiwygModule, declarations: [MdbWysiwygComponent], imports: [ReactiveFormsModule, CommonModule, MdbDropdownModule, MdbFormsModule, MdbTooltipModule], exports: [MdbWysiwygComponent] });
MdbWysiwygModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbWysiwygModule, imports: [[ReactiveFormsModule, CommonModule, MdbDropdownModule, MdbFormsModule, MdbTooltipModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.3", ngImport: i0, type: MdbWysiwygModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MdbWysiwygComponent],
                    imports: [ReactiveFormsModule, CommonModule, MdbDropdownModule, MdbFormsModule, MdbTooltipModule],
                    exports: [MdbWysiwygComponent],
                }]
        }] });

/*
 * Public API Surface of mdb-angular-wysiwyg
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MdbWysiwygComponent, MdbWysiwygModule };
//# sourceMappingURL=mdb-angular-wysiwyg.mjs.map
