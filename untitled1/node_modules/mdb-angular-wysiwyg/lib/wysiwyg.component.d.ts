import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { MdbDropdownDirective } from 'mdb-angular-ui-kit/dropdown';
import { Observable } from 'rxjs';
import { MdbWysiwygOptions } from './wysiwyg-options.interface';
import { MdbWysiwygToolbarOptions } from './wysiwyg-toolbar-options.interface';
import * as i0 from "@angular/core";
export declare class MdbWysiwygComponent implements OnInit, AfterViewInit, OnDestroy {
    private el;
    private _ngZone;
    private document;
    linkDropdown: MdbDropdownDirective;
    imageDropdown: MdbDropdownDirective;
    wysiwygContent: ElementRef;
    toolbarToggler: ElementRef;
    tools: QueryList<ElementRef>;
    get value(): string;
    set value(newValue: string);
    get toolbarOptions(): MdbWysiwygToolbarOptions;
    set toolbarOptions(newValue: MdbWysiwygToolbarOptions);
    fixed: boolean;
    fixedOffsetTop: number;
    get options(): MdbWysiwygOptions;
    set options(newValue: MdbWysiwygOptions);
    get colors(): string[];
    set colors(newValue: string[]);
    valueChange: EventEmitter<string>;
    valueContent: EventEmitter<string>;
    linkForm: FormGroup;
    imageForm: FormControl;
    isCodeShown: boolean;
    toolbarStyleItems: {
        type: string;
        selector: string;
    }[];
    toolbarTextFormatingItems: {
        type: string;
        icon: string;
    }[];
    alignItems: {
        type: string;
        icon: string;
    }[];
    listItems: {
        type: string;
        icon: string;
    }[];
    undoRedoItems: {
        type: string;
        icon: string;
    }[];
    toolbarOptionsVisibility: {
        styles: boolean;
        formatting: boolean;
        align: boolean;
        lists: boolean;
        links: boolean;
        showCode: boolean;
        undoRedo: boolean;
    };
    toolbarTogglerVisible: boolean;
    private _toolbarOptionsWidth;
    private _value;
    private _selection;
    private _toolbarOptions;
    private _colors;
    private _options;
    private wysiwygValueChange$;
    private _destroy;
    valueChange$(): Observable<any>;
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    valueChanged(): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisableState(isDisabled: boolean): void;
    constructor(el: ElementRef, _ngZone: NgZone, document: any);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getCode(): string;
    performAction(command: string, argument?: string): void;
    insertLink(): void;
    insertImage(): void;
    toggleHtml(): void;
    getSelection(): void;
    onLinkDropdownOpen(): void;
    onImageDropdownOpen(): void;
    private _updateToolbar;
    private _getToolsWidth;
    private _deepMerge;
    static ɵfac: i0.ɵɵFactoryDeclaration<MdbWysiwygComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MdbWysiwygComponent, "mdb-wysiwyg", never, { "value": "value"; "toolbarOptions": "toolbarOptions"; "fixed": "fixed"; "fixedOffsetTop": "fixedOffsetTop"; "options": "options"; "colors": "colors"; }, { "valueChange": "valueChange"; "valueContent": "valueContent"; }, never, never>;
}
