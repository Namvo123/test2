import * as i0 from '@angular/core';
import { Injectable } from '@angular/core';

class MdbCookiesManagementService {
    constructor() { }
    set(name, value, attributes = {}) {
        attributes = Object.assign(attributes, { path: '/' });
        if (typeof attributes.expires === 'number') {
            attributes.expires = new Date(Number(new Date()) + attributes.expires * 1000 * 60 * 60 * 24);
        }
        if (attributes.expires) {
            attributes.expires = attributes.expires.toUTCString();
        }
        const stringifiedValue = JSON.stringify(value);
        if (/^[{[]/.test(stringifiedValue)) {
            value = stringifiedValue;
        }
        value = encodeURIComponent(String(value));
        name = encodeURIComponent(String(name)).replace(/[()]/g, escape);
        let stringifiedAttributes = '';
        Object.keys(attributes).forEach((name) => {
            stringifiedAttributes += `; ${name}`;
            stringifiedAttributes += `=${attributes[name].split(';')[0]}`;
        });
        return (document.cookie = `${name}=${value}${stringifiedAttributes}`);
    }
    get(name) {
        const cookies = document.cookie ? document.cookie.split('; ') : [];
        const result = {};
        cookies.forEach((el) => {
            const cookie = el.split('=');
            let cookieValue = cookie.slice(1).join('=');
            const cookieName = cookie[0].replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            cookieValue = cookieValue.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            result[cookieName] = cookieValue;
        });
        return name ? result[name] : result;
    }
    remove(name) {
        this.set(name, '', { expires: -1 });
    }
}
MdbCookiesManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCookiesManagementService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MdbCookiesManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCookiesManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCookiesManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });

/*
 * Public API Surface of mdb-angular-cookies-management
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MdbCookiesManagementService };
//# sourceMappingURL=mdb-angular-cookies-management.mjs.map
