import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class MdbCookiesManagementService {
    constructor() { }
    set(name, value, attributes = {}) {
        attributes = Object.assign(attributes, { path: '/' });
        if (typeof attributes.expires === 'number') {
            attributes.expires = new Date(Number(new Date()) + attributes.expires * 1000 * 60 * 60 * 24);
        }
        if (attributes.expires) {
            attributes.expires = attributes.expires.toUTCString();
        }
        const stringifiedValue = JSON.stringify(value);
        if (/^[{[]/.test(stringifiedValue)) {
            value = stringifiedValue;
        }
        value = encodeURIComponent(String(value));
        name = encodeURIComponent(String(name)).replace(/[()]/g, escape);
        let stringifiedAttributes = '';
        Object.keys(attributes).forEach((name) => {
            stringifiedAttributes += `; ${name}`;
            stringifiedAttributes += `=${attributes[name].split(';')[0]}`;
        });
        return (document.cookie = `${name}=${value}${stringifiedAttributes}`);
    }
    get(name) {
        const cookies = document.cookie ? document.cookie.split('; ') : [];
        const result = {};
        cookies.forEach((el) => {
            const cookie = el.split('=');
            let cookieValue = cookie.slice(1).join('=');
            const cookieName = cookie[0].replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            cookieValue = cookieValue.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            result[cookieName] = cookieValue;
        });
        return name ? result[name] : result;
    }
    remove(name) {
        this.set(name, '', { expires: -1 });
    }
}
MdbCookiesManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCookiesManagementService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MdbCookiesManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCookiesManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: MdbCookiesManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llcy1tYW5hZ2VtZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tZGItYW5ndWxhci1jb29raWVzLW1hbmFnZW1lbnQvc3JjL2xpYi9jb29raWVzLW1hbmFnZW1lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8sMkJBQTJCO0lBQ3RDLGdCQUFlLENBQUM7SUFFaEIsR0FBRyxDQUFDLElBQVksRUFBRSxLQUFVLEVBQUUsYUFBa0IsRUFBRTtRQUNoRCxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV0RCxJQUFJLE9BQU8sVUFBVSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDMUMsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDOUY7UUFFRCxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDdEIsVUFBVSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3ZEO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ2xDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQztTQUMxQjtRQUVELEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUUxQyxJQUFJLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVqRSxJQUFJLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQy9DLHFCQUFxQixJQUFJLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDckMscUJBQXFCLElBQUksSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDaEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBYTtRQUNmLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbkUsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRWxCLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFVLEVBQUUsRUFBRTtZQUM3QixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUU3RSxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBRTFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7d0hBbkRVLDJCQUEyQjs0SEFBM0IsMkJBQTJCLGNBRjFCLE1BQU07MkZBRVAsMkJBQTJCO2tCQUh2QyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIE1kYkNvb2tpZXNNYW5hZ2VtZW50U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBzZXQobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55LCBhdHRyaWJ1dGVzOiBhbnkgPSB7fSk6IHN0cmluZyB7XG4gICAgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oYXR0cmlidXRlcywgeyBwYXRoOiAnLycgfSk7XG5cbiAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMuZXhwaXJlcyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGF0dHJpYnV0ZXMuZXhwaXJlcyA9IG5ldyBEYXRlKE51bWJlcihuZXcgRGF0ZSgpKSArIGF0dHJpYnV0ZXMuZXhwaXJlcyAqIDEwMDAgKiA2MCAqIDYwICogMjQpO1xuICAgIH1cblxuICAgIGlmIChhdHRyaWJ1dGVzLmV4cGlyZXMpIHtcbiAgICAgIGF0dHJpYnV0ZXMuZXhwaXJlcyA9IGF0dHJpYnV0ZXMuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0cmluZ2lmaWVkVmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgaWYgKC9eW3tbXS8udGVzdChzdHJpbmdpZmllZFZhbHVlKSkge1xuICAgICAgdmFsdWUgPSBzdHJpbmdpZmllZFZhbHVlO1xuICAgIH1cblxuICAgIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh2YWx1ZSkpO1xuXG4gICAgbmFtZSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcobmFtZSkpLnJlcGxhY2UoL1soKV0vZywgZXNjYXBlKTtcblxuICAgIGxldCBzdHJpbmdpZmllZEF0dHJpYnV0ZXMgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSBgOyAke25hbWV9YDtcbiAgICAgIHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSBgPSR7YXR0cmlidXRlc1tuYW1lXS5zcGxpdCgnOycpWzBdfWA7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PSR7dmFsdWV9JHtzdHJpbmdpZmllZEF0dHJpYnV0ZXN9YCk7XG4gIH1cblxuICBnZXQobmFtZT86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgY29va2llcy5mb3JFYWNoKChlbDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBjb29raWUgPSBlbC5zcGxpdCgnPScpO1xuICAgICAgbGV0IGNvb2tpZVZhbHVlID0gY29va2llLnNsaWNlKDEpLmpvaW4oJz0nKTtcblxuICAgICAgY29uc3QgY29va2llTmFtZSA9IGNvb2tpZVswXS5yZXBsYWNlKC8oJVswLTlBLVpdezJ9KSsvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcblxuICAgICAgY29va2llVmFsdWUgPSBjb29raWVWYWx1ZS5yZXBsYWNlKC8oJVswLTlBLVpdezJ9KSsvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcblxuICAgICAgcmVzdWx0W2Nvb2tpZU5hbWVdID0gY29va2llVmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5hbWUgPyByZXN1bHRbbmFtZV0gOiByZXN1bHQ7XG4gIH1cblxuICByZW1vdmUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zZXQobmFtZSwgJycsIHsgZXhwaXJlczogLTEgfSk7XG4gIH1cbn1cbiJdfQ==